Search.setIndex({"docnames": [".ipynb_checkpoints/examples-checkpoint", ".ipynb_checkpoints/index-checkpoint", ".ipynb_checkpoints/maxaidatahandling-checkpoint", ".ipynb_checkpoints/maxaifeaturization.aggregation-checkpoint", ".ipynb_checkpoints/maxaifeaturization.featuretools-checkpoint", ".ipynb_checkpoints/modules-checkpoint", ".ipynb_checkpoints/quickstart-checkpoint", "api", "examples", "index", "installation", "maxaidatahandling", "maxaifeaturization", "maxaifeaturization.aggregation", "maxaifeaturization.featuretools", "maxaifeaturization.selection", "maxaifeaturization.timeseries", "maxaifeaturization.transformation", "maxaimetadata", "maxaimodel", "maxaimodel.H2O", "maxaimodel.H2O.classification", "maxaimodel.H2O.clustering", "maxaimodel.H2O.regression", "maxaimodel.H2O.unsupervised", "maxaimodel.python", "maxaimodel.python.timeseries", "maxaimodel.spark", "maxaimodel.spark.classification", "maxaimodel.spark.clustering", "maxaimodel.spark.recommendation", "maxaimodel.spark.regression", "maxaimodel.spark.timeseries", "maxairesources", "maxairesources.cleaning", "maxairesources.customer360", "maxairesources.datachecks", "maxairesources.datachecks.test", "maxairesources.ensemble", "maxairesources.eval", "maxairesources.exception", "maxairesources.factory", "maxairesources.logging", "maxairesources.model_approval", "maxairesources.optimizer", "maxairesources.pipeline", "maxairesources.utilities", "maxairesources.utilities.tests", "modules", "quickstart"], "filenames": [".ipynb_checkpoints/examples-checkpoint.rst", ".ipynb_checkpoints/index-checkpoint.rst", ".ipynb_checkpoints/maxaidatahandling-checkpoint.rst", ".ipynb_checkpoints/maxaifeaturization.aggregation-checkpoint.rst", ".ipynb_checkpoints/maxaifeaturization.featuretools-checkpoint.rst", ".ipynb_checkpoints/modules-checkpoint.rst", ".ipynb_checkpoints/quickstart-checkpoint.rst", "api.rst", "examples.rst", "index.rst", "installation.rst", "maxaidatahandling.rst", "maxaifeaturization.rst", "maxaifeaturization.aggregation.rst", "maxaifeaturization.featuretools.rst", "maxaifeaturization.selection.rst", "maxaifeaturization.timeseries.rst", "maxaifeaturization.transformation.rst", "maxaimetadata.rst", "maxaimodel.rst", "maxaimodel.H2O.rst", "maxaimodel.H2O.classification.rst", "maxaimodel.H2O.clustering.rst", "maxaimodel.H2O.regression.rst", "maxaimodel.H2O.unsupervised.rst", "maxaimodel.python.rst", "maxaimodel.python.timeseries.rst", "maxaimodel.spark.rst", "maxaimodel.spark.classification.rst", "maxaimodel.spark.clustering.rst", "maxaimodel.spark.recommendation.rst", "maxaimodel.spark.regression.rst", "maxaimodel.spark.timeseries.rst", "maxairesources.rst", "maxairesources.cleaning.rst", "maxairesources.customer360.rst", "maxairesources.datachecks.rst", "maxairesources.datachecks.test.rst", "maxairesources.ensemble.rst", "maxairesources.eval.rst", "maxairesources.exception.rst", "maxairesources.factory.rst", "maxairesources.logging.rst", "maxairesources.model_approval.rst", "maxairesources.optimizer.rst", "maxairesources.pipeline.rst", "maxairesources.utilities.rst", "maxairesources.utilities.tests.rst", "modules.rst", "quickstart.rst"], "titles": ["Examples", "Welcome to Max.AI\u2019s documentation!", "maxaidatahandling package", "maxaifeaturization.aggregation package", "maxaifeaturization.featuretools package", "max.ai.ds.core", "Quickstart", "API", "Examples", "Welcome to Max.AI\u2019s documentation!", "Installation Guide", "maxaidatahandling package", "maxaifeaturization package", "maxaifeaturization.aggregation package", "maxaifeaturization.featuretools package", "maxaifeaturization.selection package", "maxaifeaturization.timeseries package", "maxaifeaturization.transformation package", "maxaimetadata package", "maxaimodel package", "maxaimodel.H2O package", "maxaimodel.H2O.classification package", "maxaimodel.H2O.clustering package", "maxaimodel.H2O.regression package", "maxaimodel.H2O.unsupervised package", "maxaimodel.python package", "maxaimodel.python.timeseries package", "maxaimodel.spark package", "maxaimodel.spark.classification package", "maxaimodel.spark.clustering package", "maxaimodel.spark.recommendation package", "maxaimodel.spark.regression package", "maxaimodel.spark.timeseries package", "maxairesources package", "maxairesources.cleaning package", "maxairesources.customer360 package", "maxairesources.datachecks package", "maxairesources.datachecks.test package", "maxairesources.ensemble package", "maxairesources.eval package", "maxairesources.exception package", "maxairesources.factory package", "maxairesources.logging package", "maxairesources.model_approval package", "maxairesources.optimizer package", "maxairesources.pipeline package", "maxairesources.utilities package", "maxairesources.utilities.tests package", "max.ai.ds.core", "Quickstart"], "terms": {"provid": [1, 9, 35, 38], "readi": [1, 9], "list": [1, 3, 4, 9, 13, 14, 15, 17, 26, 28, 31, 34, 35, 36, 38, 39, 46], "util": [1, 9, 33, 48], "creat": [1, 9, 17, 45], "end": [1, 9], "ml": [1, 9, 15, 28, 31], "pipelin": [1, 9, 33, 36, 48], "solv": [1, 9], "complex": [1, 9], "busi": [1, 9], "problem": [1, 9], "us": [1, 2, 6, 9, 10, 11, 15, 17, 23, 24, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 45, 46, 49], "state": [1, 9], "art": [1, 9], "modul": [1, 9, 48], "come": [1, 9, 36], "equip": [1, 9], "store": [1, 9, 45], "process": [1, 2, 9, 11, 33, 34, 39, 42, 46], "transform": [1, 4, 9, 12, 14, 15, 29, 33, 45, 48], "data": [1, 2, 9, 11, 15, 17, 18, 26, 28, 29, 31, 32, 36, 38, 39, 40, 45, 46], "autom": [1, 4, 9, 14], "featur": [1, 3, 4, 9, 13, 14, 15, 17, 28, 31, 39, 40], "engineeri": [1, 9], "host": [1, 9], "model": [1, 2, 9, 11, 12, 15, 18, 23, 24, 26, 28, 29, 30, 31, 32, 39, 40, 41, 43, 46], "classif": [1, 9, 19, 20, 27], "cluster": [1, 9, 19, 20, 27], "regress": [1, 9, 19, 20, 27, 28, 39], "time": [1, 9, 16, 26, 32, 36, 46], "seri": [1, 9, 16, 26, 32, 36, 46], "much": [1, 9], "more": [1, 2, 9, 11], "you": [1, 9, 42], "can": [1, 2, 9, 11, 42], "refer": [1, 2, 9, 11, 26, 28, 31, 32, 39], "how": [1, 9], "quickstart": [1, 9], "instal": [1, 6, 9, 49], "your": [1, 9, 42], "project": [1, 9, 18], "index": [1, 4, 9, 14, 15, 17], "search": [1, 9, 23, 24, 26], "page": [1, 9], "class": [2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47], "dataevalu": [2, 11, 48], "label_col": [2, 11, 15, 39], "str": [2, 4, 11, 14, 15, 16, 17, 18, 26, 28, 30, 31, 32, 36, 39, 41, 46], "sample_ratio": [2, 11, 36, 39], "option": [2, 4, 11, 14, 15, 18, 26, 28, 30, 31, 32, 36, 39, 43, 46], "float": [2, 11, 31, 36, 39, 46], "0": [2, 6, 10, 11, 16, 28, 29, 31, 32, 36, 38, 39, 46, 49], "2": [2, 3, 11, 13, 16, 17, 28, 31, 38, 39, 46], "output_file_nam": [2, 11], "data_integr": [2, 11], "html": [2, 11, 26, 28, 31, 39], "pre_process_spark_funct": [2, 11, 39], "callabl": [2, 11, 39, 41], "none": [2, 4, 6, 10, 11, 14, 15, 18, 26, 28, 30, 31, 32, 36, 38, 39, 41, 43, 45, 46, 49], "sourc": [2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47], "base": [2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47], "object": [2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 29, 32, 34, 36, 38, 39, 41, 43, 45, 46, 47], "evaluat": [2, 11, 39], "run": [2, 11, 18, 28, 31, 32, 39, 46], "multil": [2, 11, 39], "check": [2, 11, 36, 39, 43], "valid": [2, 11, 26, 36, 39], "paramet": [2, 3, 4, 11, 13, 14, 15, 16, 17, 26, 28, 29, 30, 31, 32, 35, 46], "panda": [2, 11, 15, 16, 39, 46], "core": [2, 11, 39], "frame": [2, 11, 39, 46], "datafram": [2, 3, 4, 11, 13, 14, 15, 16, 17, 26, 33, 34, 36, 39, 43, 45, 46], "pyspark": [2, 4, 11, 14, 15, 17, 28, 31, 32, 39, 46], "sql": [2, 4, 11, 14, 17, 39], "save": [2, 11, 12, 15, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 39, 40, 45], "report": [2, 11, 36, 39], "file": [2, 3, 11, 13, 15, 30, 34, 39, 42, 45], "given": [2, 4, 11, 14, 17, 36, 39, 46], "locat": [2, 11, 39], "sampl": [2, 11, 31, 35, 38, 39, 46], "size": [2, 11, 39, 46], "convert": [2, 11, 17, 34, 35, 39, 46], "spark": [2, 3, 4, 9, 11, 13, 14, 15, 16, 17, 19, 26, 36, 39, 45, 46, 48], "default": [2, 4, 11, 14, 15, 17, 28, 30, 31], "A": [2, 11, 17, 32, 36, 39, 45, 46], "function": [2, 4, 11, 14, 15, 29, 35, 39, 42, 45, 46], "which": [2, 3, 11, 13, 15, 16, 17, 26, 28, 29, 30, 34, 35, 36, 39, 45, 46], "spark_datafram": [2, 11, 39, 46], "If": [2, 11, 28, 31, 39, 46], "thi": [2, 4, 11, 14, 29, 36, 39, 42, 46], "argument": [2, 3, 11, 13, 17, 35, 42, 45, 46], "i": [2, 3, 11, 13, 15, 16, 17, 26, 28, 29, 30, 31, 34, 36, 39, 40, 43, 45, 46], "pass": [2, 3, 11, 13, 17, 39, 42, 46], "abov": [2, 11, 39, 43], "won": [2, 11, 39], "t": [2, 11, 32, 38, 39, 46], "appli": [2, 4, 11, 14, 39, 46], "anymor": [2, 11, 39], "exampl": [2, 3, 11, 13, 16, 28, 32, 42, 46], "from": [2, 3, 11, 13, 15, 17, 28, 31, 32, 34, 36, 39, 42, 45, 46], "import": [2, 3, 11, 13, 15, 16, 17, 28, 31, 32, 39, 40, 41, 42, 46], "evalu": [2, 11, 33, 39, 48], "label": [2, 11, 17, 28, 38, 39, 46], "integrity_result": [2, 11], "maxdatafactori": [2, 11, 48], "data_factory_config": [2, 11], "dict": [2, 3, 11, 13, 15, 17, 18, 26, 28, 31, 32, 35, 36, 39, 41, 43, 46], "abc": [2, 11], "read": [2, 3, 11, 13, 34], "preprocess": [2, 9, 11, 33, 48], "summaris": [2, 11], "than": [2, 11], "one": [2, 3, 11, 13, 15, 17, 28, 42, 46], "get_all_dataset": [2, 11, 48], "get_dataset": [2, 11, 48], "dataset_nam": [2, 11], "prepare_dataset": [2, 11, 48], "store_dataset": [2, 11, 48], "maxdataset": [2, 11, 48], "name": [2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 26, 32, 41, 42, 45, 46], "dataset_config": [2, 11], "df": [2, 3, 11, 13, 16, 17, 26, 29, 32, 34, 35, 36, 46], "load": [2, 11, 12, 15, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 45], "both": [2, 11, 42], "reader": [2, 11], "writer": [2, 11], "param": [2, 11, 15, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 41, 43, 46], "_description_": [2, 4, 11, 14], "type": [2, 4, 11, 14, 15, 16, 17, 18, 26, 28, 31, 34, 35, 36, 40, 41, 46], "config": [2, 11, 15, 34, 35], "mode": [2, 11, 30, 31, 38, 45], "port": [2, 11, 40, 46], "1": [2, 3, 6, 10, 11, 13, 16, 17, 28, 31, 32, 36, 46, 49], "datatyp": [2, 11, 17], "sourcedetail": [2, 11], "s3": [2, 11, 33, 46], "fileformat": [2, 11], "csv": [2, 3, 11, 13, 15], "filepath": [2, 3, 11, 13], "dim_custom": [2, 11], "rename_col": [2, 11], "dob": [2, 11], "date_of_birth": [2, 11], "is_employe": [2, 11], "is_employee_bool": [2, 11], "select_col": [2, 11], "customer_id": [2, 3, 11, 13, 35, 46], "signup_d": [2, 11], "first_store_id": [2, 11], "is_outli": [2, 11], "gender": [2, 11], "languag": [2, 11], "re_partit": [2, 11], "data_analysi": [2, 11], "col_typ": [2, 11], "numerical_col": [2, 11], "bool_col": [2, 11], "categorical_col": [2, 11], "free_text_col": [2, 11], "unique_identifier_col": [2, 11], "cach": [2, 11], "true": [2, 11, 16, 17, 32, 35, 36, 39, 41, 43, 46], "todo": [2, 11, 17, 36], "connect": [2, 11], "meta": [2, 11], "mlflow": [2, 11, 18], "api": [2, 11, 15, 28, 31, 36], "max": [2, 3, 11, 13, 18], "store_data": [2, 11, 48], "get_key_valu": [2, 11, 48], "nested_dict": [2, 11], "kei": [2, 3, 11, 13, 18, 36, 46], "nest": [2, 11, 46], "exist": [2, 11, 45], "element": [2, 11], "perform": [3, 4, 13, 14, 16, 17, 26, 28, 29, 36, 43, 46], "oper": [3, 13, 16, 17, 35, 46], "ar": [3, 13, 17, 26, 29, 34, 40, 43, 46], "dictionari": [3, 13, 17, 26, 28, 31, 35, 36, 46], "contain": [3, 13, 28, 46], "feature_nam": [3, 13], "output_column_nam": [3, 13, 17], "int": [3, 13, 15, 16, 26, 35, 36, 39, 46], "sum": [3, 13, 38], "averag": [3, 13, 38], "etc": [3, 13, 26], "avail": [3, 13, 15, 26], "mean": [3, 13, 34], "3": [3, 13, 17, 28, 36, 46], "stddev": [3, 13, 36], "4": [3, 13, 17, 28, 31], "5": [3, 13, 17, 28, 31, 38], "min": [3, 13], "6": [3, 13, 17, 28, 31, 35], "count": [3, 13], "7": [3, 13, 17, 28, 35], "count_distinct": [3, 13], "8": [3, 13, 17, 28, 31, 38, 46], "varianc": [3, 13], "9": [3, 13, 17, 28], "percentil": [3, 13], "10": [3, 13, 15, 17, 26, 28, 31, 32, 36, 42], "quantil": [3, 13], "11": [3, 13, 17], "median": [3, 13, 34], "12": [3, 13, 17], "most_frequ": [3, 13], "accept": [3, 13, 39], "onli": [3, 13, 26, 42], "input": [3, 13, 15, 17, 29, 32, 34, 35, 38, 46], "output": [3, 13, 15, 29, 35, 38, 43, 46], "column": [3, 4, 13, 14, 15, 16, 17, 26, 28, 31, 32, 34, 35, 36, 38, 39, 45, 46], "gener": [3, 4, 13, 14, 31, 34, 36], "post": [3, 13], "agg_dict": [3, 13], "entity_column": [3, 13], "aggregation_op": [3, 13], "total_revenu": [3, 13], "mean_rev": [3, 13], "max_rev": [3, 13], "agg_obj": [3, 13], "agg_df": [3, 13], "execut": [3, 4, 12, 13, 14, 17, 45, 46], "driver": [3, 13, 17], "method": [3, 4, 13, 14, 15, 16, 17, 28, 29, 34, 36, 38, 40, 41, 42, 45, 46], "return": [3, 4, 13, 14, 15, 16, 17, 26, 28, 30, 32, 34, 35, 36, 38, 41, 42, 43, 45, 46], "constant": [3, 12, 13, 15, 17], "operation_dict": [3, 12, 13, 17], "featuretoolfeatur": [4, 12, 14], "logger": [4, 9, 14, 33, 48], "The": [4, 14, 29, 38, 41, 46], "constructor": [4, 14], "sparksess": [4, 14], "log": [4, 9, 12, 14, 17, 33, 48], "getlogg": [4, 14], "flow": [4, 14], "index_colum": [4, 14], "trans_primit": [4, 14], "agg_primit": [4, 14], "engin": [4, 14], "aggreg": [4, 9, 12, 14, 35, 46, 48], "matrix": [4, 14], "To": [6, 10, 49], "maxai": [6, 10, 49], "first": [6, 10, 49], "pip": [6, 10, 49], "py3": [6, 10, 49], "ani": [6, 10, 17, 49], "egg": [6, 49], "maxaifeatur": [9, 48], "packag": [9, 48], "subpackag": [9, 41, 48], "submodul": [9, 12, 19, 20, 25, 27, 48], "content": [9, 48], "featuretool": [9, 12, 48], "select": [9, 12, 26, 32, 46, 48], "model_based_selector": [9, 12, 48], "selector": [9, 12, 48], "timeseri": [9, 12, 19, 25, 27, 48], "univari": [9, 12, 48], "window": [9, 12, 48], "maxaimetadata": [9, 48], "maxflow": [9, 48], "auto_log": [9, 18, 48], "get_active_flow": [9, 18, 48], "get_active_run": [9, 18, 48], "get_registered_model": [9, 18, 48], "register_model": [9, 18, 33, 41, 48], "set_experi": [9, 18, 48], "start_run": [9, 18, 48], "stop": [9, 18, 48], "maxrun": [9, 18, 48], "end_run": [9, 18, 48], "log_artifact": [9, 18, 48], "log_data": [9, 18, 48], "log_dict": [9, 18, 48], "log_figur": [9, 18, 48], "log_metr": [9, 18, 48], "log_model": [9, 18, 48], "log_param": [9, 18, 48], "set_act": [9, 18, 48], "set_tag": [9, 18, 48], "start_child_run": [9, 18, 48], "test_maxflow": [9, 48], "maxaimodel": [9, 48], "h2o": [9, 19, 48], "python": [9, 19, 28, 31, 32, 46, 48], "maxairesourc": [9, 48], "clean": [9, 33, 48], "noiseremov": [9, 33, 48], "customer360": [9, 33, 48], "datacheck": [9, 33, 34, 48], "analysis_bas": [9, 33, 48], "dataframe_analysis_spark": [9, 33, 48], "ensembl": [9, 33, 48], "eval": [9, 33, 48], "classifier_evaluator_spark": [9, 33, 48], "model_evalu": [9, 33, 48], "regressor_evaluator_spark": [9, 33, 48], "except": [9, 15, 17, 30, 33, 48], "factori": [9, 33, 45, 48], "model_factori": [9, 33, 48], "model_approv": [9, 33, 48], "model_approver_spark": [9, 33, 48], "optim": [9, 33, 48], "param_optim": [9, 33, 48], "pipeline_factori": [9, 33, 48], "spark_pipelin": [9, 33, 48], "common_util": [9, 33, 48], "data_connector": [9, 33, 48], "encrypt": [9, 33, 48], "misc": [9, 33, 48], "multi_train": [9, 33, 48], "spark_distributor": [9, 33, 48], "train_test_split": [9, 33, 48], "conftest": [9, 36, 48], "binary_classifier_transformed_result": [9, 33, 48], "multiclass_classifier_transformed_result": [9, 33, 48], "normal_regressor_transformed_result": [9, 33, 48], "spark_sess": [9, 33, 37, 48], "venv": 10, "whl": 10, "modelbasedselector": [12, 15], "extract_feature_detail": [12, 15], "fit": [12, 15, 25, 26, 27, 28, 29, 31, 32, 33, 45], "modelbasedselectormodel": [12, 15], "feature_imp": [12, 15], "overwrit": [12, 15, 46], "write": [12, 15, 28, 31, 33, 46], "featureselector": [12, 15], "select_featur": [12, 15], "univariatefeatureselectorn": [12, 15], "decompos": [12, 16], "loess": [12, 16], "moving_averag": [12, 16], "stationaritytest": [12, 16], "adf": [12, 16], "kpss": [12, 16], "autocorrel": [12, 16], "check_stationar": [12, 16], "time_series_decomposit": [12, 16], "datetimetransform": [12, 17], "convert_to_iso8601": [12, 17], "filter": [12, 17, 35, 46], "numtransform": [12, 17], "exp": [12, 17, 18], "reciproc": [12, 17], "zscore": [12, 17], "strtransform": [12, 17], "alter_cas": [12, 17], "concat_column": [12, 17], "one_hot_encod": [12, 17], "split_column": [12, 17], "string_index": [12, 17], "trim_whitespac": [12, 17], "decode_transform": [12, 17], "unpack_kwarg": [12, 17], "windowoper": [12, 17], "feature_col": [15, 28, 31], "output_col": 15, "selectedfeatur": 15, "base_model": [15, 32, 38], "sparkgbtclassifi": [15, 27, 28], "model_param": [15, 32], "score": [15, 17, 36], "shap": 15, "n_featur": 15, "fetaur": 15, "design": 15, "align": 15, "hold": [15, 35], "target": 15, "valu": [15, 16, 17, 18, 26, 28, 32, 34, 36, 43, 46], "col": [15, 38], "vector": [15, 17, 28, 31], "calcul": [15, 16, 17, 38], "imp": 15, "rais": [15, 16, 17, 30, 36, 40], "sparkrfclassifi": [15, 27, 28], "sparkgbtregressor": [15, 27, 31], "sparkrfregressor": [15, 27, 31], "static": [15, 16, 17, 28, 32, 46], "extract": [15, 17], "build": [15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 45], "keyerror": 15, "metadata": 15, "tupl": 15, "id": [15, 28, 46], "properti": [15, 39, 46], "classmethod": [15, 18, 41, 47], "path": [15, 26, 28, 29, 30, 31, 32, 34, 36, 45, 46], "dummi": 15, "match": 15, "pysaprk": 15, "requir": [15, 26, 39], "slice": 15, "top": 15, "chisqselector": 15, "fitted_model": 15, "chisqselectormodel": 15, "rformula": 15, "univariatefeatureselector": 15, "univariatefeatureselectormodel": 15, "variancethresholdselector": 15, "variancethresholdselectormodel": 15, "vectorslic": 15, "abstract": [15, 36], "multipl": [15, 32, 45, 46], "methid": 15, "conf": 15, "defin": [15, 16, 17, 26, 35, 40, 46], "train": [15, 28, 30, 31, 32, 39, 46], "kwarg": [16, 17, 18, 41, 42, 43, 45, 46], "pandas_df": 16, "value_col": 16, "spark_df": [16, 32, 46], "groupby_col": [16, 32, 35, 46], "datetime_col": 16, "nlag": 16, "partial": 16, "fals": [16, 18, 36, 39, 41, 43, 46], "comput": [16, 17], "pearson": 16, "correl": [16, 36], "between": 16, "its": [16, 29], "shift": 16, "self": 16, "entiti": 16, "datetim": [16, 17, 26, 32], "quantiti": 16, "number": [16, 36, 46], "lag": [16, 26], "bool": [16, 17, 36, 41, 43], "valueerror": [16, 17], "each": [16, 17], "group": 16, "pd": [16, 26], "a1": 16, "b2": 16, "c3": 16, "d4": 16, "e5": 16, "data_list": 16, "date_list": 16, "entity_list": 16, "rang": [16, 34], "100": [16, 46], "sin_val": 16, "np": 16, "sin": 16, "random": [16, 28, 31, 46], "rand": 16, "date_v": 16, "2022": 16, "timedelta": 16, "dai": 16, "append": [16, 36, 46], "machine_id": 16, "date": [16, 17, 32, 34], "sensor_read": 16, "createdatafram": 16, "abdf": 16, "test": [16, 28, 30, 31, 33, 36, 43, 46], "ddf": 16, "z": [17, 31], "box": 17, "cox": 17, "bin": 17, "string": [17, 29, 30, 32, 39, 45], "hot": 17, "encod": 17, "concat": 17, "delimit": 17, "split": [17, 46], "uppercas": 17, "13": 17, "lowercas": 17, "14": [17, 35], "trim": 17, "15": 17, "timestr": 17, "iso8601": 17, "16": [17, 28], "epoch": 17, "17": [17, 28], "datepart": 17, "col_nam": [17, 34], "is_epoch": 17, "iso": 17, "8601": 17, "format": [17, 34, 35, 36], "assumpt": 17, "should": [17, 36, 38, 46], "upto": 17, "second": 17, "level": [17, 29, 42], "e": [17, 26], "digit": 17, "unix": 17, "column_nam": [17, 35], "filter_rul": 17, "rule_express": 17, "rule": 17, "enclos": 17, "all": [17, 28, 29, 31, 34, 35, 36, 38, 41, 43, 45, 46], "numer": [17, 34, 36], "camput": 17, "exponenti": 17, "incorrectdatatypeerror": 17, "when": [17, 26, 40], "logarithm": 17, "natur": 17, "neg": 17, "zero": 17, "encount": 17, "case": 17, "alter": 17, "decid": 17, "col_list": 17, "concaten": 17, "two": [17, 36, 38, 46], "map": 17, "categori": 17, "indic": 17, "binari": [17, 28, 39], "dtype": 17, "remov": [17, 34, 36], "whitespac": 17, "columnar": 17, "databas": 17, "transform_op": 17, "call": [17, 36, 42, 45, 46], "apt": 17, "unpack": 17, "keyword": [17, 42, 46], "gracefulli": 17, "captur": [17, 26], "support": [17, 28, 30, 45, 46], "_differenc": 17, "_avg": 17, "_median": 17, "_sum": 17, "_max": 17, "_min": 17, "_stddev": 17, "_varianc": 17, "_lead": 17, "_lag": 17, "_cumulative_distribut": 17, "_row_numb": 17, "_rank": 17, "_dense_rank": 17, "_percent_rank": 17, "roll": 17, "detail": [17, 40, 46], "addit": [17, 32, 36], "window_dict": 17, "window_spec": 17, "partition_col": 17, "dept": [17, 32], "order_col": 17, "asc": 17, "window_s": [17, 32], "window_op": 17, "weekly_sal": [17, 32], "weekly_sales_avg": 17, "w_obj": 17, "sales_df": [17, 32], "sales_df_upd": 17, "uri": 18, "mlrun": 18, "usr": 18, "pwd": 18, "ai": 18, "wrapper": [18, 26, 32, 46], "stage": [18, 45], "recurs": [18, 36, 41], "run_id": 18, "experi": [18, 36], "repo_path": 18, "descript": 18, "local_path": 18, "artifact_path": 18, "local_dir": 18, "feature_view": [18, 46], "file_nam": 18, "figur": 18, "artifact_fil": 18, "metric": [18, 26, 32], "tag": 18, "h2o_dl": [19, 20], "h2o_drf": [19, 20], "h2o_gam": [19, 20], "h2o_gbm": [19, 20], "h2o_glm": [19, 20], "h2o_rf": [19, 20], "h2o_xgb": [19, 20], "h2o_kmean": [19, 20], "h2o_dl_regressor": [19, 20], "h2o_drf_regressor": [19, 20], "h2o_gam_regressor": [19, 20], "h2o_gbm_regressor": [19, 20], "h2o_glm_regressor": [19, 20], "h2o_rulefit_regressor": [19, 20], "h2o_xgb_regressor": [19, 20], "unsupervis": [19, 20], "h2o_isolation_forest": [19, 20], "h2o_pca": [19, 20], "arima": [19, 25, 32], "garch": [19, 25, 32], "neuroprophet": [19, 25], "prophet": [19, 25, 32], "spark_dt": [19, 27], "spark_fmc": [19, 27], "spark_gbt": [19, 27], "spark_lr": [19, 27], "spark_mlp": [19, 27], "spark_nb": [19, 27], "spark_ovr": [19, 27], "spark_rf": [19, 27], "spark_svc": [19, 27], "spark_hvt": [19, 27], "spark_kmean": [19, 27], "recommend": [19, 27], "spark_al": [19, 27], "spark_aft_survival_regress": [19, 27], "spark_dt_regress": [19, 27], "spark_fm_regress": [19, 27], "spark_gbt_regress": [19, 27], "spark_gl_regress": [19, 27], "spark_isotonic_regress": [19, 27], "spark_linear_regress": [19, 27], "spark_rf_regress": [19, 27], "spark_t": [19, 27], "xgb_t": [19, 27], "h2odlclassifi": [20, 21], "h2odrfclassifi": [20, 21], "h2ogamclassifi": [20, 21], "h2ogbmclassifi": [20, 21], "h2oglmclassifi": [20, 21], "h2oxgbclassifi": [20, 21], "h2okmeansclust": [20, 22], "h2odlregressor": [20, 23], "h2odrfregressor": [20, 23], "h2ogamregressor": [20, 23], "optimise_model": [20, 23, 24], "h2ogbmregressor": [20, 23], "h2oglmregressor": [20, 23], "h2oxgbregressor": [20, 23], "h2oisolationforestmax": [20, 24], "id_col": [21, 22, 23, 24, 28, 31], "target_col": [21, 22, 23, 24, 26, 28, 31, 32], "param_grid": [21, 22, 23, 24, 26, 28, 30, 31, 32], "h2oclassifierbasemodel": 21, "h2ounsupervisedbasemodel": [22, 24], "h2oregressorbasemodel": 23, "optimis": [23, 24], "grid": [23, 24, 26, 28], "training_framework": [25, 26, 33, 45], "predict": [25, 26, 27, 28, 29, 31, 32, 33, 38, 39, 43, 46], "get_model_diagnost": [25, 26, 27, 32], "get_param": [25, 26, 27, 32, 33, 45], "nprophet": [25, 26, 32], "get_event_df": [25, 26], "fbprophet": [25, 26], "get_holiday_df": [25, 26], "time_col": [26, 32], "val_period": 26, "mean_squared_error": [26, 32], "exog_col": 26, "basemodel": [26, 32, 41, 43], "act": [26, 28], "basic": 26, "interfac": 26, "attribut": 26, "forecast": 26, "hyperparamet": [26, 28], "Not": 26, "period": [26, 32, 46], "dure": 26, "tune": [26, 28, 30, 32], "phase": 26, "sklearn": 26, "g": [26, 33, 46], "rmse": [26, 30], "add": 26, "exogen": 26, "variabl": [26, 40], "estim": [26, 32, 45], "after": [26, 32, 46], "ha": [26, 32, 39, 46], "been": [26, 32, 39], "freq": [26, 32], "step": 26, "made": 26, "frequenc": [26, 32], "daili": 26, "d": [26, 31], "monthli": 26, "m": [26, 35], "being": 26, "forecast_df": 26, "auto": [26, 28, 29], "event": [26, 46], "future_regressor": 26, "lag_regressor": 26, "custom_season": 26, "neuralprophet": [26, 32], "http": [26, 28, 31], "com": 26, "For": [26, 29, 32], "complet": 26, "extern": 26, "have": [26, 36], "known": 26, "futur": 26, "regressor": [26, 38], "net": 26, "enabl": 26, "custom": 26, "season": 26, "holidai": 26, "holiday_countri": 26, "extra_regressor": 26, "facebook": 26, "github": 26, "io": 26, "doc": [26, 28, 31], "_holiday_effect": 26, "_and_regressor": 26, "countri": 26, "extra": [26, 42], "sparkdecisiontreeclassifi": [27, 28], "sparkfmclassifi": [27, 28], "sparklogisticregress": [27, 28], "sparkmultilayerperceptronclassifi": [27, 28], "sparknaivebay": [27, 28], "sparkonevsrest": [27, 28], "best_param": [27, 28], "sparklinearsvc": [27, 28], "hvt": [27, 29], "depth_clustering_check": [27, 29], "kmeans_fit": [27, 29], "kmeans_predict": [27, 29], "l_clustering_fit": [27, 29], "l_clustering_predict": [27, 29], "lhier_clustering_fit": [27, 29], "sparkkmeansclust": [27, 29], "optimise_k": [27, 29], "sparkalsrecommend": [27, 30], "optimise_model_without_cross_valid": [27, 30], "sparkaftsurvivalregressor": [27, 31], "sparkdtregressor": [27, 31], "sparkfmregressor": [27, 31], "sparkglregressor": [27, 31], "sparkisotonicregressor": [27, 31], "sparklinearregressor": [27, 31], "sparktsforecast": [27, 32], "dataprep": [27, 32], "increment_datetim": [27, 32], "infer_frequ": [27, 32], "prepare_data": [27, 32], "xgbforecast": [27, 32], "sparkclassifierbasemodel": 28, "decis": [28, 31], "tree": [28, 31], "classifi": [28, 38, 39], "give": [28, 31], "describ": [28, 31], "here": [28, 31, 38], "apach": [28, 31], "org": [28, 31], "latest": [28, 31], "decisiontreeclassifi": 28, "mention": [28, 31, 46], "over": [28, 31], "dt": [28, 31], "surviv": 28, "impur": 28, "gini": 28, "entropi": 28, "maxdepth": 28, "pred": [28, 31], "show": [28, 31, 36, 42, 46], "rawpredict": 28, "probabl": [28, 38, 39], "39": 28, "26": [28, 31], "21": 28, "28": [28, 31], "197": 28, "31": [28, 31], "24": [28, 31, 32], "86403508771929": 28, "53333333333333": 28, "factor": 28, "machin": 28, "learn": 28, "algorithm": 28, "fmclassifi": 28, "fmc": 28, "33457026278096": 28, "94935179013616": 28, "85640816425286": 28, "85772827992116": 28, "93518095165010": 28, "86974472614122": 28, "84720121826394": 28, "84754268646046": 28, "gbt": [28, 31], "gradient": [28, 31], "boost": [28, 31], "vectoris": [28, 31], "gbtclassifi": 28, "difffer": 28, "kind": 28, "famili": 28, "logist": 28, "logisticregress": 28, "lr": 28, "regparam": 28, "maxit": [28, 31], "train_rf": 28, "lr_pred": 28, "test_rf": 28, "trainer": 28, "multilay": 28, "perceptron": 28, "multilayerperceptronclassifi": 28, "rubric": 28, "mlp": 28, "train_mlp": 28, "mlp_pred": 28, "test_mlp": 28, "multilayerperceptronclassificationmodel": 28, "naiv": 28, "bay": 28, "naivebay": 28, "nb": 28, "spark_nbb": 28, "train_nb": 28, "nb_pred": 28, "test_nb": 28, "20": 28, "9406697808162": 28, "2398604023384": 28, "40831384051017": 28, "4519116562601": 28, "7277582849546": 28, "89703348904081": 28, "86199302011692": 28, "47041569202550": 28, "82259558281300": 28, "53638791424773": 28, "reduct": 28, "multiclass": [28, 39], "against": 28, "strategi": 28, "maxaibas": 28, "spark_classifi": 28, "onevsrest": 28, "declar": 28, "would": 28, "speci": 28, "ovr": 28, "train_vecovr": 28, "prd_ovr": 28, "test_vecovr": 28, "51": 28, "235730144288": 28, "35": 28, "771347249773": 28, "29": 28, "856819249743": 28, "30": [28, 31, 46], "8709864367496": 28, "27": [28, 31], "387459642795": 28, "find": [28, 46], "best": [28, 30, 31], "forest": [28, 31], "randomforestclassifi": 28, "rf": [28, 31], "rf_pred": 28, "svc": 28, "svc_pred": 28, "df_pca": 29, "customer_column": 29, "hierarchy_columnlist": 29, "overlay_column": 29, "minimum_cluster_s": 29, "segment_nam": 29, "model_path": 29, "k": 29, "depth": 29, "kmean": 29, "error_threshold": 29, "02": [29, 32], "hierarch": 29, "voronoi": 29, "tessel": 29, "construct": 29, "main": [29, 36], "repres": 29, "2d": 29, "coordin": 29, "plot": 29, "centroid": 29, "subsequ": 29, "get": [29, 32, 33, 36, 42, 43, 45, 46], "point": 29, "within": 29, "parent": 29, "tile": 29, "line": 29, "chop": 29, "place": [29, 36], "so": 29, "thei": 29, "do": [29, 46], "protrud": 29, "outsid": 29, "polygon": 29, "done": [29, 46], "c_level": 29, "c_cluster_par": 29, "c_cluster": 29, "df_kmean": 29, "specifi": [29, 46], "detect": [29, 39], "df_cust": 29, "cluster_par": 29, "df_paramet": 29, "sparkclusteringbasemodel": 29, "where": [29, 30, 36, 45, 46], "user_col": 30, "item_col": 30, "rating_col": 30, "evaluator_metr": 30, "sparkrecommenderbasemodel": 30, "onnx": [30, 31], "censorcol": 31, "sparkregressorbasemodel": 31, "fm": 31, "fmregressionmodel": 31, "highlight": 31, "aftsurvivalreg": 31, "medv": 31, "train_aft": 31, "pred_aftreg": 31, "test_aft": 31, "censor": 31, "04417": 31, "70": 31, "03537": 31, "34": 31, "09266": 31, "09": 31, "05515": 31, "33": 31, "22": 31, "36": 31, "635527461813897": 31, "03455354521534": 31, "708353457826586": 31, "04563344447913": 31, "38": 31, "12525657243664": 31, "decisiontreeregressor": 31, "32": 31, "026086956521745": 31, "25": 31, "149999999999995": 31, "600000000000005": 31, "fmreg": 31, "pred_fmreg": 31, "40499": 31, "54522968596": 31, "8732": 31, "454532015487": 31, "3825": 31, "8655364832666": 31, "5658": 31, "445061672479": 31, "22837": 31, "07767793254": 31, "gbtregressionmodel": 31, "pred_gbt": 31, "846373877566844": 31, "034746106946816": 31, "456822769467188": 31, "40380891308272": 31, "23621896235877": 31, "gbt_reg": 31, "s3a": 31, "dataset": [31, 34, 39, 48], "pai": 31, "onboard": 31, "regression_model_test": 31, "linear": 31, "generalizedlinearregress": 31, "glinreg": 31, "pred_glinreg": 31, "isoton": 31, "isotonicregress": 31, "isoreg": 31, "pred_isoreg": 31, "48963210702341": 31, "linearregress": 31, "linreg": 31, "pred_linreg": 31, "randomforestregressionmodel": 31, "168843024672547": 31, "03174578178511": 31, "23": 31, "73252647489749": 31, "70366392976648": 31, "93450571558931": 31, "rfr": 31, "grp_by_col": 32, "worker": 32, "distribut": [32, 46], "instanc": [32, 36], "see": 32, "definit": 32, "yearly_season": 32, "seasonality_mod": 32, "learning_r": 32, "01": 32, "03": 32, "05": 32, "w": 32, "resultant_df": 32, "interv": 32, "date_col": 32, "pdf": 32, "n_forecast": 32, "num_round": 32, "convert_timeformat": [33, 34], "determine_outlier_thersholds_std": [33, 34], "determine_outlier_thresholds_iqr": [33, 34], "drop_dupl": [33, 34], "impute_nul": [33, 34], "outlier_detect": [33, 34], "read_config": [33, 34], "remove_outli": [33, 34], "column_renam": [33, 35], "create_featur": [33, 35], "parse_argu": [33, 35], "prepare_agg_argu": [33, 35], "todatetyp": [33, 35], "test_dataframe_analysis_spark": [33, 36], "analysisbas": [33, 36], "compare_report": [33, 36], "generate_data_health_report": [33, 36], "get_column_typ": [33, 36], "save_analysis_report": [33, 36], "validate_report": [33, 36], "sparkdataframeanalys": [33, 36], "default_behaviour": [33, 36], "default_threshold": [33, 36], "votingclassifi": [33, 38], "votingregressor": [33, 38], "classifierevalu": [33, 39], "get_evaluation_report": [33, 39], "deepcheckmodelwrapp": [33, 39], "feature_importances_": [33, 39], "predict_proba": [33, 39], "modelevalu": [33, 39], "regressorevalu": [33, 39], "general_regression_report_spark": [33, 39], "datasourcenotdefinederror": [33, 40], "featuretransformexcept": [33, 40], "maxaiexcept": [33, 40], "geterrormessag": [33, 40], "missingenvironmentvari": [33, 40], "modelloadexcept": [33, 40], "modelnotimpl": [33, 40], "modelsaveexcept": [33, 40], "modeltrainexcept": [33, 40], "modeltypenotdefinedexcept": [33, 40], "portinformationnotfounderror": [33, 40], "unknownoperationmod": [33, 40], "modelfactori": [33, 41], "get_model": [33, 41], "import_submodul": [33, 41], "customadapt": [33, 42], "get_file_handl": [33, 42], "get_logg": [33, 42], "get_stream_handl": [33, 42], "modelapprov": [33, 43], "is_above_threshold": [33, 43], "sparktransformerfactori": [33, 45], "get_transform": [33, 45], "register_transform": [33, 45], "sparkpipelin": [33, 45], "build_multipl": [33, 45], "fit_multipl": [33, 45], "test_data_connector": [33, 46], "test_multi_train": [33, 46], "test_spark_distributor": [33, 46], "test_train_test_split": [33, 46], "write_file_to_s3": [33, 46], "adl": [33, 46], "azur": [33, 46], "cassandra": [33, 46], "feast": [33, 46], "iceberg": [33, 46], "get_data_for_a_port": [33, 46], "maxaidatafram": [33, 46], "decrypt": [33, 46], "decrypt_column": [33, 46], "encrypt_column": [33, 46], "get_run_id_timestamp": [33, 46], "overwrite_dict": [33, 46], "multitrain": [33, 46], "train_model": [33, 46], "trained_model": [33, 46], "aggregate_transactional_data": [33, 46], "sparkdistributor": [33, 46], "pandas_to_spark_wrapp": [33, 46], "traintestsplit": [33, 46], "random_split": [33, 46], "stratified_split": [33, 46], "time_series_split": [33, 46], "timeformat": 34, "utc": 34, "approach": 34, "timestamp": [34, 46], "drop": 34, "duplic": 34, "row": 34, "null": [34, 35], "we": [34, 38], "percentag": 34, "skew": 34, "featu": 34, "imput": 34, "symmetr": 34, "asymmetr": 34, "free": 34, "iqr": 34, "outlier": [34, 36], "cap": 34, "standard": 34, "deviat": [34, 36], "dframe": 35, "arg": [35, 42, 46], "groupbycol": 35, "pars": 35, "perpar": 35, "signal": 35, "json": [35, 36], "inform": [35, 42, 46], "singnal": 35, "arguments_without_ev": 35, "arguments_with_ev": 35, "agg_col": [35, 46], "mkt_channel_nam": 35, "event_col": 35, "time_period": [35, 46], "transact": [35, 46], "offer_id": 35, "time_column": 35, "time_differ": 35, "event_column": [35, 46], "data_typ": 35, "updated_nam": 35, "i_count_distinct_offer_id_7_dai": 35, "last_7_transact": 35, "i_count_distinct_offer_id_last_7_transact": 35, "i_count_distinct_offer_id_14_dai": 35, "last_14_transact": 35, "i_count_distinct_offer_id_last_14_transact": 35, "i_count_mkt_channel_name_7_dai": 35, "i_count_mkt_channel_name_last_7_transact": 35, "yyyi": 35, "dd": 35, "datetyp": 35, "sample_feast_dataframe_for_analysi": [36, 37], "test_binary_classification_report_spark": [36, 37], "analysi": 36, "text": 36, "categor": [36, 39], "updat": 36, "per": [36, 42], "imag": 36, "nn": 36, "everi": 36, "correct": 36, "form": 36, "comparison": 36, "compar": [36, 39], "old_report": 36, "new_report": 36, "same": [36, 45, 46], "scope": 36, "criteria": 36, "dedic": 36, "keep": 36, "copi": 36, "identifi": 36, "destination_path": 36, "in_scope_column": 36, "summary_onli": 36, "save_report": 36, "column_typ": 36, "threshold": [36, 38, 43], "behaviour": 36, "analys": 36, "singl": 36, "intend": 36, "red": 36, "flag": 36, "": 36, "threshold_chang": 36, "increas": [36, 46], "decreas": 36, "certain": 36, "warn": 36, "chang": 36, "observ": 36, "ad": [36, 45], "intern": [36, 41], "insid": 36, "bi_vari": 36, "uni_vari": 36, "unique_categori": 36, "numerical_summari": 36, "null_percentag": 36, "kurtosis_scor": 36, "skewness_scor": 36, "id_column_check": 36, "categories_distribut": 36, "balanced_bool": 36, "correlation_scor": 36, "column_count": 36, "50": 36, "record_count": 36, "300000": 36, "boolean_bal": 36, "outlier_percentag": 36, "unique_categories_count": 36, "last": 36, "minut": 36, "infer": [36, 46], "field": 36, "hard": 38, "weight": 38, "testdata": 38, "soft": 38, "note": 38, "cummul": 38, "fun": 38, "consist": 38, "three": [38, 46], "vote": 38, "across": 38, "combin": 38, "user": [38, 46], "doesn": 38, "enter": 38, "uniform": 38, "predicted_actual_pdf": [39, 43], "predicted_col": 39, "probability_col": 39, "classification_mod": 39, "baseevalu": 39, "separ": 39, "implement": [39, 40], "arr": 39, "ndarrai": 39, "train_data": 39, "test_data": 39, "sparkbasemodel": 39, "cat_featur": 39, "current": 39, "model_evaluation_result": 39, "drift": 39, "els": [39, 43], "train_test_valid": 39, "model_v": 39, "train_test_v": 39, "messag": [40, 42], "particular": [40, 46], "export": 40, "tansform": 40, "an": [40, 45], "environ": 40, "miss": 40, "tain": 40, "found": 40, "send_class": 41, "regist": [41, 45], "registri": [41, 45], "executor": 41, "itself": [41, 42], "includ": 41, "actual": [41, 43], "rtype": 41, "moduletyp": 41, "loggeradapt": 42, "__name__": 42, "debug": 42, "f": 42, "msg": [42, 46], "insert": 42, "contextu": 42, "either": 42, "manipul": 42, "modifi": 42, "suit": 42, "need": [42, 46], "normal": 42, "ll": 42, "overrid": 42, "subclass": 42, "specif": 42, "filenam": 42, "run_detail": 42, "handler": 42, "stream": 42, "termin": 42, "evaluator_class": 43, "metric_threshold": 43, "v": 43, "kpi": 43, "minimum": 43, "pair": 43, "good": 43, "enough": 43, "about": 43, "consit": 45, "order": 45, "testdataconnector": [46, 47], "load_sample_data": [46, 47], "setup_class": [46, 47], "teardown_class": [46, 47], "test_read_encrypytion_pandas_csv": [46, 47], "test_read_encrypytion_spark_parquet": [46, 47], "test_read_without_encrypt": [46, 47], "test_write_encrypytion_pandas_csv": [46, 47], "test_write_encrypytion_spark_parquet": [46, 47], "test_write_without_encrypt": [46, 47], "testmultitrain": [46, 47], "test_predict": [46, 47], "test_train_model": [46, 47], "test_trained_model": [46, 47], "testsparkdistributor": [46, 47], "get_funct": [46, 47], "test_function_1_test1": [46, 47], "test_function_1_test2": [46, 47], "testtraintestsplit": [46, 47], "test_random_split": [46, 47], "test_stratify_split": [46, 47], "spark_conn": 46, "input_data": 46, "port_numb": 46, "entir": 46, "configur": 46, "fetch": 46, "connection_typ": 46, "help": 46, "output_data": 46, "written": 46, "out": 46, "boolean": 46, "statu": 46, "entity_path": 46, "cipher": 46, "df_type": 46, "mykei": 46, "prefix": 46, "f_": 46, "uniqu": 46, "d1": 46, "d2": 46, "parallel": 46, "predcit": 46, "givem": 46, "cross": 46, "section": 46, "pre": 46, "groupbi": 46, "befor": 46, "item": 46, "preprocessed_df": 46, "product": 46, "revenu": 46, "60": 46, "appropri": 46, "python_funct": 46, "sample_s": 46, "output_schema": 46, "group_kei": 46, "mainli": 46, "take": 46, "record": 46, "directli": 46, "schema": 46, "final": 46, "abl": 46, "tri": 46, "groubi": 46, "partit": 46, "repartit": 46, "spark_wrapp": 46, "result": 46, "train_siz": 46, "random_st": 46, "stratifi": 46, "seed": 46, "123": 46, "happend": 46, "ratio": 46, "reproduc": 46, "fraction": 46, "frac": 46, "join_on": 46, "mock_gbt": 47, "mock_rf": 47, "function_nam": 47, "maxaidatahandl": 48, "data_evalu": 48, "datafactori": 48}, "objects": {"": [[11, 0, 0, "-", "maxaidatahandling"], [12, 0, 0, "-", "maxaifeaturization"], [18, 0, 0, "-", "maxaimetadata"], [19, 0, 0, "-", "maxaimodel"], [33, 0, 0, "-", "maxairesources"]], "maxaidatahandling": [[11, 0, 0, "-", "data_evaluator"], [11, 0, 0, "-", "datafactory"], [11, 0, 0, "-", "dataset"]], "maxaidatahandling.data_evaluator": [[11, 1, 1, "", "DataEvaluator"]], "maxaidatahandling.data_evaluator.DataEvaluator": [[11, 2, 1, "", "evaluate"]], "maxaidatahandling.datafactory": [[11, 1, 1, "", "MAXDataFactory"]], "maxaidatahandling.datafactory.MAXDataFactory": [[11, 2, 1, "", "get_all_datasets"], [11, 2, 1, "", "get_dataset"], [11, 2, 1, "", "prepare_datasets"], [11, 2, 1, "", "store_datasets"]], "maxaidatahandling.dataset": [[11, 1, 1, "", "MaxDataset"], [11, 3, 1, "", "get_key_value"]], "maxaidatahandling.dataset.MaxDataset": [[11, 2, 1, "", "prepare_dataset"], [11, 2, 1, "", "store_data"]], "maxaifeaturization": [[13, 0, 0, "-", "aggregation"], [14, 0, 0, "-", "featuretools"], [15, 0, 0, "-", "selection"], [16, 0, 0, "-", "timeseries"], [17, 0, 0, "-", "transformation"]], "maxaifeaturization.aggregation": [[13, 0, 0, "-", "aggregation"]], "maxaifeaturization.aggregation.aggregation": [[13, 1, 1, "", "Aggregation"], [13, 1, 1, "", "Constants"]], "maxaifeaturization.aggregation.aggregation.Aggregation": [[13, 2, 1, "", "execute"]], "maxaifeaturization.aggregation.aggregation.Constants": [[13, 4, 1, "", "operation_dict"]], "maxaifeaturization.featuretools": [[14, 0, 0, "-", "featuretools"]], "maxaifeaturization.featuretools.featuretools": [[14, 1, 1, "", "FeatureToolFeatures"]], "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures": [[14, 2, 1, "", "execute"]], "maxaifeaturization.selection": [[15, 0, 0, "-", "model_based_selector"], [15, 0, 0, "-", "selector"]], "maxaifeaturization.selection.model_based_selector": [[15, 1, 1, "", "ModelBasedSelector"], [15, 1, 1, "", "ModelBasedSelectorModel"]], "maxaifeaturization.selection.model_based_selector.ModelBasedSelector": [[15, 2, 1, "", "extract_feature_details"], [15, 2, 1, "", "fit"], [15, 5, 1, "", "model"]], "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel": [[15, 5, 1, "", "feature_imp"], [15, 2, 1, "", "load"], [15, 2, 1, "", "overwrite"], [15, 2, 1, "", "save"], [15, 2, 1, "", "transform"], [15, 2, 1, "", "write"]], "maxaifeaturization.selection.selector": [[15, 1, 1, "", "Constants"], [15, 1, 1, "", "FeatureSelector"], [15, 3, 1, "", "UnivariateFeatureSelectorN"]], "maxaifeaturization.selection.selector.Constants": [[15, 4, 1, "", "selectors"]], "maxaifeaturization.selection.selector.FeatureSelector": [[15, 2, 1, "", "load"], [15, 2, 1, "", "save"], [15, 2, 1, "", "select_features"], [15, 5, 1, "", "selector"]], "maxaifeaturization.timeseries": [[16, 0, 0, "-", "univariate"]], "maxaifeaturization.timeseries.univariate": [[16, 1, 1, "", "Decompose"], [16, 1, 1, "", "StationarityTest"], [16, 3, 1, "", "autocorrelation"], [16, 3, 1, "", "check_stationarity"], [16, 3, 1, "", "time_series_decomposition"]], "maxaifeaturization.timeseries.univariate.Decompose": [[16, 2, 1, "", "loess"], [16, 2, 1, "", "moving_average"]], "maxaifeaturization.timeseries.univariate.StationarityTest": [[16, 2, 1, "", "adf"], [16, 2, 1, "", "kpss"]], "maxaifeaturization.transformation": [[17, 0, 0, "-", "transform"], [17, 0, 0, "-", "window"]], "maxaifeaturization.transformation.transform": [[17, 1, 1, "", "Constants"], [17, 1, 1, "", "DateTimeTransform"], [17, 1, 1, "", "Filter"], [17, 1, 1, "", "NumTransforms"], [17, 1, 1, "", "StrTransforms"], [17, 1, 1, "", "Transformation"], [17, 3, 1, "", "unpack_kwargs"]], "maxaifeaturization.transformation.transform.Constants": [[17, 4, 1, "", "operation_dict"]], "maxaifeaturization.transformation.transform.DateTimeTransform": [[17, 2, 1, "", "convert_to_iso8601"]], "maxaifeaturization.transformation.transform.Filter": [[17, 2, 1, "", "execute"]], "maxaifeaturization.transformation.transform.NumTransforms": [[17, 2, 1, "", "exp"], [17, 2, 1, "", "log"], [17, 2, 1, "", "reciprocal"], [17, 2, 1, "", "zscore"]], "maxaifeaturization.transformation.transform.StrTransforms": [[17, 2, 1, "", "alter_case"], [17, 2, 1, "", "concat_columns"], [17, 2, 1, "", "one_hot_encoder"], [17, 2, 1, "", "split_column"], [17, 2, 1, "", "string_indexer"], [17, 2, 1, "", "trim_whitespaces"]], "maxaifeaturization.transformation.transform.Transformation": [[17, 2, 1, "", "decode_transformation"], [17, 2, 1, "", "execute"]], "maxaifeaturization.transformation.window": [[17, 1, 1, "", "Constants"], [17, 1, 1, "", "WindowOperations"]], "maxaifeaturization.transformation.window.Constants": [[17, 4, 1, "", "operation_dict"]], "maxaifeaturization.transformation.window.WindowOperations": [[17, 2, 1, "", "execute"]], "maxaimetadata": [[18, 0, 0, "-", "maxflow"], [18, 0, 0, "-", "test_maxflow"]], "maxaimetadata.maxflow": [[18, 1, 1, "", "MaxFlow"], [18, 1, 1, "", "MaxRun"]], "maxaimetadata.maxflow.MaxFlow": [[18, 2, 1, "", "auto_log"], [18, 2, 1, "", "get_active_flow"], [18, 2, 1, "", "get_active_run"], [18, 2, 1, "", "get_registered_model"], [18, 2, 1, "", "register_model"], [18, 2, 1, "", "set_experiment"], [18, 2, 1, "", "start_run"], [18, 2, 1, "", "stop"]], "maxaimetadata.maxflow.MaxRun": [[18, 2, 1, "", "end_run"], [18, 2, 1, "", "log_artifact"], [18, 2, 1, "", "log_artifacts"], [18, 2, 1, "", "log_data"], [18, 2, 1, "", "log_dict"], [18, 2, 1, "", "log_figure"], [18, 2, 1, "", "log_metric"], [18, 2, 1, "", "log_metrics"], [18, 2, 1, "", "log_model"], [18, 2, 1, "", "log_param"], [18, 2, 1, "", "log_params"], [18, 2, 1, "", "set_active"], [18, 2, 1, "", "set_tag"], [18, 2, 1, "", "set_tags"], [18, 2, 1, "", "start_child_run"]], "maxaimetadata.test_maxflow": [[18, 3, 1, "", "test_maxflow"]], "maxaimodel": [[20, 0, 0, "-", "H2O"], [25, 0, 0, "-", "python"], [27, 0, 0, "-", "spark"]], "maxaimodel.H2O": [[21, 0, 0, "-", "classification"], [22, 0, 0, "-", "clustering"], [23, 0, 0, "-", "regression"], [24, 0, 0, "-", "unsupervised"]], "maxaimodel.H2O.classification": [[21, 0, 0, "-", "h2o_dl"], [21, 0, 0, "-", "h2o_drf"], [21, 0, 0, "-", "h2o_gam"], [21, 0, 0, "-", "h2o_gbm"], [21, 0, 0, "-", "h2o_glm"], [21, 0, 0, "-", "h2o_xgb"]], "maxaimodel.H2O.classification.h2o_dl": [[21, 1, 1, "", "H2ODLClassifier"]], "maxaimodel.H2O.classification.h2o_dl.H2ODLClassifier": [[21, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_drf": [[21, 1, 1, "", "H2ODRFClassifier"]], "maxaimodel.H2O.classification.h2o_drf.H2ODRFClassifier": [[21, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_gam": [[21, 1, 1, "", "H2OGAMClassifier"]], "maxaimodel.H2O.classification.h2o_gam.H2OGAMClassifier": [[21, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_gbm": [[21, 1, 1, "", "H2OGBMClassifier"]], "maxaimodel.H2O.classification.h2o_gbm.H2OGBMClassifier": [[21, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_glm": [[21, 1, 1, "", "H2OGLMClassifier"]], "maxaimodel.H2O.classification.h2o_glm.H2OGLMClassifier": [[21, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_xgb": [[21, 1, 1, "", "H2OXGBClassifier"]], "maxaimodel.H2O.classification.h2o_xgb.H2OXGBClassifier": [[21, 2, 1, "", "build"]], "maxaimodel.H2O.clustering": [[22, 0, 0, "-", "h2o_kmeans"]], "maxaimodel.H2O.clustering.h2o_kmeans": [[22, 1, 1, "", "H2OKmeansClustering"]], "maxaimodel.H2O.clustering.h2o_kmeans.H2OKmeansClustering": [[22, 2, 1, "", "build"]], "maxaimodel.H2O.regression": [[23, 0, 0, "-", "h2o_dl_regressor"], [23, 0, 0, "-", "h2o_drf_regressor"], [23, 0, 0, "-", "h2o_gam_regressor"], [23, 0, 0, "-", "h2o_gbm_regressor"], [23, 0, 0, "-", "h2o_glm_regressor"], [23, 0, 0, "-", "h2o_xgb_regressor"]], "maxaimodel.H2O.regression.h2o_dl_regressor": [[23, 1, 1, "", "H2ODLRegressor"]], "maxaimodel.H2O.regression.h2o_dl_regressor.H2ODLRegressor": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_drf_regressor": [[23, 1, 1, "", "H2ODRFRegressor"]], "maxaimodel.H2O.regression.h2o_drf_regressor.H2ODRFRegressor": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_gam_regressor": [[23, 1, 1, "", "H2OGAMRegressor"]], "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor": [[23, 2, 1, "", "build"], [23, 2, 1, "", "optimise_model"]], "maxaimodel.H2O.regression.h2o_gbm_regressor": [[23, 1, 1, "", "H2OGBMRegressor"]], "maxaimodel.H2O.regression.h2o_gbm_regressor.H2OGBMRegressor": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_glm_regressor": [[23, 1, 1, "", "H2OGLMRegressor"]], "maxaimodel.H2O.regression.h2o_glm_regressor.H2OGLMRegressor": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_xgb_regressor": [[23, 1, 1, "", "H2OXGBRegressor"]], "maxaimodel.H2O.regression.h2o_xgb_regressor.H2OXGBRegressor": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.unsupervised": [[24, 0, 0, "-", "h2o_isolation_forest"]], "maxaimodel.H2O.unsupervised.h2o_isolation_forest": [[24, 1, 1, "", "H2OIsolationForestMAX"]], "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX": [[24, 2, 1, "", "build"], [24, 2, 1, "", "optimise_model"]], "maxaimodel.python": [[26, 0, 0, "-", "timeseries"]], "maxaimodel.python.timeseries": [[26, 0, 0, "-", "arima"], [26, 0, 0, "-", "garch"], [26, 0, 0, "-", "neuroprophet"], [26, 0, 0, "-", "prophet"]], "maxaimodel.python.timeseries.arima": [[26, 1, 1, "", "Arima"]], "maxaimodel.python.timeseries.arima.Arima": [[26, 2, 1, "", "build"], [26, 2, 1, "id0", "fit"], [26, 2, 1, "", "get_model_diagnostics"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "load"], [26, 2, 1, "id1", "predict"], [26, 2, 1, "", "save"], [26, 4, 1, "id2", "training_framework"]], "maxaimodel.python.timeseries.garch": [[26, 1, 1, "", "Garch"]], "maxaimodel.python.timeseries.garch.Garch": [[26, 2, 1, "", "build"], [26, 2, 1, "id3", "fit"], [26, 2, 1, "", "get_model_diagnostics"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "load"], [26, 2, 1, "id4", "predict"], [26, 2, 1, "", "save"], [26, 4, 1, "id5", "training_framework"]], "maxaimodel.python.timeseries.neuroprophet": [[26, 1, 1, "", "NProphet"]], "maxaimodel.python.timeseries.neuroprophet.NProphet": [[26, 2, 1, "", "build"], [26, 2, 1, "id6", "fit"], [26, 2, 1, "id7", "get_event_df"], [26, 2, 1, "", "get_model_diagnostics"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "load"], [26, 2, 1, "id8", "predict"], [26, 2, 1, "", "save"], [26, 4, 1, "id9", "training_framework"]], "maxaimodel.python.timeseries.prophet": [[26, 1, 1, "", "FBProphet"]], "maxaimodel.python.timeseries.prophet.FBProphet": [[26, 2, 1, "", "build"], [26, 2, 1, "id10", "fit"], [26, 2, 1, "", "get_event_df"], [26, 2, 1, "", "get_holiday_df"], [26, 2, 1, "", "get_model_diagnostics"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "load"], [26, 2, 1, "id11", "predict"], [26, 2, 1, "", "save"], [26, 4, 1, "id12", "training_framework"]], "maxaimodel.spark": [[28, 0, 0, "-", "classification"], [29, 0, 0, "-", "clustering"], [30, 0, 0, "-", "recommendation"], [31, 0, 0, "-", "regression"], [32, 0, 0, "-", "timeseries"]], "maxaimodel.spark.classification": [[28, 0, 0, "-", "spark_dt"], [28, 0, 0, "-", "spark_fmc"], [28, 0, 0, "-", "spark_gbt"], [28, 0, 0, "-", "spark_lr"], [28, 0, 0, "-", "spark_mlp"], [28, 0, 0, "-", "spark_nb"], [28, 0, 0, "-", "spark_ovr"], [28, 0, 0, "-", "spark_rf"], [28, 0, 0, "-", "spark_svc"]], "maxaimodel.spark.classification.spark_dt": [[28, 1, 1, "", "SparkDecisionTreeClassifier"]], "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_fmc": [[28, 1, 1, "", "SparkFMClassifier"]], "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_gbt": [[28, 1, 1, "", "SparkGBTClassifier"]], "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_lr": [[28, 1, 1, "", "SparkLogisticRegression"]], "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_mlp": [[28, 1, 1, "", "SparkMultilayerPerceptronClassifier"]], "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_nb": [[28, 1, 1, "", "SparkNaiveBayes"]], "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_ovr": [[28, 1, 1, "", "SparkOneVsRest"]], "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest": [[28, 2, 1, "", "best_params"], [28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_rf": [[28, 1, 1, "", "SparkRFClassifier"]], "maxaimodel.spark.classification.spark_rf.SparkRFClassifier": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_svc": [[28, 1, 1, "", "SparkLinearSVC"]], "maxaimodel.spark.classification.spark_svc.SparkLinearSVC": [[28, 2, 1, "", "build"], [28, 2, 1, "", "load"]], "maxaimodel.spark.clustering": [[29, 0, 0, "-", "spark_hvt"], [29, 0, 0, "-", "spark_kmeans"]], "maxaimodel.spark.clustering.spark_hvt": [[29, 1, 1, "", "HVT"]], "maxaimodel.spark.clustering.spark_hvt.HVT": [[29, 2, 1, "", "depth_clustering_check"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "kmeans_fit"], [29, 2, 1, "", "kmeans_predict"], [29, 2, 1, "", "l_clustering_fit"], [29, 2, 1, "", "l_clustering_predict"], [29, 2, 1, "", "lhier_clustering_fit"], [29, 2, 1, "", "predict"]], "maxaimodel.spark.clustering.spark_kmeans": [[29, 1, 1, "", "SparkKMeansClustering"]], "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering": [[29, 2, 1, "", "build"], [29, 2, 1, "", "load"], [29, 2, 1, "", "optimise_k"]], "maxaimodel.spark.recommendation": [[30, 0, 0, "-", "spark_als"]], "maxaimodel.spark.recommendation.spark_als": [[30, 1, 1, "", "SparkAlsRecommender"]], "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender": [[30, 2, 1, "", "build"], [30, 2, 1, "", "load"], [30, 2, 1, "", "optimise_model_without_cross_validator"], [30, 2, 1, "", "save"]], "maxaimodel.spark.regression": [[31, 0, 0, "-", "spark_aft_survival_regression"], [31, 0, 0, "-", "spark_dt_regression"], [31, 0, 0, "-", "spark_fm_regression"], [31, 0, 0, "-", "spark_gbt_regression"], [31, 0, 0, "-", "spark_gl_regression"], [31, 0, 0, "-", "spark_isotonic_regression"], [31, 0, 0, "-", "spark_linear_regression"], [31, 0, 0, "-", "spark_rf_regression"]], "maxaimodel.spark.regression.spark_aft_survival_regression": [[31, 1, 1, "", "SparkAFTSurvivalRegressor"]], "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_dt_regression": [[31, 1, 1, "", "SparkDTRegressor"]], "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_fm_regression": [[31, 1, 1, "", "SparkFMRegressor"]], "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_gbt_regression": [[31, 1, 1, "", "SparkGBTRegressor"]], "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_gl_regression": [[31, 1, 1, "", "SparkGLRegressor"]], "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_isotonic_regression": [[31, 1, 1, "", "SparkIsotonicRegressor"]], "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_linear_regression": [[31, 1, 1, "", "SparkLinearRegressor"]], "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_rf_regression": [[31, 1, 1, "", "SparkRFRegressor"]], "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor": [[31, 2, 1, "", "build"], [31, 2, 1, "", "load"]], "maxaimodel.spark.timeseries": [[32, 0, 0, "-", "spark_ts"], [32, 0, 0, "-", "xgb_ts"]], "maxaimodel.spark.timeseries.spark_ts": [[32, 1, 1, "", "SparkTSForecaster"]], "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster": [[32, 2, 1, "", "build"], [32, 2, 1, "id0", "fit"], [32, 2, 1, "", "get_model_diagnostics"], [32, 2, 1, "id7", "get_params"], [32, 2, 1, "", "load"], [32, 2, 1, "id8", "predict"], [32, 2, 1, "", "save"]], "maxaimodel.spark.timeseries.xgb_ts": [[32, 1, 1, "", "DataPrep"], [32, 1, 1, "", "XGBForecaster"]], "maxaimodel.spark.timeseries.xgb_ts.DataPrep": [[32, 2, 1, "", "increment_datetime"], [32, 2, 1, "", "infer_frequency"], [32, 2, 1, "", "prepare_data"]], "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster": [[32, 2, 1, "", "build"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "get_model_diagnostics"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "load"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "save"]], "maxairesources": [[34, 0, 0, "-", "cleaning"], [33, 0, 0, "-", "conftest"], [35, 0, 0, "-", "customer360"], [36, 0, 0, "-", "datachecks"], [38, 0, 0, "-", "ensemble"], [39, 0, 0, "-", "eval"], [40, 0, 0, "-", "exception"], [41, 0, 0, "-", "factory"], [42, 0, 0, "-", "logging"], [43, 0, 0, "-", "model_approval"], [44, 0, 0, "-", "optimizer"], [45, 0, 0, "-", "pipeline"], [46, 0, 0, "-", "utilities"]], "maxairesources.cleaning": [[34, 0, 0, "-", "NoiseRemoval"]], "maxairesources.cleaning.NoiseRemoval": [[34, 1, 1, "", "NoiseRemoval"]], "maxairesources.cleaning.NoiseRemoval.NoiseRemoval": [[34, 2, 1, "", "convert_timeformat"], [34, 2, 1, "", "determine_outlier_thersholds_std"], [34, 2, 1, "", "determine_outlier_thresholds_iqr"], [34, 2, 1, "", "drop_duplicates"], [34, 2, 1, "", "impute_null"], [34, 2, 1, "", "outlier_detect"], [34, 2, 1, "", "read_config"], [34, 2, 1, "", "remove_outlier"]], "maxairesources.conftest": [[33, 3, 1, "", "binary_classifier_transformed_result"], [33, 3, 1, "", "multiclass_classifier_transformed_result"], [33, 3, 1, "", "normal_regressor_transformed_result"], [33, 3, 1, "", "spark_session"]], "maxairesources.customer360": [[35, 0, 0, "-", "utility"]], "maxairesources.customer360.utility": [[35, 3, 1, "", "column_rename"], [35, 3, 1, "", "create_features"], [35, 3, 1, "", "parse_arguments"], [35, 3, 1, "", "prepare_agg_arguments"], [35, 3, 1, "", "toDateType"]], "maxairesources.datachecks": [[36, 0, 0, "-", "analysis_base"], [36, 0, 0, "-", "dataframe_analysis_spark"], [37, 0, 0, "-", "test"]], "maxairesources.datachecks.analysis_base": [[36, 1, 1, "", "AnalysisBase"]], "maxairesources.datachecks.analysis_base.AnalysisBase": [[36, 2, 1, "", "compare_reports"], [36, 2, 1, "", "generate_data_health_report"], [36, 2, 1, "", "get_column_types"], [36, 2, 1, "", "save_analysis_report"], [36, 2, 1, "", "validate_report"]], "maxairesources.datachecks.dataframe_analysis_spark": [[36, 1, 1, "", "SparkDataFrameAnalyser"]], "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser": [[36, 2, 1, "", "compare_reports"], [36, 4, 1, "", "default_behaviours"], [36, 4, 1, "", "default_thresholds"], [36, 2, 1, "", "generate_data_health_report"], [36, 2, 1, "", "validate_report"]], "maxairesources.datachecks.test": [[37, 0, 0, "-", "conftest"], [37, 0, 0, "-", "test_dataframe_analysis_spark"]], "maxairesources.datachecks.test.conftest": [[37, 3, 1, "", "sample_feast_dataframe_for_analysis"]], "maxairesources.datachecks.test.test_dataframe_analysis_spark": [[37, 3, 1, "", "test_binary_classification_report_spark"]], "maxairesources.ensemble": [[38, 0, 0, "-", "ensemble"]], "maxairesources.ensemble.ensemble": [[38, 1, 1, "", "Ensemble"]], "maxairesources.ensemble.ensemble.Ensemble": [[38, 2, 1, "", "VotingClassifier"], [38, 2, 1, "", "VotingRegressor"], [38, 2, 1, "", "predict"]], "maxairesources.eval": [[39, 0, 0, "-", "classifier_evaluator_spark"], [39, 0, 0, "-", "model_evaluator"], [39, 0, 0, "-", "regressor_evaluator_spark"]], "maxairesources.eval.classifier_evaluator_spark": [[39, 1, 1, "", "ClassifierEvaluator"]], "maxairesources.eval.classifier_evaluator_spark.ClassifierEvaluator": [[39, 2, 1, "", "get_evaluation_report"]], "maxairesources.eval.model_evaluator": [[39, 1, 1, "", "DeepCheckModelWrapper"], [39, 1, 1, "", "ModelEvaluator"]], "maxairesources.eval.model_evaluator.DeepCheckModelWrapper": [[39, 5, 1, "", "feature_importances_"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_proba"]], "maxairesources.eval.model_evaluator.ModelEvaluator": [[39, 2, 1, "", "evaluate"]], "maxairesources.eval.regressor_evaluator_spark": [[39, 1, 1, "", "RegressorEvaluator"]], "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator": [[39, 2, 1, "", "general_regression_report_spark"], [39, 2, 1, "", "get_evaluation_report"]], "maxairesources.exception": [[40, 0, 0, "-", "exceptions"]], "maxairesources.exception.exceptions": [[40, 6, 1, "", "DataSourceNotDefinedError"], [40, 6, 1, "", "FeatureTransformException"], [40, 6, 1, "", "MaxAIException"], [40, 6, 1, "", "MissingEnvironmentVariable"], [40, 6, 1, "", "ModelLoadException"], [40, 6, 1, "", "ModelNotImplemented"], [40, 6, 1, "", "ModelSaveException"], [40, 6, 1, "", "ModelTrainException"], [40, 6, 1, "", "ModelTypeNotDefinedException"], [40, 6, 1, "", "PortInformationNotFoundError"], [40, 6, 1, "", "UnknownOperationMode"]], "maxairesources.exception.exceptions.MaxAIException": [[40, 2, 1, "", "getErrorMessage"]], "maxairesources.factory": [[41, 3, 1, "", "import_submodules"], [41, 0, 0, "-", "model_factory"]], "maxairesources.factory.model_factory": [[41, 1, 1, "", "ModelFactory"]], "maxairesources.factory.model_factory.ModelFactory": [[41, 2, 1, "", "get_model"], [41, 2, 1, "", "register_model"]], "maxairesources.logging": [[42, 0, 0, "-", "logger"]], "maxairesources.logging.logger": [[42, 1, 1, "", "CustomAdapter"], [42, 3, 1, "", "get_file_handler"], [42, 3, 1, "", "get_logger"], [42, 3, 1, "", "get_stream_handler"]], "maxairesources.logging.logger.CustomAdapter": [[42, 2, 1, "", "process"]], "maxairesources.model_approval": [[43, 0, 0, "-", "model_approver_spark"]], "maxairesources.model_approval.model_approver_spark": [[43, 1, 1, "", "ModelApprover"]], "maxairesources.model_approval.model_approver_spark.ModelApprover": [[43, 2, 1, "", "is_above_threshold"]], "maxairesources.pipeline": [[45, 0, 0, "-", "pipeline_factory"], [45, 0, 0, "-", "spark_pipeline"]], "maxairesources.pipeline.pipeline_factory": [[45, 1, 1, "", "SparkTransformerFactory"]], "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory": [[45, 2, 1, "", "get_transformer"], [45, 2, 1, "", "register_transformer"]], "maxairesources.pipeline.spark_pipeline": [[45, 1, 1, "", "SparkPipeline"]], "maxairesources.pipeline.spark_pipeline.SparkPipeline": [[45, 2, 1, "", "build"], [45, 2, 1, "", "build_multiple"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_multiple"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "load"], [45, 2, 1, "", "save"], [45, 4, 1, "", "training_framework"], [45, 2, 1, "", "transform"]], "maxairesources.utilities": [[46, 0, 0, "-", "common_utils"], [46, 0, 0, "-", "data_connectors"], [46, 0, 0, "-", "encryption"], [46, 0, 0, "-", "misc"], [46, 0, 0, "-", "multi_train"], [46, 0, 0, "-", "preprocessing"], [46, 0, 0, "-", "spark_distributor"], [47, 0, 0, "-", "tests"], [46, 0, 0, "-", "train_test_split"]], "maxairesources.utilities.common_utils": [[46, 3, 1, "", "write_file_to_s3"]], "maxairesources.utilities.data_connectors": [[46, 1, 1, "", "DataFrame"], [46, 1, 1, "", "MaxAIDataFrame"]], "maxairesources.utilities.data_connectors.DataFrame": [[46, 4, 1, "", "ADLS"], [46, 4, 1, "", "AZURE"], [46, 4, 1, "", "CASSANDRA"], [46, 4, 1, "", "FEAST"], [46, 4, 1, "", "GS"], [46, 4, 1, "", "ICEBERG"], [46, 4, 1, "", "S3"], [46, 2, 1, "", "get"], [46, 2, 1, "", "get_data_for_a_port"], [46, 2, 1, "", "write"]], "maxairesources.utilities.encryption": [[46, 1, 1, "", "Encryption"]], "maxairesources.utilities.encryption.Encryption": [[46, 2, 1, "", "decrypt"], [46, 2, 1, "", "decrypt_columns"], [46, 2, 1, "", "encrypt"], [46, 2, 1, "", "encrypt_columns"]], "maxairesources.utilities.misc": [[46, 3, 1, "", "get_run_id_timestamp"], [46, 3, 1, "", "overwrite_dict"]], "maxairesources.utilities.multi_train": [[46, 1, 1, "", "MultiTrain"]], "maxairesources.utilities.multi_train.MultiTrain": [[46, 2, 1, "", "predict"], [46, 2, 1, "", "train_models"], [46, 5, 1, "", "trained_models"]], "maxairesources.utilities.preprocessing": [[46, 1, 1, "", "Preprocessing"]], "maxairesources.utilities.preprocessing.Preprocessing": [[46, 2, 1, "", "aggregate_transactional_data"]], "maxairesources.utilities.spark_distributor": [[46, 1, 1, "", "SparkDistributor"]], "maxairesources.utilities.spark_distributor.SparkDistributor": [[46, 2, 1, "", "pandas_to_spark_wrapper"]], "maxairesources.utilities.tests": [[47, 0, 0, "-", "test_data_connector"], [47, 0, 0, "-", "test_multi_train"], [47, 0, 0, "-", "test_spark_distributor"], [47, 0, 0, "-", "test_train_test_split"]], "maxairesources.utilities.tests.test_data_connector": [[47, 1, 1, "", "TestDataConnector"]], "maxairesources.utilities.tests.test_data_connector.TestDataConnector": [[47, 2, 1, "", "load_sample_data"], [47, 2, 1, "", "setup_class"], [47, 2, 1, "", "teardown_class"], [47, 2, 1, "", "test_read_encrypytion_pandas_csv"], [47, 2, 1, "", "test_read_encrypytion_spark_parquet"], [47, 2, 1, "", "test_read_without_encryption"], [47, 2, 1, "", "test_write_encrypytion_pandas_csv"], [47, 2, 1, "", "test_write_encrypytion_spark_parquet"], [47, 2, 1, "", "test_write_without_encryption"]], "maxairesources.utilities.tests.test_multi_train": [[47, 1, 1, "", "TestMultiTrain"]], "maxairesources.utilities.tests.test_multi_train.TestMultiTrain": [[47, 2, 1, "", "setup_class"], [47, 2, 1, "", "teardown_class"], [47, 2, 1, "", "test_predict"], [47, 2, 1, "", "test_train_models"], [47, 2, 1, "", "test_trained_models"]], "maxairesources.utilities.tests.test_spark_distributor": [[47, 1, 1, "", "TestSparkDistributor"]], "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor": [[47, 2, 1, "", "get_function"], [47, 2, 1, "", "load_sample_data"], [47, 2, 1, "", "setup_class"], [47, 2, 1, "", "teardown_class"], [47, 2, 1, "", "test_function_1_test1"], [47, 2, 1, "", "test_function_1_test2"]], "maxairesources.utilities.tests.test_train_test_split": [[47, 1, 1, "", "TestTrainTestSplit"]], "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit": [[47, 2, 1, "", "load_sample_data"], [47, 2, 1, "", "setup_class"], [47, 2, 1, "", "teardown_class"], [47, 2, 1, "", "test_random_split"], [47, 2, 1, "", "test_stratify_split"]], "maxairesources.utilities.train_test_split": [[46, 1, 1, "", "TrainTestSplit"]], "maxairesources.utilities.train_test_split.TrainTestSplit": [[46, 2, 1, "", "random_split"], [46, 2, 1, "", "stratified_split"], [46, 2, 1, "", "time_series_split"], [46, 2, 1, "", "train_test_split"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"exampl": [0, 8, 39], "welcom": [1, 9], "max": [1, 5, 9, 48], "ai": [1, 5, 9, 48], "": [1, 9], "document": [1, 9], "indic": [1, 9], "tabl": [1, 9], "maxaidatahandl": [2, 11], "packag": [2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "submodul": [2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "data_evalu": [2, 11], "modul": [2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "datafactori": [2, 11], "dataset": [2, 11], "content": [2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "maxaifeatur": [3, 4, 12, 13, 14, 15, 16, 17], "aggreg": [3, 13], "featuretool": [4, 14], "d": [5, 48], "core": [5, 48], "quickstart": [6, 49], "api": 7, "instal": 10, "guid": 10, "subpackag": [12, 19, 20, 21, 22, 24, 25, 27, 33, 36, 46], "select": 15, "model_based_selector": 15, "selector": 15, "timeseri": [16, 26, 32], "univari": 16, "transform": 17, "window": 17, "maxaimetadata": 18, "maxflow": 18, "test_maxflow": 18, "maxaimodel": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "h2o": [20, 21, 22, 23, 24], "classif": [21, 28], "h2o_dl": 21, "h2o_drf": 21, "h2o_gam": 21, "h2o_gbm": 21, "h2o_glm": 21, "h2o_rf": 21, "h2o_xgb": 21, "cluster": [22, 29], "h2o_kmean": 22, "regress": [23, 31], "h2o_dl_regressor": 23, "h2o_drf_regressor": 23, "h2o_gam_regressor": 23, "h2o_gbm_regressor": 23, "h2o_glm_regressor": 23, "h2o_rulefit_regressor": 23, "h2o_xgb_regressor": 23, "unsupervis": 24, "h2o_isolation_forest": 24, "h2o_pca": 24, "python": [25, 26], "arima": 26, "garch": 26, "neuroprophet": 26, "prophet": 26, "spark": [27, 28, 29, 30, 31, 32], "spark_dt": 28, "spark_fmc": 28, "spark_gbt": 28, "spark_lr": 28, "spark_mlp": 28, "spark_nb": 28, "spark_ovr": 28, "spark_rf": 28, "spark_svc": 28, "spark_hvt": 29, "spark_kmean": 29, "recommend": 30, "spark_al": 30, "spark_aft_survival_regress": 31, "spark_dt_regress": 31, "spark_fm_regress": 31, "spark_gbt_regress": 31, "spark_gl_regress": 31, "spark_isotonic_regress": 31, "spark_linear_regress": 31, "spark_rf_regress": 31, "spark_t": 32, "xgb_t": 32, "maxairesourc": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "conftest": [33, 37], "clean": 34, "noiseremov": 34, "customer360": 35, "util": [35, 46, 47], "datacheck": [36, 37], "analysis_bas": 36, "dataframe_analysis_spark": 36, "test": [37, 47], "test_dataframe_analysis_spark": 37, "ensembl": 38, "eval": 39, "classifier_evaluator_spark": 39, "model_evalu": 39, "argument": 39, "return": 39, "regressor_evaluator_spark": 39, "except": 40, "factori": 41, "model_factori": 41, "log": 42, "logger": 42, "model_approv": 43, "model_approver_spark": 43, "optim": 44, "param_optim": 44, "pipelin": 45, "pipeline_factori": 45, "spark_pipelin": 45, "common_util": 46, "data_connector": 46, "encrypt": 46, "misc": 46, "multi_train": 46, "preprocess": 46, "spark_distributor": 46, "train_test_split": 46, "test_data_connector": 47, "test_multi_train": 47, "test_spark_distributor": 47, "test_train_test_split": 47}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Examples": [[0, "examples"], [8, "examples"]], "Welcome to Max.AI\u2019s documentation!": [[1, "welcome-to-max-ai-s-documentation"], [9, "welcome-to-max-ai-s-documentation"]], "Indices and tables": [[1, "indices-and-tables"], [9, "indices-and-tables"]], "maxaidatahandling package": [[2, "maxaidatahandling-package"], [11, "maxaidatahandling-package"]], "Submodules": [[2, "submodules"], [3, "submodules"], [4, "submodules"], [11, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [26, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"], [31, "submodules"], [32, "submodules"], [33, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"], [38, "submodules"], [39, "submodules"], [40, "submodules"], [41, "submodules"], [42, "submodules"], [43, "submodules"], [44, "submodules"], [45, "submodules"], [46, "submodules"], [47, "submodules"]], "maxaidatahandling.data_evaluator module": [[2, "module-maxaidatahandling.data_evaluator"], [11, "module-maxaidatahandling.data_evaluator"]], "maxaidatahandling.datafactory module": [[2, "module-maxaidatahandling.datafactory"], [11, "module-maxaidatahandling.datafactory"]], "maxaidatahandling.dataset module": [[2, "module-maxaidatahandling.dataset"], [11, "module-maxaidatahandling.dataset"]], "}": [[2, "id7"], [11, "id7"]], "Module contents": [[2, "module-maxaidatahandling"], [3, "module-maxaifeaturization.aggregation"], [4, "module-maxaifeaturization.featuretools"], [11, "module-maxaidatahandling"], [12, "module-maxaifeaturization"], [13, "module-maxaifeaturization.aggregation"], [14, "module-maxaifeaturization.featuretools"], [15, "module-maxaifeaturization.selection"], [16, "module-maxaifeaturization.timeseries"], [17, "module-maxaifeaturization.transformation"], [18, "module-maxaimetadata"], [19, "module-maxaimodel"], [20, "module-maxaimodel.H2O"], [21, "module-maxaimodel.H2O.classification"], [22, "module-maxaimodel.H2O.clustering"], [23, "module-maxaimodel.H2O.regression"], [24, "module-maxaimodel.H2O.unsupervised"], [25, "module-maxaimodel.python"], [26, "module-maxaimodel.python.timeseries"], [27, "module-maxaimodel.spark"], [28, "module-maxaimodel.spark.classification"], [29, "module-maxaimodel.spark.clustering"], [30, "module-maxaimodel.spark.recommendation"], [31, "module-maxaimodel.spark.regression"], [32, "module-maxaimodel.spark.timeseries"], [33, "module-maxairesources"], [34, "module-maxairesources.cleaning"], [35, "module-maxairesources.customer360"], [36, "module-maxairesources.datachecks"], [37, "module-maxairesources.datachecks.test"], [38, "module-maxairesources.ensemble"], [39, "module-maxairesources.eval"], [40, "module-maxairesources.exception"], [41, "module-maxairesources.factory"], [42, "module-maxairesources.logging"], [43, "module-maxairesources.model_approval"], [44, "module-maxairesources.optimizer"], [45, "module-maxairesources.pipeline"], [46, "module-maxairesources.utilities"], [47, "module-maxairesources.utilities.tests"]], "maxaifeaturization.aggregation package": [[3, "maxaifeaturization-aggregation-package"], [13, "maxaifeaturization-aggregation-package"]], "maxaifeaturization.aggregation.aggregation module": [[3, "module-maxaifeaturization.aggregation.aggregation"], [13, "module-maxaifeaturization.aggregation.aggregation"]], "maxaifeaturization.featuretools package": [[4, "maxaifeaturization-featuretools-package"], [14, "maxaifeaturization-featuretools-package"]], "maxaifeaturization.featuretools.featuretools module": [[4, "module-maxaifeaturization.featuretools.featuretools"], [14, "module-maxaifeaturization.featuretools.featuretools"]], "max.ai.ds.core": [[5, "max-ai-ds-core"], [48, "max-ai-ds-core"]], "Quickstart": [[6, "quickstart"], [49, "quickstart"]], "API": [[7, "api"]], "Installation Guide": [[10, "installation-guide"]], "maxaifeaturization package": [[12, "maxaifeaturization-package"]], "Subpackages": [[12, "subpackages"], [19, "subpackages"], [20, "subpackages"], [21, "subpackages"], [22, "subpackages"], [24, "subpackages"], [25, "subpackages"], [27, "subpackages"], [33, "subpackages"], [36, "subpackages"], [46, "subpackages"]], "maxaifeaturization.selection package": [[15, "maxaifeaturization-selection-package"]], "maxaifeaturization.selection.model_based_selector module": [[15, "module-maxaifeaturization.selection.model_based_selector"]], "maxaifeaturization.selection.selector module": [[15, "module-maxaifeaturization.selection.selector"]], "maxaifeaturization.timeseries package": [[16, "maxaifeaturization-timeseries-package"]], "maxaifeaturization.timeseries.univariate module": [[16, "module-maxaifeaturization.timeseries.univariate"]], "maxaifeaturization.transformation package": [[17, "maxaifeaturization-transformation-package"]], "maxaifeaturization.transformation.transform module": [[17, "module-maxaifeaturization.transformation.transform"]], "maxaifeaturization.transformation.window module": [[17, "module-maxaifeaturization.transformation.window"]], "maxaimetadata package": [[18, "maxaimetadata-package"]], "maxaimetadata.maxflow module": [[18, "module-maxaimetadata.maxflow"]], "maxaimetadata.test_maxflow module": [[18, "module-maxaimetadata.test_maxflow"]], "maxaimodel package": [[19, "maxaimodel-package"]], "maxaimodel.H2O package": [[20, "maxaimodel-h2o-package"]], "maxaimodel.H2O.classification package": [[21, "maxaimodel-h2o-classification-package"]], "maxaimodel.H2O.classification.h2o_dl module": [[21, "module-maxaimodel.H2O.classification.h2o_dl"]], "maxaimodel.H2O.classification.h2o_drf module": [[21, "module-maxaimodel.H2O.classification.h2o_drf"]], "maxaimodel.H2O.classification.h2o_gam module": [[21, "module-maxaimodel.H2O.classification.h2o_gam"]], "maxaimodel.H2O.classification.h2o_gbm module": [[21, "module-maxaimodel.H2O.classification.h2o_gbm"]], "maxaimodel.H2O.classification.h2o_glm module": [[21, "module-maxaimodel.H2O.classification.h2o_glm"]], "maxaimodel.H2O.classification.h2o_rf module": [[21, "maxaimodel-h2o-classification-h2o-rf-module"]], "maxaimodel.H2O.classification.h2o_xgb module": [[21, "module-maxaimodel.H2O.classification.h2o_xgb"]], "maxaimodel.H2O.clustering package": [[22, "maxaimodel-h2o-clustering-package"]], "maxaimodel.H2O.clustering.h2o_kmeans module": [[22, "module-maxaimodel.H2O.clustering.h2o_kmeans"]], "maxaimodel.H2O.regression package": [[23, "maxaimodel-h2o-regression-package"]], "maxaimodel.H2O.regression.h2o_dl_regressor module": [[23, "module-maxaimodel.H2O.regression.h2o_dl_regressor"]], "maxaimodel.H2O.regression.h2o_drf_regressor module": [[23, "module-maxaimodel.H2O.regression.h2o_drf_regressor"]], "maxaimodel.H2O.regression.h2o_gam_regressor module": [[23, "module-maxaimodel.H2O.regression.h2o_gam_regressor"]], "maxaimodel.H2O.regression.h2o_gbm_regressor module": [[23, "module-maxaimodel.H2O.regression.h2o_gbm_regressor"]], "maxaimodel.H2O.regression.h2o_glm_regressor module": [[23, "module-maxaimodel.H2O.regression.h2o_glm_regressor"]], "maxaimodel.H2O.regression.h2o_rulefit_regressor module": [[23, "maxaimodel-h2o-regression-h2o-rulefit-regressor-module"]], "maxaimodel.H2O.regression.h2o_xgb_regressor module": [[23, "module-maxaimodel.H2O.regression.h2o_xgb_regressor"]], "maxaimodel.H2O.unsupervised package": [[24, "maxaimodel-h2o-unsupervised-package"]], "maxaimodel.H2O.unsupervised.h2o_isolation_forest module": [[24, "module-maxaimodel.H2O.unsupervised.h2o_isolation_forest"]], "maxaimodel.H2O.unsupervised.h2o_pca module": [[24, "maxaimodel-h2o-unsupervised-h2o-pca-module"]], "maxaimodel.python package": [[25, "maxaimodel-python-package"]], "maxaimodel.python.timeseries package": [[26, "maxaimodel-python-timeseries-package"]], "maxaimodel.python.timeseries.arima module": [[26, "module-maxaimodel.python.timeseries.arima"]], "maxaimodel.python.timeseries.garch module": [[26, "module-maxaimodel.python.timeseries.garch"]], "maxaimodel.python.timeseries.neuroprophet module": [[26, "module-maxaimodel.python.timeseries.neuroprophet"]], "maxaimodel.python.timeseries.prophet module": [[26, "module-maxaimodel.python.timeseries.prophet"]], "maxaimodel.spark package": [[27, "maxaimodel-spark-package"]], "maxaimodel.spark.classification package": [[28, "maxaimodel-spark-classification-package"]], "maxaimodel.spark.classification.spark_dt module": [[28, "module-maxaimodel.spark.classification.spark_dt"]], "maxaimodel.spark.classification.spark_fmc module": [[28, "module-maxaimodel.spark.classification.spark_fmc"]], "maxaimodel.spark.classification.spark_gbt module": [[28, "module-maxaimodel.spark.classification.spark_gbt"]], "maxaimodel.spark.classification.spark_lr module": [[28, "module-maxaimodel.spark.classification.spark_lr"]], "maxaimodel.spark.classification.spark_mlp module": [[28, "module-maxaimodel.spark.classification.spark_mlp"]], "maxaimodel.spark.classification.spark_nb module": [[28, "module-maxaimodel.spark.classification.spark_nb"]], "maxaimodel.spark.classification.spark_ovr module": [[28, "module-maxaimodel.spark.classification.spark_ovr"]], "maxaimodel.spark.classification.spark_rf module": [[28, "module-maxaimodel.spark.classification.spark_rf"]], "maxaimodel.spark.classification.spark_svc module": [[28, "module-maxaimodel.spark.classification.spark_svc"]], "maxaimodel.spark.clustering package": [[29, "maxaimodel-spark-clustering-package"]], "maxaimodel.spark.clustering.spark_hvt module": [[29, "module-maxaimodel.spark.clustering.spark_hvt"]], "maxaimodel.spark.clustering.spark_kmeans module": [[29, "module-maxaimodel.spark.clustering.spark_kmeans"]], "maxaimodel.spark.recommendation package": [[30, "maxaimodel-spark-recommendation-package"]], "maxaimodel.spark.recommendation.spark_als module": [[30, "module-maxaimodel.spark.recommendation.spark_als"]], "maxaimodel.spark.regression package": [[31, "maxaimodel-spark-regression-package"]], "maxaimodel.spark.regression.spark_aft_survival_regression module": [[31, "module-maxaimodel.spark.regression.spark_aft_survival_regression"]], "maxaimodel.spark.regression.spark_dt_regression module": [[31, "module-maxaimodel.spark.regression.spark_dt_regression"]], "maxaimodel.spark.regression.spark_fm_regression module": [[31, "module-maxaimodel.spark.regression.spark_fm_regression"]], "maxaimodel.spark.regression.spark_gbt_regression module": [[31, "module-maxaimodel.spark.regression.spark_gbt_regression"]], "maxaimodel.spark.regression.spark_gl_regression module": [[31, "module-maxaimodel.spark.regression.spark_gl_regression"]], "maxaimodel.spark.regression.spark_isotonic_regression module": [[31, "module-maxaimodel.spark.regression.spark_isotonic_regression"]], "maxaimodel.spark.regression.spark_linear_regression module": [[31, "module-maxaimodel.spark.regression.spark_linear_regression"]], "maxaimodel.spark.regression.spark_rf_regression module": [[31, "module-maxaimodel.spark.regression.spark_rf_regression"]], "maxaimodel.spark.timeseries package": [[32, "maxaimodel-spark-timeseries-package"]], "maxaimodel.spark.timeseries.spark_ts module": [[32, "module-maxaimodel.spark.timeseries.spark_ts"]], "maxaimodel.spark.timeseries.xgb_ts module": [[32, "module-maxaimodel.spark.timeseries.xgb_ts"]], "maxairesources package": [[33, "maxairesources-package"]], "maxairesources.conftest module": [[33, "module-maxairesources.conftest"]], "maxairesources.cleaning package": [[34, "maxairesources-cleaning-package"]], "maxairesources.cleaning.NoiseRemoval module": [[34, "module-maxairesources.cleaning.NoiseRemoval"]], "maxairesources.customer360 package": [[35, "maxairesources-customer360-package"]], "maxairesources.customer360.utility module": [[35, "module-maxairesources.customer360.utility"]], "maxairesources.datachecks package": [[36, "maxairesources-datachecks-package"]], "maxairesources.datachecks.analysis_base module": [[36, "module-maxairesources.datachecks.analysis_base"]], "maxairesources.datachecks.dataframe_analysis_spark module": [[36, "module-maxairesources.datachecks.dataframe_analysis_spark"]], "maxairesources.datachecks.test package": [[37, "maxairesources-datachecks-test-package"]], "maxairesources.datachecks.test.conftest module": [[37, "module-maxairesources.datachecks.test.conftest"]], "maxairesources.datachecks.test.test_dataframe_analysis_spark module": [[37, "module-maxairesources.datachecks.test.test_dataframe_analysis_spark"]], "maxairesources.ensemble package": [[38, "maxairesources-ensemble-package"]], "maxairesources.ensemble.ensemble module": [[38, "module-maxairesources.ensemble.ensemble"]], "maxairesources.eval package": [[39, "maxairesources-eval-package"]], "maxairesources.eval.classifier_evaluator_spark module": [[39, "module-maxairesources.eval.classifier_evaluator_spark"]], "maxairesources.eval.model_evaluator module": [[39, "module-maxairesources.eval.model_evaluator"]], "Arguments:": [[39, "arguments"]], "Returns:": [[39, "returns"]], "Example:": [[39, "example"]], "maxairesources.eval.regressor_evaluator_spark module": [[39, "module-maxairesources.eval.regressor_evaluator_spark"]], "maxairesources.exception package": [[40, "maxairesources-exception-package"]], "maxairesources.exception.exceptions module": [[40, "module-maxairesources.exception.exceptions"]], "maxairesources.factory package": [[41, "maxairesources-factory-package"]], "maxairesources.factory.model_factory module": [[41, "module-maxairesources.factory.model_factory"]], "maxairesources.logging package": [[42, "maxairesources-logging-package"]], "maxairesources.logging.logger module": [[42, "module-maxairesources.logging.logger"]], "maxairesources.model_approval package": [[43, "maxairesources-model-approval-package"]], "maxairesources.model_approval.model_approver_spark module": [[43, "module-maxairesources.model_approval.model_approver_spark"]], "maxairesources.optimizer package": [[44, "maxairesources-optimizer-package"]], "maxairesources.optimizer.param_optimizer module": [[44, "maxairesources-optimizer-param-optimizer-module"]], "maxairesources.pipeline package": [[45, "maxairesources-pipeline-package"]], "maxairesources.pipeline.pipeline_factory module": [[45, "module-maxairesources.pipeline.pipeline_factory"]], "maxairesources.pipeline.spark_pipeline module": [[45, "module-maxairesources.pipeline.spark_pipeline"]], "maxairesources.utilities package": [[46, "maxairesources-utilities-package"]], "maxairesources.utilities.common_utils module": [[46, "module-maxairesources.utilities.common_utils"]], "maxairesources.utilities.data_connectors module": [[46, "module-maxairesources.utilities.data_connectors"]], "maxairesources.utilities.encryption module": [[46, "module-maxairesources.utilities.encryption"]], "maxairesources.utilities.misc module": [[46, "module-maxairesources.utilities.misc"]], "maxairesources.utilities.multi_train module": [[46, "module-maxairesources.utilities.multi_train"]], "maxairesources.utilities.preprocessing module": [[46, "module-maxairesources.utilities.preprocessing"]], "maxairesources.utilities.spark_distributor module": [[46, "module-maxairesources.utilities.spark_distributor"]], "maxairesources.utilities.train_test_split module": [[46, "module-maxairesources.utilities.train_test_split"]], "maxairesources.utilities.tests package": [[47, "maxairesources-utilities-tests-package"]], "maxairesources.utilities.tests.test_data_connector module": [[47, "module-maxairesources.utilities.tests.test_data_connector"]], "maxairesources.utilities.tests.test_multi_train module": [[47, "module-maxairesources.utilities.tests.test_multi_train"]], "maxairesources.utilities.tests.test_spark_distributor module": [[47, "module-maxairesources.utilities.tests.test_spark_distributor"]], "maxairesources.utilities.tests.test_train_test_split module": [[47, "module-maxairesources.utilities.tests.test_train_test_split"]]}, "indexentries": {"dataevaluator (class in maxaidatahandling.data_evaluator)": [[2, "maxaidatahandling.data_evaluator.DataEvaluator"], [11, "maxaidatahandling.data_evaluator.DataEvaluator"]], "maxdatafactory (class in maxaidatahandling.datafactory)": [[2, "maxaidatahandling.datafactory.MAXDataFactory"], [11, "maxaidatahandling.datafactory.MAXDataFactory"]], "maxdataset (class in maxaidatahandling.dataset)": [[2, "maxaidatahandling.dataset.MaxDataset"], [11, "maxaidatahandling.dataset.MaxDataset"]], "evaluate() (maxaidatahandling.data_evaluator.dataevaluator method)": [[2, "maxaidatahandling.data_evaluator.DataEvaluator.evaluate"], [11, "maxaidatahandling.data_evaluator.DataEvaluator.evaluate"]], "get_all_datasets() (maxaidatahandling.datafactory.maxdatafactory method)": [[2, "maxaidatahandling.datafactory.MAXDataFactory.get_all_datasets"], [11, "maxaidatahandling.datafactory.MAXDataFactory.get_all_datasets"]], "get_dataset() (maxaidatahandling.datafactory.maxdatafactory method)": [[2, "maxaidatahandling.datafactory.MAXDataFactory.get_dataset"], [11, "maxaidatahandling.datafactory.MAXDataFactory.get_dataset"]], "get_key_value() (in module maxaidatahandling.dataset)": [[2, "maxaidatahandling.dataset.get_key_value"], [11, "maxaidatahandling.dataset.get_key_value"]], "maxaidatahandling": [[2, "module-maxaidatahandling"], [11, "module-maxaidatahandling"]], "maxaidatahandling.data_evaluator": [[2, "module-maxaidatahandling.data_evaluator"], [11, "module-maxaidatahandling.data_evaluator"]], "maxaidatahandling.datafactory": [[2, "module-maxaidatahandling.datafactory"], [11, "module-maxaidatahandling.datafactory"]], "maxaidatahandling.dataset": [[2, "module-maxaidatahandling.dataset"], [11, "module-maxaidatahandling.dataset"]], "module": [[2, "module-maxaidatahandling"], [2, "module-maxaidatahandling.data_evaluator"], [2, "module-maxaidatahandling.datafactory"], [2, "module-maxaidatahandling.dataset"], [3, "module-maxaifeaturization.aggregation"], [3, "module-maxaifeaturization.aggregation.aggregation"], [4, "module-maxaifeaturization.featuretools"], [4, "module-maxaifeaturization.featuretools.featuretools"], [11, "module-maxaidatahandling"], [11, "module-maxaidatahandling.data_evaluator"], [11, "module-maxaidatahandling.datafactory"], [11, "module-maxaidatahandling.dataset"], [12, "module-maxaifeaturization"], [13, "module-maxaifeaturization.aggregation"], [13, "module-maxaifeaturization.aggregation.aggregation"], [14, "module-maxaifeaturization.featuretools"], [14, "module-maxaifeaturization.featuretools.featuretools"], [15, "module-maxaifeaturization.selection"], [15, "module-maxaifeaturization.selection.model_based_selector"], [15, "module-maxaifeaturization.selection.selector"], [16, "module-maxaifeaturization.timeseries"], [16, "module-maxaifeaturization.timeseries.univariate"], [17, "module-maxaifeaturization.transformation"], [17, "module-maxaifeaturization.transformation.transform"], [17, "module-maxaifeaturization.transformation.window"], [18, "module-maxaimetadata"], [18, "module-maxaimetadata.maxflow"], [18, "module-maxaimetadata.test_maxflow"], [19, "module-maxaimodel"], [20, "module-maxaimodel.H2O"], [21, "module-maxaimodel.H2O.classification"], [21, "module-maxaimodel.H2O.classification.h2o_dl"], [21, "module-maxaimodel.H2O.classification.h2o_drf"], [21, "module-maxaimodel.H2O.classification.h2o_gam"], [21, "module-maxaimodel.H2O.classification.h2o_gbm"], [21, "module-maxaimodel.H2O.classification.h2o_glm"], [21, "module-maxaimodel.H2O.classification.h2o_xgb"], [22, "module-maxaimodel.H2O.clustering"], [22, "module-maxaimodel.H2O.clustering.h2o_kmeans"], [23, "module-maxaimodel.H2O.regression"], [23, "module-maxaimodel.H2O.regression.h2o_dl_regressor"], [23, "module-maxaimodel.H2O.regression.h2o_drf_regressor"], [23, "module-maxaimodel.H2O.regression.h2o_gam_regressor"], [23, "module-maxaimodel.H2O.regression.h2o_gbm_regressor"], [23, "module-maxaimodel.H2O.regression.h2o_glm_regressor"], [23, "module-maxaimodel.H2O.regression.h2o_xgb_regressor"], [24, "module-maxaimodel.H2O.unsupervised"], [24, "module-maxaimodel.H2O.unsupervised.h2o_isolation_forest"], [25, "module-maxaimodel.python"], [26, "module-maxaimodel.python.timeseries"], [26, "module-maxaimodel.python.timeseries.arima"], [26, "module-maxaimodel.python.timeseries.garch"], [26, "module-maxaimodel.python.timeseries.neuroprophet"], [26, "module-maxaimodel.python.timeseries.prophet"], [27, "module-maxaimodel.spark"], [28, "module-maxaimodel.spark.classification"], [28, "module-maxaimodel.spark.classification.spark_dt"], [28, "module-maxaimodel.spark.classification.spark_fmc"], [28, "module-maxaimodel.spark.classification.spark_gbt"], [28, "module-maxaimodel.spark.classification.spark_lr"], [28, "module-maxaimodel.spark.classification.spark_mlp"], [28, "module-maxaimodel.spark.classification.spark_nb"], [28, "module-maxaimodel.spark.classification.spark_ovr"], [28, "module-maxaimodel.spark.classification.spark_rf"], [28, "module-maxaimodel.spark.classification.spark_svc"], [29, "module-maxaimodel.spark.clustering"], [29, "module-maxaimodel.spark.clustering.spark_hvt"], [29, "module-maxaimodel.spark.clustering.spark_kmeans"], [30, "module-maxaimodel.spark.recommendation"], [30, "module-maxaimodel.spark.recommendation.spark_als"], [31, "module-maxaimodel.spark.regression"], [31, "module-maxaimodel.spark.regression.spark_aft_survival_regression"], [31, "module-maxaimodel.spark.regression.spark_dt_regression"], [31, "module-maxaimodel.spark.regression.spark_fm_regression"], [31, "module-maxaimodel.spark.regression.spark_gbt_regression"], [31, "module-maxaimodel.spark.regression.spark_gl_regression"], [31, "module-maxaimodel.spark.regression.spark_isotonic_regression"], [31, "module-maxaimodel.spark.regression.spark_linear_regression"], [31, "module-maxaimodel.spark.regression.spark_rf_regression"], [32, "module-maxaimodel.spark.timeseries"], [32, "module-maxaimodel.spark.timeseries.spark_ts"], [32, "module-maxaimodel.spark.timeseries.xgb_ts"], [33, "module-maxairesources"], [33, "module-maxairesources.conftest"], [34, "module-maxairesources.cleaning"], [34, "module-maxairesources.cleaning.NoiseRemoval"], [35, "module-maxairesources.customer360"], [35, "module-maxairesources.customer360.utility"], [36, "module-maxairesources.datachecks"], [36, "module-maxairesources.datachecks.analysis_base"], [36, "module-maxairesources.datachecks.dataframe_analysis_spark"], [37, "module-maxairesources.datachecks.test"], [37, "module-maxairesources.datachecks.test.conftest"], [37, "module-maxairesources.datachecks.test.test_dataframe_analysis_spark"], [38, "module-maxairesources.ensemble"], [38, "module-maxairesources.ensemble.ensemble"], [39, "module-maxairesources.eval"], [39, "module-maxairesources.eval.classifier_evaluator_spark"], [39, "module-maxairesources.eval.model_evaluator"], [39, "module-maxairesources.eval.regressor_evaluator_spark"], [40, "module-maxairesources.exception"], [40, "module-maxairesources.exception.exceptions"], [41, "module-maxairesources.factory"], [41, "module-maxairesources.factory.model_factory"], [42, "module-maxairesources.logging"], [42, "module-maxairesources.logging.logger"], [43, "module-maxairesources.model_approval"], [43, "module-maxairesources.model_approval.model_approver_spark"], [44, "module-maxairesources.optimizer"], [45, "module-maxairesources.pipeline"], [45, "module-maxairesources.pipeline.pipeline_factory"], [45, "module-maxairesources.pipeline.spark_pipeline"], [46, "module-maxairesources.utilities"], [46, "module-maxairesources.utilities.common_utils"], [46, "module-maxairesources.utilities.data_connectors"], [46, "module-maxairesources.utilities.encryption"], [46, "module-maxairesources.utilities.misc"], [46, "module-maxairesources.utilities.multi_train"], [46, "module-maxairesources.utilities.preprocessing"], [46, "module-maxairesources.utilities.spark_distributor"], [46, "module-maxairesources.utilities.train_test_split"], [47, "module-maxairesources.utilities.tests"], [47, "module-maxairesources.utilities.tests.test_data_connector"], [47, "module-maxairesources.utilities.tests.test_multi_train"], [47, "module-maxairesources.utilities.tests.test_spark_distributor"], [47, "module-maxairesources.utilities.tests.test_train_test_split"]], "prepare_dataset() (maxaidatahandling.dataset.maxdataset method)": [[2, "maxaidatahandling.dataset.MaxDataset.prepare_dataset"], [11, "maxaidatahandling.dataset.MaxDataset.prepare_dataset"]], "prepare_datasets() (maxaidatahandling.datafactory.maxdatafactory method)": [[2, "maxaidatahandling.datafactory.MAXDataFactory.prepare_datasets"], [11, "maxaidatahandling.datafactory.MAXDataFactory.prepare_datasets"]], "store_data() (maxaidatahandling.dataset.maxdataset method)": [[2, "maxaidatahandling.dataset.MaxDataset.store_data"], [11, "maxaidatahandling.dataset.MaxDataset.store_data"]], "store_datasets() (maxaidatahandling.datafactory.maxdatafactory method)": [[2, "maxaidatahandling.datafactory.MAXDataFactory.store_datasets"], [11, "maxaidatahandling.datafactory.MAXDataFactory.store_datasets"]], "aggregation (class in maxaifeaturization.aggregation.aggregation)": [[3, "maxaifeaturization.aggregation.aggregation.Aggregation"], [13, "maxaifeaturization.aggregation.aggregation.Aggregation"]], "constants (class in maxaifeaturization.aggregation.aggregation)": [[3, "maxaifeaturization.aggregation.aggregation.Constants"], [13, "maxaifeaturization.aggregation.aggregation.Constants"]], "execute() (maxaifeaturization.aggregation.aggregation.aggregation method)": [[3, "maxaifeaturization.aggregation.aggregation.Aggregation.execute"], [13, "maxaifeaturization.aggregation.aggregation.Aggregation.execute"]], "maxaifeaturization.aggregation": [[3, "module-maxaifeaturization.aggregation"], [13, "module-maxaifeaturization.aggregation"]], "maxaifeaturization.aggregation.aggregation": [[3, "module-maxaifeaturization.aggregation.aggregation"], [13, "module-maxaifeaturization.aggregation.aggregation"]], "operation_dict (maxaifeaturization.aggregation.aggregation.constants attribute)": [[3, "maxaifeaturization.aggregation.aggregation.Constants.operation_dict"], [13, "maxaifeaturization.aggregation.aggregation.Constants.operation_dict"]], "featuretoolfeatures (class in maxaifeaturization.featuretools.featuretools)": [[4, "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures"], [14, "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures"]], "execute() (maxaifeaturization.featuretools.featuretools.featuretoolfeatures method)": [[4, "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures.execute"], [14, "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures.execute"]], "maxaifeaturization.featuretools": [[4, "module-maxaifeaturization.featuretools"], [14, "module-maxaifeaturization.featuretools"]], "maxaifeaturization.featuretools.featuretools": [[4, "module-maxaifeaturization.featuretools.featuretools"], [14, "module-maxaifeaturization.featuretools.featuretools"]], "maxaifeaturization": [[12, "module-maxaifeaturization"]], "constants (class in maxaifeaturization.selection.selector)": [[15, "maxaifeaturization.selection.selector.Constants"]], "featureselector (class in maxaifeaturization.selection.selector)": [[15, "maxaifeaturization.selection.selector.FeatureSelector"]], "modelbasedselector (class in maxaifeaturization.selection.model_based_selector)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector"]], "modelbasedselectormodel (class in maxaifeaturization.selection.model_based_selector)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel"]], "univariatefeatureselectorn() (in module maxaifeaturization.selection.selector)": [[15, "maxaifeaturization.selection.selector.UnivariateFeatureSelectorN"]], "extract_feature_details() (maxaifeaturization.selection.model_based_selector.modelbasedselector static method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector.extract_feature_details"]], "feature_imp (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel property)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.feature_imp"]], "fit() (maxaifeaturization.selection.model_based_selector.modelbasedselector method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector.fit"]], "load() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel class method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.load"]], "load() (maxaifeaturization.selection.selector.featureselector method)": [[15, "maxaifeaturization.selection.selector.FeatureSelector.load"]], "maxaifeaturization.selection": [[15, "module-maxaifeaturization.selection"]], "maxaifeaturization.selection.model_based_selector": [[15, "module-maxaifeaturization.selection.model_based_selector"]], "maxaifeaturization.selection.selector": [[15, "module-maxaifeaturization.selection.selector"]], "model (maxaifeaturization.selection.model_based_selector.modelbasedselector property)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector.model"]], "overwrite() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.overwrite"]], "save() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.save"]], "save() (maxaifeaturization.selection.selector.featureselector method)": [[15, "maxaifeaturization.selection.selector.FeatureSelector.save"]], "select_features() (maxaifeaturization.selection.selector.featureselector method)": [[15, "maxaifeaturization.selection.selector.FeatureSelector.select_features"]], "selector (maxaifeaturization.selection.selector.featureselector property)": [[15, "maxaifeaturization.selection.selector.FeatureSelector.selector"]], "selectors (maxaifeaturization.selection.selector.constants attribute)": [[15, "maxaifeaturization.selection.selector.Constants.selectors"]], "transform() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.transform"]], "write() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[15, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.write"]], "decompose (class in maxaifeaturization.timeseries.univariate)": [[16, "maxaifeaturization.timeseries.univariate.Decompose"]], "stationaritytest (class in maxaifeaturization.timeseries.univariate)": [[16, "maxaifeaturization.timeseries.univariate.StationarityTest"]], "adf() (maxaifeaturization.timeseries.univariate.stationaritytest static method)": [[16, "maxaifeaturization.timeseries.univariate.StationarityTest.adf"]], "autocorrelation() (in module maxaifeaturization.timeseries.univariate)": [[16, "maxaifeaturization.timeseries.univariate.autocorrelation"]], "check_stationarity() (in module maxaifeaturization.timeseries.univariate)": [[16, "maxaifeaturization.timeseries.univariate.check_stationarity"]], "kpss() (maxaifeaturization.timeseries.univariate.stationaritytest static method)": [[16, "maxaifeaturization.timeseries.univariate.StationarityTest.kpss"]], "loess() (maxaifeaturization.timeseries.univariate.decompose static method)": [[16, "maxaifeaturization.timeseries.univariate.Decompose.loess"]], "maxaifeaturization.timeseries": [[16, "module-maxaifeaturization.timeseries"]], "maxaifeaturization.timeseries.univariate": [[16, "module-maxaifeaturization.timeseries.univariate"]], "moving_average() (maxaifeaturization.timeseries.univariate.decompose static method)": [[16, "maxaifeaturization.timeseries.univariate.Decompose.moving_average"]], "time_series_decomposition() (in module maxaifeaturization.timeseries.univariate)": [[16, "maxaifeaturization.timeseries.univariate.time_series_decomposition"]], "constants (class in maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.Constants"]], "constants (class in maxaifeaturization.transformation.window)": [[17, "maxaifeaturization.transformation.window.Constants"]], "datetimetransform (class in maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.DateTimeTransform"]], "filter (class in maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.Filter"]], "numtransforms (class in maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.NumTransforms"]], "strtransforms (class in maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.StrTransforms"]], "transformation (class in maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.Transformation"]], "windowoperations (class in maxaifeaturization.transformation.window)": [[17, "maxaifeaturization.transformation.window.WindowOperations"]], "alter_case() (maxaifeaturization.transformation.transform.strtransforms static method)": [[17, "maxaifeaturization.transformation.transform.StrTransforms.alter_case"]], "concat_columns() (maxaifeaturization.transformation.transform.strtransforms static method)": [[17, "maxaifeaturization.transformation.transform.StrTransforms.concat_columns"]], "convert_to_iso8601() (maxaifeaturization.transformation.transform.datetimetransform static method)": [[17, "maxaifeaturization.transformation.transform.DateTimeTransform.convert_to_iso8601"]], "decode_transformation() (maxaifeaturization.transformation.transform.transformation method)": [[17, "maxaifeaturization.transformation.transform.Transformation.decode_transformation"]], "execute() (maxaifeaturization.transformation.transform.filter method)": [[17, "maxaifeaturization.transformation.transform.Filter.execute"]], "execute() (maxaifeaturization.transformation.transform.transformation method)": [[17, "maxaifeaturization.transformation.transform.Transformation.execute"]], "execute() (maxaifeaturization.transformation.window.windowoperations method)": [[17, "maxaifeaturization.transformation.window.WindowOperations.execute"]], "exp() (maxaifeaturization.transformation.transform.numtransforms static method)": [[17, "maxaifeaturization.transformation.transform.NumTransforms.exp"]], "log() (maxaifeaturization.transformation.transform.numtransforms static method)": [[17, "maxaifeaturization.transformation.transform.NumTransforms.log"]], "maxaifeaturization.transformation": [[17, "module-maxaifeaturization.transformation"]], "maxaifeaturization.transformation.transform": [[17, "module-maxaifeaturization.transformation.transform"]], "maxaifeaturization.transformation.window": [[17, "module-maxaifeaturization.transformation.window"]], "one_hot_encoder() (maxaifeaturization.transformation.transform.strtransforms static method)": [[17, "maxaifeaturization.transformation.transform.StrTransforms.one_hot_encoder"]], "operation_dict (maxaifeaturization.transformation.transform.constants attribute)": [[17, "maxaifeaturization.transformation.transform.Constants.operation_dict"]], "operation_dict (maxaifeaturization.transformation.window.constants attribute)": [[17, "maxaifeaturization.transformation.window.Constants.operation_dict"]], "reciprocal() (maxaifeaturization.transformation.transform.numtransforms static method)": [[17, "maxaifeaturization.transformation.transform.NumTransforms.reciprocal"]], "split_column() (maxaifeaturization.transformation.transform.strtransforms static method)": [[17, "maxaifeaturization.transformation.transform.StrTransforms.split_column"]], "string_indexer() (maxaifeaturization.transformation.transform.strtransforms static method)": [[17, "maxaifeaturization.transformation.transform.StrTransforms.string_indexer"]], "trim_whitespaces() (maxaifeaturization.transformation.transform.strtransforms static method)": [[17, "maxaifeaturization.transformation.transform.StrTransforms.trim_whitespaces"]], "unpack_kwargs() (in module maxaifeaturization.transformation.transform)": [[17, "maxaifeaturization.transformation.transform.unpack_kwargs"]], "zscore() (maxaifeaturization.transformation.transform.numtransforms static method)": [[17, "maxaifeaturization.transformation.transform.NumTransforms.zscore"]], "maxflow (class in maxaimetadata.maxflow)": [[18, "maxaimetadata.maxflow.MaxFlow"]], "maxrun (class in maxaimetadata.maxflow)": [[18, "maxaimetadata.maxflow.MaxRun"]], "auto_log() (maxaimetadata.maxflow.maxflow method)": [[18, "maxaimetadata.maxflow.MaxFlow.auto_log"]], "end_run() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.end_run"]], "get_active_flow() (maxaimetadata.maxflow.maxflow class method)": [[18, "maxaimetadata.maxflow.MaxFlow.get_active_flow"]], "get_active_run() (maxaimetadata.maxflow.maxflow class method)": [[18, "maxaimetadata.maxflow.MaxFlow.get_active_run"]], "get_registered_model() (maxaimetadata.maxflow.maxflow method)": [[18, "maxaimetadata.maxflow.MaxFlow.get_registered_model"]], "log_artifact() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_artifact"]], "log_artifacts() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_artifacts"]], "log_data() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_data"]], "log_dict() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_dict"]], "log_figure() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_figure"]], "log_metric() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_metric"]], "log_metrics() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_metrics"]], "log_model() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_model"]], "log_param() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_param"]], "log_params() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.log_params"]], "maxaimetadata": [[18, "module-maxaimetadata"]], "maxaimetadata.maxflow": [[18, "module-maxaimetadata.maxflow"]], "maxaimetadata.test_maxflow": [[18, "module-maxaimetadata.test_maxflow"]], "register_model() (maxaimetadata.maxflow.maxflow method)": [[18, "maxaimetadata.maxflow.MaxFlow.register_model"]], "set_active() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.set_active"]], "set_experiment() (maxaimetadata.maxflow.maxflow method)": [[18, "maxaimetadata.maxflow.MaxFlow.set_experiment"]], "set_tag() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.set_tag"]], "set_tags() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.set_tags"]], "start_child_run() (maxaimetadata.maxflow.maxrun method)": [[18, "maxaimetadata.maxflow.MaxRun.start_child_run"]], "start_run() (maxaimetadata.maxflow.maxflow method)": [[18, "maxaimetadata.maxflow.MaxFlow.start_run"]], "stop() (maxaimetadata.maxflow.maxflow method)": [[18, "maxaimetadata.maxflow.MaxFlow.stop"]], "test_maxflow() (in module maxaimetadata.test_maxflow)": [[18, "maxaimetadata.test_maxflow.test_maxflow"]], "maxaimodel": [[19, "module-maxaimodel"]], "maxaimodel.h2o": [[20, "module-maxaimodel.H2O"]], "h2odlclassifier (class in maxaimodel.h2o.classification.h2o_dl)": [[21, "maxaimodel.H2O.classification.h2o_dl.H2ODLClassifier"]], "h2odrfclassifier (class in maxaimodel.h2o.classification.h2o_drf)": [[21, "maxaimodel.H2O.classification.h2o_drf.H2ODRFClassifier"]], "h2ogamclassifier (class in maxaimodel.h2o.classification.h2o_gam)": [[21, "maxaimodel.H2O.classification.h2o_gam.H2OGAMClassifier"]], "h2ogbmclassifier (class in maxaimodel.h2o.classification.h2o_gbm)": [[21, "maxaimodel.H2O.classification.h2o_gbm.H2OGBMClassifier"]], "h2oglmclassifier (class in maxaimodel.h2o.classification.h2o_glm)": [[21, "maxaimodel.H2O.classification.h2o_glm.H2OGLMClassifier"]], "h2oxgbclassifier (class in maxaimodel.h2o.classification.h2o_xgb)": [[21, "maxaimodel.H2O.classification.h2o_xgb.H2OXGBClassifier"]], "build() (maxaimodel.h2o.classification.h2o_dl.h2odlclassifier method)": [[21, "maxaimodel.H2O.classification.h2o_dl.H2ODLClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_drf.h2odrfclassifier method)": [[21, "maxaimodel.H2O.classification.h2o_drf.H2ODRFClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_gam.h2ogamclassifier method)": [[21, "maxaimodel.H2O.classification.h2o_gam.H2OGAMClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_gbm.h2ogbmclassifier method)": [[21, "maxaimodel.H2O.classification.h2o_gbm.H2OGBMClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_glm.h2oglmclassifier method)": [[21, "maxaimodel.H2O.classification.h2o_glm.H2OGLMClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_xgb.h2oxgbclassifier method)": [[21, "maxaimodel.H2O.classification.h2o_xgb.H2OXGBClassifier.build"]], "maxaimodel.h2o.classification": [[21, "module-maxaimodel.H2O.classification"]], "maxaimodel.h2o.classification.h2o_dl": [[21, "module-maxaimodel.H2O.classification.h2o_dl"]], "maxaimodel.h2o.classification.h2o_drf": [[21, "module-maxaimodel.H2O.classification.h2o_drf"]], "maxaimodel.h2o.classification.h2o_gam": [[21, "module-maxaimodel.H2O.classification.h2o_gam"]], "maxaimodel.h2o.classification.h2o_gbm": [[21, "module-maxaimodel.H2O.classification.h2o_gbm"]], "maxaimodel.h2o.classification.h2o_glm": [[21, "module-maxaimodel.H2O.classification.h2o_glm"]], "maxaimodel.h2o.classification.h2o_xgb": [[21, "module-maxaimodel.H2O.classification.h2o_xgb"]], "h2okmeansclustering (class in maxaimodel.h2o.clustering.h2o_kmeans)": [[22, "maxaimodel.H2O.clustering.h2o_kmeans.H2OKmeansClustering"]], "build() (maxaimodel.h2o.clustering.h2o_kmeans.h2okmeansclustering method)": [[22, "maxaimodel.H2O.clustering.h2o_kmeans.H2OKmeansClustering.build"]], "maxaimodel.h2o.clustering": [[22, "module-maxaimodel.H2O.clustering"]], "maxaimodel.h2o.clustering.h2o_kmeans": [[22, "module-maxaimodel.H2O.clustering.h2o_kmeans"]], "h2odlregressor (class in maxaimodel.h2o.regression.h2o_dl_regressor)": [[23, "maxaimodel.H2O.regression.h2o_dl_regressor.H2ODLRegressor"]], "h2odrfregressor (class in maxaimodel.h2o.regression.h2o_drf_regressor)": [[23, "maxaimodel.H2O.regression.h2o_drf_regressor.H2ODRFRegressor"]], "h2ogamregressor (class in maxaimodel.h2o.regression.h2o_gam_regressor)": [[23, "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor"]], "h2ogbmregressor (class in maxaimodel.h2o.regression.h2o_gbm_regressor)": [[23, "maxaimodel.H2O.regression.h2o_gbm_regressor.H2OGBMRegressor"]], "h2oglmregressor (class in maxaimodel.h2o.regression.h2o_glm_regressor)": [[23, "maxaimodel.H2O.regression.h2o_glm_regressor.H2OGLMRegressor"]], "h2oxgbregressor (class in maxaimodel.h2o.regression.h2o_xgb_regressor)": [[23, "maxaimodel.H2O.regression.h2o_xgb_regressor.H2OXGBRegressor"]], "build() (maxaimodel.h2o.regression.h2o_dl_regressor.h2odlregressor method)": [[23, "maxaimodel.H2O.regression.h2o_dl_regressor.H2ODLRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_drf_regressor.h2odrfregressor method)": [[23, "maxaimodel.H2O.regression.h2o_drf_regressor.H2ODRFRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_gam_regressor.h2ogamregressor method)": [[23, "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_gbm_regressor.h2ogbmregressor method)": [[23, "maxaimodel.H2O.regression.h2o_gbm_regressor.H2OGBMRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_glm_regressor.h2oglmregressor method)": [[23, "maxaimodel.H2O.regression.h2o_glm_regressor.H2OGLMRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_xgb_regressor.h2oxgbregressor method)": [[23, "maxaimodel.H2O.regression.h2o_xgb_regressor.H2OXGBRegressor.build"]], "maxaimodel.h2o.regression": [[23, "module-maxaimodel.H2O.regression"]], "maxaimodel.h2o.regression.h2o_dl_regressor": [[23, "module-maxaimodel.H2O.regression.h2o_dl_regressor"]], "maxaimodel.h2o.regression.h2o_drf_regressor": [[23, "module-maxaimodel.H2O.regression.h2o_drf_regressor"]], "maxaimodel.h2o.regression.h2o_gam_regressor": [[23, "module-maxaimodel.H2O.regression.h2o_gam_regressor"]], "maxaimodel.h2o.regression.h2o_gbm_regressor": [[23, "module-maxaimodel.H2O.regression.h2o_gbm_regressor"]], "maxaimodel.h2o.regression.h2o_glm_regressor": [[23, "module-maxaimodel.H2O.regression.h2o_glm_regressor"]], "maxaimodel.h2o.regression.h2o_xgb_regressor": [[23, "module-maxaimodel.H2O.regression.h2o_xgb_regressor"]], "optimise_model() (maxaimodel.h2o.regression.h2o_gam_regressor.h2ogamregressor method)": [[23, "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor.optimise_model"]], "h2oisolationforestmax (class in maxaimodel.h2o.unsupervised.h2o_isolation_forest)": [[24, "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX"]], "build() (maxaimodel.h2o.unsupervised.h2o_isolation_forest.h2oisolationforestmax method)": [[24, "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX.build"]], "maxaimodel.h2o.unsupervised": [[24, "module-maxaimodel.H2O.unsupervised"]], "maxaimodel.h2o.unsupervised.h2o_isolation_forest": [[24, "module-maxaimodel.H2O.unsupervised.h2o_isolation_forest"]], "optimise_model() (maxaimodel.h2o.unsupervised.h2o_isolation_forest.h2oisolationforestmax method)": [[24, "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX.optimise_model"]], "maxaimodel.python": [[25, "module-maxaimodel.python"]], "arima (class in maxaimodel.python.timeseries.arima)": [[26, "maxaimodel.python.timeseries.arima.Arima"]], "fbprophet (class in maxaimodel.python.timeseries.prophet)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet"]], "garch (class in maxaimodel.python.timeseries.garch)": [[26, "maxaimodel.python.timeseries.garch.Garch"]], "nprophet (class in maxaimodel.python.timeseries.neuroprophet)": [[26, "maxaimodel.python.timeseries.neuroprophet.NProphet"]], "build() (maxaimodel.python.timeseries.arima.arima method)": [[26, "maxaimodel.python.timeseries.arima.Arima.build"]], "build() (maxaimodel.python.timeseries.garch.garch method)": [[26, "maxaimodel.python.timeseries.garch.Garch.build"]], "build() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "maxaimodel.python.timeseries.neuroprophet.NProphet.build"]], "build() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.build"]], "fit() (maxaimodel.python.timeseries.arima.arima method)": [[26, "id0"], [26, "maxaimodel.python.timeseries.arima.Arima.fit"]], "fit() (maxaimodel.python.timeseries.garch.garch method)": [[26, "id3"], [26, "maxaimodel.python.timeseries.garch.Garch.fit"]], "fit() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "id6"], [26, "maxaimodel.python.timeseries.neuroprophet.NProphet.fit"]], "fit() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "id10"], [26, "maxaimodel.python.timeseries.prophet.FBProphet.fit"]], "get_event_df() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "id7"], [26, "maxaimodel.python.timeseries.neuroprophet.NProphet.get_event_df"]], "get_event_df() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.get_event_df"]], "get_holiday_df() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.get_holiday_df"]], "get_model_diagnostics() (maxaimodel.python.timeseries.arima.arima method)": [[26, "maxaimodel.python.timeseries.arima.Arima.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.python.timeseries.garch.garch method)": [[26, "maxaimodel.python.timeseries.garch.Garch.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "maxaimodel.python.timeseries.neuroprophet.NProphet.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.get_model_diagnostics"]], "get_params() (maxaimodel.python.timeseries.arima.arima method)": [[26, "maxaimodel.python.timeseries.arima.Arima.get_params"]], "get_params() (maxaimodel.python.timeseries.garch.garch method)": [[26, "maxaimodel.python.timeseries.garch.Garch.get_params"]], "get_params() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "maxaimodel.python.timeseries.neuroprophet.NProphet.get_params"]], "get_params() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.get_params"]], "load() (maxaimodel.python.timeseries.arima.arima method)": [[26, "maxaimodel.python.timeseries.arima.Arima.load"]], "load() (maxaimodel.python.timeseries.garch.garch method)": [[26, "maxaimodel.python.timeseries.garch.Garch.load"]], "load() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "maxaimodel.python.timeseries.neuroprophet.NProphet.load"]], "load() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.load"]], "maxaimodel.python.timeseries": [[26, "module-maxaimodel.python.timeseries"]], "maxaimodel.python.timeseries.arima": [[26, "module-maxaimodel.python.timeseries.arima"]], "maxaimodel.python.timeseries.garch": [[26, "module-maxaimodel.python.timeseries.garch"]], "maxaimodel.python.timeseries.neuroprophet": [[26, "module-maxaimodel.python.timeseries.neuroprophet"]], "maxaimodel.python.timeseries.prophet": [[26, "module-maxaimodel.python.timeseries.prophet"]], "predict() (maxaimodel.python.timeseries.arima.arima method)": [[26, "id1"], [26, "maxaimodel.python.timeseries.arima.Arima.predict"]], "predict() (maxaimodel.python.timeseries.garch.garch method)": [[26, "id4"], [26, "maxaimodel.python.timeseries.garch.Garch.predict"]], "predict() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "id8"], [26, "maxaimodel.python.timeseries.neuroprophet.NProphet.predict"]], "predict() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "id11"], [26, "maxaimodel.python.timeseries.prophet.FBProphet.predict"]], "save() (maxaimodel.python.timeseries.arima.arima method)": [[26, "maxaimodel.python.timeseries.arima.Arima.save"]], "save() (maxaimodel.python.timeseries.garch.garch method)": [[26, "maxaimodel.python.timeseries.garch.Garch.save"]], "save() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[26, "maxaimodel.python.timeseries.neuroprophet.NProphet.save"]], "save() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[26, "maxaimodel.python.timeseries.prophet.FBProphet.save"]], "training_framework (maxaimodel.python.timeseries.arima.arima attribute)": [[26, "id2"], [26, "maxaimodel.python.timeseries.arima.Arima.training_framework"]], "training_framework (maxaimodel.python.timeseries.garch.garch attribute)": [[26, "id5"], [26, "maxaimodel.python.timeseries.garch.Garch.training_framework"]], "training_framework (maxaimodel.python.timeseries.neuroprophet.nprophet attribute)": [[26, "id9"], [26, "maxaimodel.python.timeseries.neuroprophet.NProphet.training_framework"]], "training_framework (maxaimodel.python.timeseries.prophet.fbprophet attribute)": [[26, "id12"], [26, "maxaimodel.python.timeseries.prophet.FBProphet.training_framework"]], "maxaimodel.spark": [[27, "module-maxaimodel.spark"]], "sparkdecisiontreeclassifier (class in maxaimodel.spark.classification.spark_dt)": [[28, "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier"]], "sparkfmclassifier (class in maxaimodel.spark.classification.spark_fmc)": [[28, "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier"]], "sparkgbtclassifier (class in maxaimodel.spark.classification.spark_gbt)": [[28, "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier"]], "sparklinearsvc (class in maxaimodel.spark.classification.spark_svc)": [[28, "maxaimodel.spark.classification.spark_svc.SparkLinearSVC"]], "sparklogisticregression (class in maxaimodel.spark.classification.spark_lr)": [[28, "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression"]], "sparkmultilayerperceptronclassifier (class in maxaimodel.spark.classification.spark_mlp)": [[28, "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier"]], "sparknaivebayes (class in maxaimodel.spark.classification.spark_nb)": [[28, "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes"]], "sparkonevsrest (class in maxaimodel.spark.classification.spark_ovr)": [[28, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest"]], "sparkrfclassifier (class in maxaimodel.spark.classification.spark_rf)": [[28, "maxaimodel.spark.classification.spark_rf.SparkRFClassifier"]], "best_params() (maxaimodel.spark.classification.spark_ovr.sparkonevsrest method)": [[28, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest.best_params"]], "build() (maxaimodel.spark.classification.spark_dt.sparkdecisiontreeclassifier method)": [[28, "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier.build"]], "build() (maxaimodel.spark.classification.spark_fmc.sparkfmclassifier method)": [[28, "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier.build"]], "build() (maxaimodel.spark.classification.spark_gbt.sparkgbtclassifier method)": [[28, "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier.build"]], "build() (maxaimodel.spark.classification.spark_lr.sparklogisticregression method)": [[28, "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression.build"]], "build() (maxaimodel.spark.classification.spark_mlp.sparkmultilayerperceptronclassifier method)": [[28, "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier.build"]], "build() (maxaimodel.spark.classification.spark_nb.sparknaivebayes method)": [[28, "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes.build"]], "build() (maxaimodel.spark.classification.spark_ovr.sparkonevsrest method)": [[28, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest.build"]], "build() (maxaimodel.spark.classification.spark_rf.sparkrfclassifier method)": [[28, "maxaimodel.spark.classification.spark_rf.SparkRFClassifier.build"]], "build() (maxaimodel.spark.classification.spark_svc.sparklinearsvc method)": [[28, "maxaimodel.spark.classification.spark_svc.SparkLinearSVC.build"]], "load() (maxaimodel.spark.classification.spark_dt.sparkdecisiontreeclassifier static method)": [[28, "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier.load"]], "load() (maxaimodel.spark.classification.spark_fmc.sparkfmclassifier static method)": [[28, "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier.load"]], "load() (maxaimodel.spark.classification.spark_gbt.sparkgbtclassifier static method)": [[28, "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier.load"]], "load() (maxaimodel.spark.classification.spark_lr.sparklogisticregression static method)": [[28, "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression.load"]], "load() (maxaimodel.spark.classification.spark_mlp.sparkmultilayerperceptronclassifier static method)": [[28, "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier.load"]], "load() (maxaimodel.spark.classification.spark_nb.sparknaivebayes static method)": [[28, "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes.load"]], "load() (maxaimodel.spark.classification.spark_ovr.sparkonevsrest method)": [[28, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest.load"]], "load() (maxaimodel.spark.classification.spark_rf.sparkrfclassifier static method)": [[28, "maxaimodel.spark.classification.spark_rf.SparkRFClassifier.load"]], "load() (maxaimodel.spark.classification.spark_svc.sparklinearsvc static method)": [[28, "maxaimodel.spark.classification.spark_svc.SparkLinearSVC.load"]], "maxaimodel.spark.classification": [[28, "module-maxaimodel.spark.classification"]], "maxaimodel.spark.classification.spark_dt": [[28, "module-maxaimodel.spark.classification.spark_dt"]], "maxaimodel.spark.classification.spark_fmc": [[28, "module-maxaimodel.spark.classification.spark_fmc"]], "maxaimodel.spark.classification.spark_gbt": [[28, "module-maxaimodel.spark.classification.spark_gbt"]], "maxaimodel.spark.classification.spark_lr": [[28, "module-maxaimodel.spark.classification.spark_lr"]], "maxaimodel.spark.classification.spark_mlp": [[28, "module-maxaimodel.spark.classification.spark_mlp"]], "maxaimodel.spark.classification.spark_nb": [[28, "module-maxaimodel.spark.classification.spark_nb"]], "maxaimodel.spark.classification.spark_ovr": [[28, "module-maxaimodel.spark.classification.spark_ovr"]], "maxaimodel.spark.classification.spark_rf": [[28, "module-maxaimodel.spark.classification.spark_rf"]], "maxaimodel.spark.classification.spark_svc": [[28, "module-maxaimodel.spark.classification.spark_svc"]], "hvt (class in maxaimodel.spark.clustering.spark_hvt)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT"]], "sparkkmeansclustering (class in maxaimodel.spark.clustering.spark_kmeans)": [[29, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering"]], "build() (maxaimodel.spark.clustering.spark_kmeans.sparkkmeansclustering method)": [[29, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering.build"]], "depth_clustering_check() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.depth_clustering_check"]], "fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.fit"]], "kmeans_fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.kmeans_fit"]], "kmeans_predict() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.kmeans_predict"]], "l_clustering_fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.l_clustering_fit"]], "l_clustering_predict() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.l_clustering_predict"]], "lhier_clustering_fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.lhier_clustering_fit"]], "load() (maxaimodel.spark.clustering.spark_kmeans.sparkkmeansclustering method)": [[29, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering.load"]], "maxaimodel.spark.clustering": [[29, "module-maxaimodel.spark.clustering"]], "maxaimodel.spark.clustering.spark_hvt": [[29, "module-maxaimodel.spark.clustering.spark_hvt"]], "maxaimodel.spark.clustering.spark_kmeans": [[29, "module-maxaimodel.spark.clustering.spark_kmeans"]], "optimise_k() (maxaimodel.spark.clustering.spark_kmeans.sparkkmeansclustering method)": [[29, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering.optimise_k"]], "predict() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[29, "maxaimodel.spark.clustering.spark_hvt.HVT.predict"]], "sparkalsrecommender (class in maxaimodel.spark.recommendation.spark_als)": [[30, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender"]], "build() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[30, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.build"]], "load() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[30, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.load"]], "maxaimodel.spark.recommendation": [[30, "module-maxaimodel.spark.recommendation"]], "maxaimodel.spark.recommendation.spark_als": [[30, "module-maxaimodel.spark.recommendation.spark_als"]], "optimise_model_without_cross_validator() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[30, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.optimise_model_without_cross_validator"]], "save() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[30, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.save"]], "sparkaftsurvivalregressor (class in maxaimodel.spark.regression.spark_aft_survival_regression)": [[31, "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor"]], "sparkdtregressor (class in maxaimodel.spark.regression.spark_dt_regression)": [[31, "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor"]], "sparkfmregressor (class in maxaimodel.spark.regression.spark_fm_regression)": [[31, "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor"]], "sparkgbtregressor (class in maxaimodel.spark.regression.spark_gbt_regression)": [[31, "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor"]], "sparkglregressor (class in maxaimodel.spark.regression.spark_gl_regression)": [[31, "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor"]], "sparkisotonicregressor (class in maxaimodel.spark.regression.spark_isotonic_regression)": [[31, "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor"]], "sparklinearregressor (class in maxaimodel.spark.regression.spark_linear_regression)": [[31, "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor"]], "sparkrfregressor (class in maxaimodel.spark.regression.spark_rf_regression)": [[31, "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor"]], "build() (maxaimodel.spark.regression.spark_aft_survival_regression.sparkaftsurvivalregressor method)": [[31, "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor.build"]], "build() (maxaimodel.spark.regression.spark_dt_regression.sparkdtregressor method)": [[31, "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor.build"]], "build() (maxaimodel.spark.regression.spark_fm_regression.sparkfmregressor method)": [[31, "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor.build"]], "build() (maxaimodel.spark.regression.spark_gbt_regression.sparkgbtregressor method)": [[31, "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor.build"]], "build() (maxaimodel.spark.regression.spark_gl_regression.sparkglregressor method)": [[31, "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor.build"]], "build() (maxaimodel.spark.regression.spark_isotonic_regression.sparkisotonicregressor method)": [[31, "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor.build"]], "build() (maxaimodel.spark.regression.spark_linear_regression.sparklinearregressor method)": [[31, "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor.build"]], "build() (maxaimodel.spark.regression.spark_rf_regression.sparkrfregressor method)": [[31, "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor.build"]], "load() (maxaimodel.spark.regression.spark_aft_survival_regression.sparkaftsurvivalregressor method)": [[31, "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor.load"]], "load() (maxaimodel.spark.regression.spark_dt_regression.sparkdtregressor method)": [[31, "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor.load"]], "load() (maxaimodel.spark.regression.spark_fm_regression.sparkfmregressor method)": [[31, "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor.load"]], "load() (maxaimodel.spark.regression.spark_gbt_regression.sparkgbtregressor method)": [[31, "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor.load"]], "load() (maxaimodel.spark.regression.spark_gl_regression.sparkglregressor method)": [[31, "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor.load"]], "load() (maxaimodel.spark.regression.spark_isotonic_regression.sparkisotonicregressor method)": [[31, "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor.load"]], "load() (maxaimodel.spark.regression.spark_linear_regression.sparklinearregressor method)": [[31, "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor.load"]], "load() (maxaimodel.spark.regression.spark_rf_regression.sparkrfregressor method)": [[31, "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor.load"]], "maxaimodel.spark.regression": [[31, "module-maxaimodel.spark.regression"]], "maxaimodel.spark.regression.spark_aft_survival_regression": [[31, "module-maxaimodel.spark.regression.spark_aft_survival_regression"]], "maxaimodel.spark.regression.spark_dt_regression": [[31, "module-maxaimodel.spark.regression.spark_dt_regression"]], "maxaimodel.spark.regression.spark_fm_regression": [[31, "module-maxaimodel.spark.regression.spark_fm_regression"]], "maxaimodel.spark.regression.spark_gbt_regression": [[31, "module-maxaimodel.spark.regression.spark_gbt_regression"]], "maxaimodel.spark.regression.spark_gl_regression": [[31, "module-maxaimodel.spark.regression.spark_gl_regression"]], "maxaimodel.spark.regression.spark_isotonic_regression": [[31, "module-maxaimodel.spark.regression.spark_isotonic_regression"]], "maxaimodel.spark.regression.spark_linear_regression": [[31, "module-maxaimodel.spark.regression.spark_linear_regression"]], "maxaimodel.spark.regression.spark_rf_regression": [[31, "module-maxaimodel.spark.regression.spark_rf_regression"]], "dataprep (class in maxaimodel.spark.timeseries.xgb_ts)": [[32, "maxaimodel.spark.timeseries.xgb_ts.DataPrep"]], "sparktsforecaster (class in maxaimodel.spark.timeseries.spark_ts)": [[32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster"]], "xgbforecaster (class in maxaimodel.spark.timeseries.xgb_ts)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster"]], "build() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.build"]], "build() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.build"]], "fit() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "id0"], [32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.fit"]], "fit() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.fit"]], "get_model_diagnostics() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.get_model_diagnostics"]], "get_params() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "id7"], [32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.get_params"]], "get_params() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.get_params"]], "increment_datetime() (maxaimodel.spark.timeseries.xgb_ts.dataprep static method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.DataPrep.increment_datetime"]], "infer_frequency() (maxaimodel.spark.timeseries.xgb_ts.dataprep static method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.DataPrep.infer_frequency"]], "load() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.load"]], "load() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.load"]], "maxaimodel.spark.timeseries": [[32, "module-maxaimodel.spark.timeseries"]], "maxaimodel.spark.timeseries.spark_ts": [[32, "module-maxaimodel.spark.timeseries.spark_ts"]], "maxaimodel.spark.timeseries.xgb_ts": [[32, "module-maxaimodel.spark.timeseries.xgb_ts"]], "predict() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "id8"], [32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.predict"]], "predict() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.predict"]], "prepare_data() (maxaimodel.spark.timeseries.xgb_ts.dataprep static method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.DataPrep.prepare_data"]], "save() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[32, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.save"]], "save() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[32, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.save"]], "binary_classifier_transformed_result() (in module maxairesources.conftest)": [[33, "maxairesources.conftest.binary_classifier_transformed_result"]], "maxairesources": [[33, "module-maxairesources"]], "maxairesources.conftest": [[33, "module-maxairesources.conftest"]], "multiclass_classifier_transformed_result() (in module maxairesources.conftest)": [[33, "maxairesources.conftest.multiclass_classifier_transformed_result"]], "normal_regressor_transformed_result() (in module maxairesources.conftest)": [[33, "maxairesources.conftest.normal_regressor_transformed_result"]], "spark_session() (in module maxairesources.conftest)": [[33, "maxairesources.conftest.spark_session"]], "noiseremoval (class in maxairesources.cleaning.noiseremoval)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval"]], "convert_timeformat() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.convert_timeformat"]], "determine_outlier_thersholds_std() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.determine_outlier_thersholds_std"]], "determine_outlier_thresholds_iqr() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.determine_outlier_thresholds_iqr"]], "drop_duplicates() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.drop_duplicates"]], "impute_null() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.impute_null"]], "maxairesources.cleaning": [[34, "module-maxairesources.cleaning"]], "maxairesources.cleaning.noiseremoval": [[34, "module-maxairesources.cleaning.NoiseRemoval"]], "outlier_detect() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.outlier_detect"]], "read_config() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.read_config"]], "remove_outlier() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[34, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.remove_outlier"]], "column_rename() (in module maxairesources.customer360.utility)": [[35, "maxairesources.customer360.utility.column_rename"]], "create_features() (in module maxairesources.customer360.utility)": [[35, "maxairesources.customer360.utility.create_features"]], "maxairesources.customer360": [[35, "module-maxairesources.customer360"]], "maxairesources.customer360.utility": [[35, "module-maxairesources.customer360.utility"]], "parse_arguments() (in module maxairesources.customer360.utility)": [[35, "maxairesources.customer360.utility.parse_arguments"]], "prepare_agg_arguments() (in module maxairesources.customer360.utility)": [[35, "maxairesources.customer360.utility.prepare_agg_arguments"]], "todatetype() (in module maxairesources.customer360.utility)": [[35, "maxairesources.customer360.utility.toDateType"]], "analysisbase (class in maxairesources.datachecks.analysis_base)": [[36, "maxairesources.datachecks.analysis_base.AnalysisBase"]], "sparkdataframeanalyser (class in maxairesources.datachecks.dataframe_analysis_spark)": [[36, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser"]], "compare_reports() (maxairesources.datachecks.analysis_base.analysisbase method)": [[36, "maxairesources.datachecks.analysis_base.AnalysisBase.compare_reports"]], "compare_reports() (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser method)": [[36, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.compare_reports"]], "default_behaviours (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser attribute)": [[36, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.default_behaviours"]], "default_thresholds (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser attribute)": [[36, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.default_thresholds"]], "generate_data_health_report() (maxairesources.datachecks.analysis_base.analysisbase method)": [[36, "maxairesources.datachecks.analysis_base.AnalysisBase.generate_data_health_report"]], "generate_data_health_report() (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser method)": [[36, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.generate_data_health_report"]], "get_column_types() (maxairesources.datachecks.analysis_base.analysisbase method)": [[36, "maxairesources.datachecks.analysis_base.AnalysisBase.get_column_types"]], "maxairesources.datachecks": [[36, "module-maxairesources.datachecks"]], "maxairesources.datachecks.analysis_base": [[36, "module-maxairesources.datachecks.analysis_base"]], "maxairesources.datachecks.dataframe_analysis_spark": [[36, "module-maxairesources.datachecks.dataframe_analysis_spark"]], "save_analysis_report() (maxairesources.datachecks.analysis_base.analysisbase method)": [[36, "maxairesources.datachecks.analysis_base.AnalysisBase.save_analysis_report"]], "validate_report() (maxairesources.datachecks.analysis_base.analysisbase method)": [[36, "maxairesources.datachecks.analysis_base.AnalysisBase.validate_report"]], "validate_report() (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser method)": [[36, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.validate_report"]], "maxairesources.datachecks.test": [[37, "module-maxairesources.datachecks.test"]], "maxairesources.datachecks.test.conftest": [[37, "module-maxairesources.datachecks.test.conftest"]], "maxairesources.datachecks.test.test_dataframe_analysis_spark": [[37, "module-maxairesources.datachecks.test.test_dataframe_analysis_spark"]], "sample_feast_dataframe_for_analysis() (in module maxairesources.datachecks.test.conftest)": [[37, "maxairesources.datachecks.test.conftest.sample_feast_dataframe_for_analysis"]], "test_binary_classification_report_spark() (in module maxairesources.datachecks.test.test_dataframe_analysis_spark)": [[37, "maxairesources.datachecks.test.test_dataframe_analysis_spark.test_binary_classification_report_spark"]], "ensemble (class in maxairesources.ensemble.ensemble)": [[38, "maxairesources.ensemble.ensemble.Ensemble"]], "votingclassifier() (maxairesources.ensemble.ensemble.ensemble method)": [[38, "maxairesources.ensemble.ensemble.Ensemble.VotingClassifier"]], "votingregressor() (maxairesources.ensemble.ensemble.ensemble method)": [[38, "maxairesources.ensemble.ensemble.Ensemble.VotingRegressor"]], "maxairesources.ensemble": [[38, "module-maxairesources.ensemble"]], "maxairesources.ensemble.ensemble": [[38, "module-maxairesources.ensemble.ensemble"]], "predict() (maxairesources.ensemble.ensemble.ensemble method)": [[38, "maxairesources.ensemble.ensemble.Ensemble.predict"]], "classifierevaluator (class in maxairesources.eval.classifier_evaluator_spark)": [[39, "maxairesources.eval.classifier_evaluator_spark.ClassifierEvaluator"]], "deepcheckmodelwrapper (class in maxairesources.eval.model_evaluator)": [[39, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper"]], "modelevaluator (class in maxairesources.eval.model_evaluator)": [[39, "maxairesources.eval.model_evaluator.ModelEvaluator"]], "regressorevaluator (class in maxairesources.eval.regressor_evaluator_spark)": [[39, "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator"]], "evaluate() (maxairesources.eval.model_evaluator.modelevaluator method)": [[39, "maxairesources.eval.model_evaluator.ModelEvaluator.evaluate"]], "feature_importances_ (maxairesources.eval.model_evaluator.deepcheckmodelwrapper property)": [[39, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper.feature_importances_"]], "general_regression_report_spark() (maxairesources.eval.regressor_evaluator_spark.regressorevaluator method)": [[39, "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator.general_regression_report_spark"]], "get_evaluation_report() (maxairesources.eval.classifier_evaluator_spark.classifierevaluator method)": [[39, "maxairesources.eval.classifier_evaluator_spark.ClassifierEvaluator.get_evaluation_report"]], "get_evaluation_report() (maxairesources.eval.regressor_evaluator_spark.regressorevaluator method)": [[39, "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator.get_evaluation_report"]], "maxairesources.eval": [[39, "module-maxairesources.eval"]], "maxairesources.eval.classifier_evaluator_spark": [[39, "module-maxairesources.eval.classifier_evaluator_spark"]], "maxairesources.eval.model_evaluator": [[39, "module-maxairesources.eval.model_evaluator"]], "maxairesources.eval.regressor_evaluator_spark": [[39, "module-maxairesources.eval.regressor_evaluator_spark"]], "predict() (maxairesources.eval.model_evaluator.deepcheckmodelwrapper method)": [[39, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper.predict"]], "predict_proba() (maxairesources.eval.model_evaluator.deepcheckmodelwrapper method)": [[39, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper.predict_proba"]], "datasourcenotdefinederror": [[40, "maxairesources.exception.exceptions.DataSourceNotDefinedError"]], "featuretransformexception": [[40, "maxairesources.exception.exceptions.FeatureTransformException"]], "maxaiexception": [[40, "maxairesources.exception.exceptions.MaxAIException"]], "missingenvironmentvariable": [[40, "maxairesources.exception.exceptions.MissingEnvironmentVariable"]], "modelloadexception": [[40, "maxairesources.exception.exceptions.ModelLoadException"]], "modelnotimplemented": [[40, "maxairesources.exception.exceptions.ModelNotImplemented"]], "modelsaveexception": [[40, "maxairesources.exception.exceptions.ModelSaveException"]], "modeltrainexception": [[40, "maxairesources.exception.exceptions.ModelTrainException"]], "modeltypenotdefinedexception": [[40, "maxairesources.exception.exceptions.ModelTypeNotDefinedException"]], "portinformationnotfounderror": [[40, "maxairesources.exception.exceptions.PortInformationNotFoundError"]], "unknownoperationmode": [[40, "maxairesources.exception.exceptions.UnknownOperationMode"]], "geterrormessage() (maxairesources.exception.exceptions.maxaiexception method)": [[40, "maxairesources.exception.exceptions.MaxAIException.getErrorMessage"]], "maxairesources.exception": [[40, "module-maxairesources.exception"]], "maxairesources.exception.exceptions": [[40, "module-maxairesources.exception.exceptions"]], "modelfactory (class in maxairesources.factory.model_factory)": [[41, "maxairesources.factory.model_factory.ModelFactory"]], "get_model() (maxairesources.factory.model_factory.modelfactory class method)": [[41, "maxairesources.factory.model_factory.ModelFactory.get_model"]], "import_submodules() (in module maxairesources.factory)": [[41, "maxairesources.factory.import_submodules"]], "maxairesources.factory": [[41, "module-maxairesources.factory"]], "maxairesources.factory.model_factory": [[41, "module-maxairesources.factory.model_factory"]], "register_model() (maxairesources.factory.model_factory.modelfactory class method)": [[41, "maxairesources.factory.model_factory.ModelFactory.register_model"]], "customadapter (class in maxairesources.logging.logger)": [[42, "maxairesources.logging.logger.CustomAdapter"]], "get_file_handler() (in module maxairesources.logging.logger)": [[42, "maxairesources.logging.logger.get_file_handler"]], "get_logger() (in module maxairesources.logging.logger)": [[42, "maxairesources.logging.logger.get_logger"]], "get_stream_handler() (in module maxairesources.logging.logger)": [[42, "maxairesources.logging.logger.get_stream_handler"]], "maxairesources.logging": [[42, "module-maxairesources.logging"]], "maxairesources.logging.logger": [[42, "module-maxairesources.logging.logger"]], "process() (maxairesources.logging.logger.customadapter method)": [[42, "maxairesources.logging.logger.CustomAdapter.process"]], "modelapprover (class in maxairesources.model_approval.model_approver_spark)": [[43, "maxairesources.model_approval.model_approver_spark.ModelApprover"]], "is_above_threshold() (maxairesources.model_approval.model_approver_spark.modelapprover method)": [[43, "maxairesources.model_approval.model_approver_spark.ModelApprover.is_above_threshold"]], "maxairesources.model_approval": [[43, "module-maxairesources.model_approval"]], "maxairesources.model_approval.model_approver_spark": [[43, "module-maxairesources.model_approval.model_approver_spark"]], "maxairesources.optimizer": [[44, "module-maxairesources.optimizer"]], "sparkpipeline (class in maxairesources.pipeline.spark_pipeline)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline"]], "sparktransformerfactory (class in maxairesources.pipeline.pipeline_factory)": [[45, "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory"]], "build() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.build"]], "build_multiple() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.build_multiple"]], "fit() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.fit"]], "fit_multiple() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.fit_multiple"]], "get_params() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.get_params"]], "get_transformer() (maxairesources.pipeline.pipeline_factory.sparktransformerfactory method)": [[45, "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory.get_transformer"]], "load() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.load"]], "maxairesources.pipeline": [[45, "module-maxairesources.pipeline"]], "maxairesources.pipeline.pipeline_factory": [[45, "module-maxairesources.pipeline.pipeline_factory"]], "maxairesources.pipeline.spark_pipeline": [[45, "module-maxairesources.pipeline.spark_pipeline"]], "register_transformer() (maxairesources.pipeline.pipeline_factory.sparktransformerfactory method)": [[45, "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory.register_transformer"]], "save() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.save"]], "training_framework (maxairesources.pipeline.spark_pipeline.sparkpipeline attribute)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.training_framework"]], "transform() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[45, "maxairesources.pipeline.spark_pipeline.SparkPipeline.transform"]], "adls (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.ADLS"]], "azure (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.AZURE"]], "cassandra (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.CASSANDRA"]], "dataframe (class in maxairesources.utilities.data_connectors)": [[46, "maxairesources.utilities.data_connectors.DataFrame"]], "encryption (class in maxairesources.utilities.encryption)": [[46, "maxairesources.utilities.encryption.Encryption"]], "feast (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.FEAST"]], "gs (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.GS"]], "iceberg (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.ICEBERG"]], "maxaidataframe (class in maxairesources.utilities.data_connectors)": [[46, "maxairesources.utilities.data_connectors.MaxAIDataFrame"]], "multitrain (class in maxairesources.utilities.multi_train)": [[46, "maxairesources.utilities.multi_train.MultiTrain"]], "preprocessing (class in maxairesources.utilities.preprocessing)": [[46, "maxairesources.utilities.preprocessing.Preprocessing"]], "s3 (maxairesources.utilities.data_connectors.dataframe attribute)": [[46, "maxairesources.utilities.data_connectors.DataFrame.S3"]], "sparkdistributor (class in maxairesources.utilities.spark_distributor)": [[46, "maxairesources.utilities.spark_distributor.SparkDistributor"]], "traintestsplit (class in maxairesources.utilities.train_test_split)": [[46, "maxairesources.utilities.train_test_split.TrainTestSplit"]], "aggregate_transactional_data() (maxairesources.utilities.preprocessing.preprocessing method)": [[46, "maxairesources.utilities.preprocessing.Preprocessing.aggregate_transactional_data"]], "decrypt() (maxairesources.utilities.encryption.encryption static method)": [[46, "maxairesources.utilities.encryption.Encryption.decrypt"]], "decrypt_columns() (maxairesources.utilities.encryption.encryption static method)": [[46, "maxairesources.utilities.encryption.Encryption.decrypt_columns"]], "encrypt() (maxairesources.utilities.encryption.encryption static method)": [[46, "maxairesources.utilities.encryption.Encryption.encrypt"]], "encrypt_columns() (maxairesources.utilities.encryption.encryption static method)": [[46, "maxairesources.utilities.encryption.Encryption.encrypt_columns"]], "get() (maxairesources.utilities.data_connectors.dataframe method)": [[46, "maxairesources.utilities.data_connectors.DataFrame.get"]], "get_data_for_a_port() (maxairesources.utilities.data_connectors.dataframe static method)": [[46, "maxairesources.utilities.data_connectors.DataFrame.get_data_for_a_port"]], "get_run_id_timestamp() (in module maxairesources.utilities.misc)": [[46, "maxairesources.utilities.misc.get_run_id_timestamp"]], "maxairesources.utilities": [[46, "module-maxairesources.utilities"]], "maxairesources.utilities.common_utils": [[46, "module-maxairesources.utilities.common_utils"]], "maxairesources.utilities.data_connectors": [[46, "module-maxairesources.utilities.data_connectors"]], "maxairesources.utilities.encryption": [[46, "module-maxairesources.utilities.encryption"]], "maxairesources.utilities.misc": [[46, "module-maxairesources.utilities.misc"]], "maxairesources.utilities.multi_train": [[46, "module-maxairesources.utilities.multi_train"]], "maxairesources.utilities.preprocessing": [[46, "module-maxairesources.utilities.preprocessing"]], "maxairesources.utilities.spark_distributor": [[46, "module-maxairesources.utilities.spark_distributor"]], "maxairesources.utilities.train_test_split": [[46, "module-maxairesources.utilities.train_test_split"]], "overwrite_dict() (in module maxairesources.utilities.misc)": [[46, "maxairesources.utilities.misc.overwrite_dict"]], "pandas_to_spark_wrapper() (maxairesources.utilities.spark_distributor.sparkdistributor method)": [[46, "maxairesources.utilities.spark_distributor.SparkDistributor.pandas_to_spark_wrapper"]], "predict() (maxairesources.utilities.multi_train.multitrain method)": [[46, "maxairesources.utilities.multi_train.MultiTrain.predict"]], "random_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[46, "maxairesources.utilities.train_test_split.TrainTestSplit.random_split"]], "stratified_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[46, "maxairesources.utilities.train_test_split.TrainTestSplit.stratified_split"]], "time_series_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[46, "maxairesources.utilities.train_test_split.TrainTestSplit.time_series_split"]], "train_models() (maxairesources.utilities.multi_train.multitrain method)": [[46, "maxairesources.utilities.multi_train.MultiTrain.train_models"]], "train_test_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[46, "maxairesources.utilities.train_test_split.TrainTestSplit.train_test_split"]], "trained_models (maxairesources.utilities.multi_train.multitrain property)": [[46, "maxairesources.utilities.multi_train.MultiTrain.trained_models"]], "write() (maxairesources.utilities.data_connectors.dataframe method)": [[46, "maxairesources.utilities.data_connectors.DataFrame.write"]], "write_file_to_s3() (in module maxairesources.utilities.common_utils)": [[46, "maxairesources.utilities.common_utils.write_file_to_s3"]], "testdataconnector (class in maxairesources.utilities.tests.test_data_connector)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector"]], "testmultitrain (class in maxairesources.utilities.tests.test_multi_train)": [[47, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain"]], "testsparkdistributor (class in maxairesources.utilities.tests.test_spark_distributor)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor"]], "testtraintestsplit (class in maxairesources.utilities.tests.test_train_test_split)": [[47, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit"]], "get_function() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.get_function"]], "load_sample_data() (maxairesources.utilities.tests.test_data_connector.testdataconnector class method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.load_sample_data"]], "load_sample_data() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.load_sample_data"]], "load_sample_data() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit class method)": [[47, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.load_sample_data"]], "maxairesources.utilities.tests": [[47, "module-maxairesources.utilities.tests"]], "maxairesources.utilities.tests.test_data_connector": [[47, "module-maxairesources.utilities.tests.test_data_connector"]], "maxairesources.utilities.tests.test_multi_train": [[47, "module-maxairesources.utilities.tests.test_multi_train"]], "maxairesources.utilities.tests.test_spark_distributor": [[47, "module-maxairesources.utilities.tests.test_spark_distributor"]], "maxairesources.utilities.tests.test_train_test_split": [[47, "module-maxairesources.utilities.tests.test_train_test_split"]], "setup_class() (maxairesources.utilities.tests.test_data_connector.testdataconnector class method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.setup_class"]], "setup_class() (maxairesources.utilities.tests.test_multi_train.testmultitrain class method)": [[47, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.setup_class"]], "setup_class() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.setup_class"]], "setup_class() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit class method)": [[47, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.setup_class"]], "teardown_class() (maxairesources.utilities.tests.test_data_connector.testdataconnector class method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.teardown_class"]], "teardown_class() (maxairesources.utilities.tests.test_multi_train.testmultitrain class method)": [[47, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.teardown_class"]], "teardown_class() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.teardown_class"]], "teardown_class() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit class method)": [[47, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.teardown_class"]], "test_function_1_test1() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor method)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.test_function_1_test1"]], "test_function_1_test2() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor method)": [[47, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.test_function_1_test2"]], "test_predict() (maxairesources.utilities.tests.test_multi_train.testmultitrain method)": [[47, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.test_predict"]], "test_random_split() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit method)": [[47, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.test_random_split"]], "test_read_encrypytion_pandas_csv() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_read_encrypytion_pandas_csv"]], "test_read_encrypytion_spark_parquet() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_read_encrypytion_spark_parquet"]], "test_read_without_encryption() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_read_without_encryption"]], "test_stratify_split() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit method)": [[47, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.test_stratify_split"]], "test_train_models() (maxairesources.utilities.tests.test_multi_train.testmultitrain method)": [[47, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.test_train_models"]], "test_trained_models() (maxairesources.utilities.tests.test_multi_train.testmultitrain method)": [[47, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.test_trained_models"]], "test_write_encrypytion_pandas_csv() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_write_encrypytion_pandas_csv"]], "test_write_encrypytion_spark_parquet() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_write_encrypytion_spark_parquet"]], "test_write_without_encryption() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[47, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_write_without_encryption"]]}})