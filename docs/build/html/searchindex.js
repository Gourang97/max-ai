Search.setIndex({"docnames": [".ipynb_checkpoints/index-checkpoint", ".ipynb_checkpoints/maxaibase-checkpoint", ".ipynb_checkpoints/maxaifeaturization.aggregation-checkpoint", ".ipynb_checkpoints/modules-checkpoint", "api", "index", "maxaibase", "maxaibase.ensemble", "maxaibase.evaluation", "maxaibase.featurization", "maxaibase.model", "maxaibase.model.H2O", "maxaibase.model.spark", "maxaidatahandling", "maxaifeaturization", "maxaifeaturization.aggregation", "maxaifeaturization.featuretools", "maxaifeaturization.selection", "maxaifeaturization.timeseries", "maxaifeaturization.transformation", "maxaimetadata", "maxaimodel", "maxaimodel.H2O", "maxaimodel.H2O.classification", "maxaimodel.H2O.classification.test", "maxaimodel.H2O.clustering", "maxaimodel.H2O.clustering.test", "maxaimodel.H2O.regression", "maxaimodel.H2O.unsupervised", "maxaimodel.H2O.unsupervised.test", "maxaimodel.python", "maxaimodel.python.timeseries", "maxaimodel.spark", "maxaimodel.spark.classification", "maxaimodel.spark.clustering", "maxaimodel.spark.recommendation", "maxaimodel.spark.regression", "maxaimodel.spark.timeseries", "maxairesources", "maxairesources.cleaning", "maxairesources.customer360", "maxairesources.datachecks", "maxairesources.datachecks.test", "maxairesources.ensemble", "maxairesources.eval", "maxairesources.exception", "maxairesources.factory", "maxairesources.logging", "maxairesources.model_approval", "maxairesources.optimizer", "maxairesources.pipeline", "maxairesources.utilities", "maxairesources.utilities.tests", "modules", "pdoc_setup", "setup"], "filenames": [".ipynb_checkpoints/index-checkpoint.rst", ".ipynb_checkpoints/maxaibase-checkpoint.rst", ".ipynb_checkpoints/maxaifeaturization.aggregation-checkpoint.rst", ".ipynb_checkpoints/modules-checkpoint.rst", "api.rst", "index.rst", "maxaibase.rst", "maxaibase.ensemble.rst", "maxaibase.evaluation.rst", "maxaibase.featurization.rst", "maxaibase.model.rst", "maxaibase.model.H2O.rst", "maxaibase.model.spark.rst", "maxaidatahandling.rst", "maxaifeaturization.rst", "maxaifeaturization.aggregation.rst", "maxaifeaturization.featuretools.rst", "maxaifeaturization.selection.rst", "maxaifeaturization.timeseries.rst", "maxaifeaturization.transformation.rst", "maxaimetadata.rst", "maxaimodel.rst", "maxaimodel.H2O.rst", "maxaimodel.H2O.classification.rst", "maxaimodel.H2O.classification.test.rst", "maxaimodel.H2O.clustering.rst", "maxaimodel.H2O.clustering.test.rst", "maxaimodel.H2O.regression.rst", "maxaimodel.H2O.unsupervised.rst", "maxaimodel.H2O.unsupervised.test.rst", "maxaimodel.python.rst", "maxaimodel.python.timeseries.rst", "maxaimodel.spark.rst", "maxaimodel.spark.classification.rst", "maxaimodel.spark.clustering.rst", "maxaimodel.spark.recommendation.rst", "maxaimodel.spark.regression.rst", "maxaimodel.spark.timeseries.rst", "maxairesources.rst", "maxairesources.cleaning.rst", "maxairesources.customer360.rst", "maxairesources.datachecks.rst", "maxairesources.datachecks.test.rst", "maxairesources.ensemble.rst", "maxairesources.eval.rst", "maxairesources.exception.rst", "maxairesources.factory.rst", "maxairesources.logging.rst", "maxairesources.model_approval.rst", "maxairesources.optimizer.rst", "maxairesources.pipeline.rst", "maxairesources.utilities.rst", "maxairesources.utilities.tests.rst", "modules.rst", "pdoc_setup.rst", "setup.rst"], "titles": ["Welcome to Max.AI\u2019s documentation!", "maxaibase package", "maxaifeaturization.aggregation package", "max.ai.ds.core", "API", "Welcome to Max.AI\u2019s documentation!", "maxaibase package", "maxaibase.ensemble package", "maxaibase.evaluation package", "maxaibase.featurization package", "maxaibase.model package", "maxaibase.model.H2O package", "maxaibase.model.spark package", "maxaidatahandling package", "maxaifeaturization package", "maxaifeaturization.aggregation package", "maxaifeaturization.featuretools package", "maxaifeaturization.selection package", "maxaifeaturization.timeseries package", "maxaifeaturization.transformation package", "maxaimetadata package", "maxaimodel package", "maxaimodel.H2O package", "maxaimodel.H2O.classification package", "maxaimodel.H2O.classification.test package", "maxaimodel.H2O.clustering package", "maxaimodel.H2O.clustering.test package", "maxaimodel.H2O.regression package", "maxaimodel.H2O.unsupervised package", "maxaimodel.H2O.unsupervised.test package", "maxaimodel.python package", "maxaimodel.python.timeseries package", "maxaimodel.spark package", "maxaimodel.spark.classification package", "maxaimodel.spark.clustering package", "maxaimodel.spark.recommendation package", "maxaimodel.spark.regression package", "maxaimodel.spark.timeseries package", "maxairesources package", "maxairesources.cleaning package", "maxairesources.customer360 package", "maxairesources.datachecks package", "maxairesources.datachecks.test package", "maxairesources.ensemble package", "maxairesources.eval package", "maxairesources.exception package", "maxairesources.factory package", "maxairesources.logging package", "maxairesources.model_approval package", "maxairesources.optimizer package", "maxairesources.pipeline package", "maxairesources.utilities package", "maxairesources.utilities.tests package", "max.ai.ds.core", "pdoc_setup module", "setup module"], "terms": {"provid": [0, 5, 40, 43], "readi": [0, 5], "list": [0, 2, 5, 11, 15, 16, 17, 19, 31, 33, 36, 39, 40, 41, 43, 44, 51], "util": [0, 5, 38, 53], "creat": [0, 5, 11, 12, 19, 50], "end": [0, 5], "ml": [0, 5, 12, 17, 33, 36], "pipelin": [0, 5, 38, 41, 53], "solv": [0, 5], "complex": [0, 5], "busi": [0, 5], "problem": [0, 5], "us": [0, 5, 11, 12, 13, 17, 19, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 50, 51], "state": [0, 5], "art": [0, 5], "modul": [0, 5, 53], "come": [0, 5, 41], "equip": [0, 5], "store": [0, 5, 8, 50], "process": [0, 5, 13, 38, 39, 44, 47, 51], "transform": [0, 5, 14, 16, 17, 34, 38, 50, 53], "data": [0, 5, 11, 12, 13, 17, 19, 20, 31, 33, 34, 36, 37, 41, 43, 44, 45, 50, 51], "autom": [0, 5, 16], "featur": [0, 2, 5, 6, 15, 16, 17, 19, 33, 36, 44, 45, 53], "engineeri": [0, 5], "host": [0, 5], "model": [0, 5, 6, 8, 13, 14, 17, 20, 27, 28, 31, 33, 34, 35, 36, 37, 44, 45, 46, 48, 51, 53], "classif": [0, 5, 11, 12, 21, 22, 32], "cluster": [0, 5, 12, 21, 22, 32], "regress": [0, 5, 11, 12, 21, 22, 32, 33, 44], "time": [0, 5, 18, 31, 37, 41, 51], "seri": [0, 5, 18, 31, 37, 41, 51], "much": [0, 5], "more": [0, 5, 13], "you": [0, 5, 47], "can": [0, 5, 13, 47], "refer": [0, 5, 13, 31, 33, 36, 37, 44], "how": [0, 5], "quickstart": [0, 5], "instal": [0, 5], "your": [0, 5, 47], "project": [0, 5, 20], "index": [0, 5, 16, 17, 19], "search": [0, 5, 11, 27, 28, 31], "page": [0, 5], "class": [2, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52], "df": [2, 13, 15, 18, 19, 31, 34, 37, 39, 40, 41, 51], "argument": [2, 13, 15, 19, 40, 47, 50, 51], "sourc": [2, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52], "base": [2, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52], "object": [2, 12, 13, 15, 16, 17, 18, 19, 20, 24, 26, 29, 34, 37, 39, 41, 43, 44, 46, 48, 50, 51, 52], "perform": [2, 8, 15, 16, 18, 19, 31, 33, 34, 41, 48, 51], "oper": [2, 15, 18, 19, 40, 51], "pass": [2, 13, 15, 19, 44, 47, 51], "datafram": [2, 11, 12, 13, 15, 16, 17, 18, 19, 31, 38, 39, 41, 44, 48, 50, 51], "paramet": [2, 11, 12, 13, 15, 16, 17, 18, 19, 31, 33, 34, 35, 36, 37, 40, 51], "spark": [2, 5, 6, 10, 11, 13, 15, 16, 17, 18, 19, 21, 31, 41, 44, 50, 51, 53], "which": [2, 11, 12, 13, 15, 17, 18, 19, 31, 33, 34, 35, 39, 40, 41, 44, 50, 51], "ar": [2, 15, 19, 31, 34, 39, 45, 48, 51], "dict": [2, 8, 11, 12, 13, 15, 17, 19, 20, 31, 33, 36, 37, 40, 41, 44, 46, 48, 51], "dictionari": [2, 8, 11, 12, 15, 19, 31, 33, 36, 40, 41, 51], "contain": [2, 11, 12, 15, 33, 51], "feature_nam": [2, 15], "output_column_nam": [2, 15, 19], "kei": [2, 13, 15, 20, 41, 51], "int": [2, 12, 15, 17, 18, 31, 40, 41, 44, 51], "sum": [2, 15, 43], "averag": [2, 15, 43], "etc": [2, 15, 31], "avail": [2, 15, 17, 31], "1": [2, 13, 15, 18, 19, 33, 36, 37, 41, 51], "2": [2, 13, 15, 18, 19, 33, 36, 43, 44, 51], "mean": [2, 15, 39], "3": [2, 15, 19, 33, 41, 51], "stddev": [2, 15, 41], "4": [2, 12, 15, 19, 33, 36], "max": [2, 13, 15, 20], "5": [2, 15, 19, 33, 36, 43], "min": [2, 15], "6": [2, 15, 19, 33, 36, 40], "count": [2, 15], "7": [2, 15, 19, 33, 40], "count_distinct": [2, 15], "8": [2, 15, 19, 33, 36, 43, 51], "varianc": [2, 15], "9": [2, 15, 19, 33], "percentil": [2, 15], "10": [2, 15, 17, 19, 31, 33, 36, 37, 41, 47], "quantil": [2, 15], "11": [2, 15, 19], "median": [2, 15, 39], "12": [2, 15, 19], "most_frequ": [2, 15], "name": [2, 13, 15, 16, 17, 18, 19, 20, 24, 26, 29, 31, 37, 46, 47, 50, 51], "i": [2, 8, 11, 12, 13, 15, 17, 18, 19, 31, 33, 34, 35, 36, 39, 41, 44, 45, 48, 50, 51], "accept": [2, 11, 12, 15, 44], "onli": [2, 15, 31, 47], "one": [2, 13, 15, 17, 19, 33, 47, 51], "input": [2, 15, 17, 19, 34, 37, 39, 40, 43, 51], "output": [2, 15, 17, 34, 40, 43, 48, 51], "column": [2, 11, 12, 15, 16, 17, 18, 19, 31, 33, 36, 37, 39, 40, 41, 43, 44, 50, 51], "gener": [2, 15, 16, 36, 39, 41], "post": [2, 15], "exampl": [2, 13, 15, 18, 33, 37, 47, 51], "from": [2, 11, 12, 13, 15, 17, 19, 33, 36, 37, 39, 41, 44, 47, 50, 51], "import": [2, 13, 15, 17, 18, 19, 33, 36, 37, 44, 45, 46, 47, 51], "read": [2, 13, 15, 39], "csv": [2, 13, 15, 17], "filepath": [2, 13, 15], "file": [2, 8, 12, 13, 15, 17, 35, 39, 44, 47, 50], "agg_dict": [2, 15], "entity_column": [2, 15], "customer_id": [2, 13, 15, 40, 51], "aggregation_op": [2, 15], "total_revenu": [2, 15], "mean_rev": [2, 15], "max_rev": [2, 15], "agg_obj": [2, 15], "agg_df": [2, 15], "execut": [2, 14, 15, 16, 19, 50, 51], "driver": [2, 15, 19], "method": [2, 8, 15, 16, 17, 18, 19, 33, 34, 39, 41, 43, 45, 46, 47, 50, 51], "return": [2, 8, 11, 12, 15, 16, 17, 18, 19, 31, 33, 35, 37, 39, 40, 41, 43, 46, 47, 48, 50, 51], "constant": [2, 14, 15, 17, 19], "operation_dict": [2, 14, 15, 19], "maxaifeatur": [5, 53], "packag": [5, 53], "subpackag": [5, 46, 53], "aggreg": [5, 14, 16, 40, 51, 53], "submodul": [5, 6, 14, 21, 22, 30, 32, 53], "content": [5, 53], "featuretool": [5, 14, 53], "select": [5, 12, 14, 31, 37, 51, 53], "model_based_selector": [5, 14, 53], "selector": [5, 14, 53], "timeseri": [5, 14, 21, 30, 32, 53], "univari": [5, 14, 53], "window": [5, 14, 53], "maxaimetadata": [5, 53], "maxflow": [5, 11, 12, 53], "auto_log": [5, 20, 53], "get_active_flow": [5, 20, 53], "get_active_run": [5, 20, 53], "get_registered_model": [5, 20, 53], "register_model": [5, 20, 38, 46, 53], "set_experi": [5, 20, 53], "start_run": [5, 20, 53], "stop": [5, 20, 53], "maxrun": [5, 20, 53], "end_run": [5, 20, 53], "log_artifact": [5, 20, 53], "log_data": [5, 20, 53], "log_dict": [5, 20, 53], "log_figur": [5, 20, 53], "log_metr": [5, 20, 53], "log_model": [5, 20, 53], "log_param": [5, 20, 53], "set_act": [5, 20, 53], "set_tag": [5, 20, 53], "start_child_run": [5, 20, 53], "test_maxflow": [5, 53], "maxaimodel": [5, 53], "h2o": [5, 6, 10, 21, 53], "python": [5, 21, 33, 36, 37, 51, 53], "maxairesourc": [5, 53], "clean": [5, 38, 53], "noiseremov": [5, 38, 53], "customer360": [5, 38, 53], "datacheck": [5, 38, 39, 53], "analysis_bas": [5, 38, 53], "dataframe_analysis_spark": [5, 38, 53], "ensembl": [5, 6, 38, 53], "eval": [5, 8, 38, 53], "classifier_evaluator_spark": [5, 38, 53], "model_evalu": [5, 38, 53], "regressor_evaluator_spark": [5, 38, 53], "except": [5, 12, 17, 19, 35, 38, 53], "factori": [5, 38, 50, 53], "model_factori": [5, 38, 53], "log": [5, 14, 16, 19, 38, 53], "logger": [5, 16, 38, 53], "model_approv": [5, 38, 53], "model_approver_spark": [5, 38, 53], "optim": [5, 12, 38, 53], "param_optim": [5, 38, 53], "pipeline_factori": [5, 38, 53], "spark_pipelin": [5, 38, 53], "common_util": [5, 38, 53], "data_connector": [5, 38, 53], "encrypt": [5, 38, 53], "misc": [5, 38, 53], "multi_train": [5, 38, 53], "preprocess": [5, 13, 38, 53], "spark_distributor": [5, 38, 53], "train_test_split": [5, 38, 53], "conftest": [5, 41, 53], "binary_classifier_transformed_result": [5, 38, 53], "multiclass_classifier_transformed_result": [5, 38, 53], "normal_regressor_transformed_result": [5, 38, 53], "spark_sess": [5, 38, 42, 53], "evalu": [6, 12, 13, 38, 44, 53], "evaluator_bas": [6, 53], "baseevalu": [6, 8, 44], "get_evaluation_report": [6, 8, 38, 44], "save_result": [6, 8], "h2o_bas": [6, 10], "h2o_classifi": [6, 10], "h2o_regressor": [6, 10], "h2o_unsupervis": [6, 10], "spark_bas": [6, 10], "spark_classifi": [6, 10, 33], "spark_clust": [6, 10], "spark_recommend": [6, 10], "spark_regressor": [6, 10], "model_bas": [6, 53], "basemodel": [6, 10, 11, 12, 31, 37, 46, 48], "build": [6, 10, 11, 12, 17, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50], "fit": [6, 10, 11, 12, 14, 17, 30, 31, 32, 33, 34, 36, 37, 38, 50], "get_model_diagnost": [6, 10, 11, 12, 30, 31, 32, 37], "get_param": [6, 10, 11, 12, 30, 31, 32, 37, 38, 50], "load": [6, 10, 11, 12, 13, 14, 17, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 50], "predict": [6, 10, 11, 12, 30, 31, 32, 33, 34, 36, 37, 38, 43, 44, 48, 51], "save": [6, 8, 10, 11, 12, 13, 14, 17, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 50], "abc": [8, 10, 13], "all": [8, 19, 33, 34, 36, 39, 40, 41, 43, 46, 48, 50, 51], "wrapper": [8, 20, 31, 37, 51], "abstract": [8, 10, 11, 12, 17, 41], "thi": [8, 11, 13, 16, 34, 41, 44, 47, 51], "should": [8, 19, 41, 43, 51], "variou": 8, "kpi": [8, 48], "valid": [8, 12, 13, 31, 41, 44], "met": 8, "static": [8, 17, 18, 19, 33, 37, 51], "self": [8, 18], "result": [8, 51], "path": [8, 11, 12, 17, 31, 33, 34, 35, 36, 37, 39, 41, 50, 51], "str": [8, 12, 13, 16, 17, 18, 19, 20, 31, 33, 35, 36, 37, 41, 44, 46, 51], "json": [8, 40, 41], "locat": [8, 13, 44], "where": [8, 11, 12, 34, 35, 41, 50, 51], "need": [8, 12, 47, 51], "h2obasemodel": [10, 11], "best_param": [10, 11, 12, 32, 33], "training_framework": [10, 11, 12, 30, 31, 38, 50], "h2oclassifierbasemodel": [10, 11, 23], "get_model": [10, 11, 38, 46], "optimise_model": [10, 11, 12, 22, 27, 28], "h2oregressorbasemodel": [10, 11, 27], "h2ounsupervisedbasemodel": [10, 11, 25, 28], "sparkbasemodel": [10, 12, 44], "sparkclassifierbasemodel": [10, 12, 33], "get_param_build": [10, 12], "sparkclusteringbasemodel": [10, 12, 34], "sparkrecommenderbasemodel": [10, 12, 35], "sparkregressorbasemodel": [10, 12, 36], "run": [11, 12, 13, 20, 33, 36, 37, 44, 51], "function": [11, 12, 13, 16, 17, 34, 40, 44, 47, 50, 51], "like": [11, 12], "none": [11, 12, 13, 16, 17, 20, 31, 33, 35, 36, 37, 41, 43, 44, 46, 48, 50, 51], "get": [11, 12, 34, 37, 38, 41, 47, 48, 50, 51], "best": [11, 12, 33, 35, 36], "hyperparam": 11, "type": [11, 12, 13, 16, 17, 18, 19, 20, 31, 33, 36, 39, 40, 41, 45, 46, 51], "rais": [11, 12, 17, 18, 19, 35, 41, 45], "notimplementederror": 11, "string": [11, 12, 19, 34, 35, 37, 44, 50], "target": [11, 12, 17], "grid": [11, 12, 27, 28, 31, 33], "optimis": [11, 12, 27, 28], "arg": [11, 12, 24, 26, 29, 40, 47, 51], "an": [11, 12, 45, 50], "activ": [11, 12], "call": [11, 12, 19, 41, 47, 50, 51], "param": [11, 12, 13, 17, 20, 23, 25, 27, 28, 31, 33, 34, 35, 36, 37, 46, 48, 51], "make": [11, 12], "unsupervis": [11, 21, 22], "we": [11, 39, 43], "have": [11, 31, 41], "find": [12, 33, 51], "hyperparamet": [12, 31, 33], "valu": [12, 17, 18, 19, 20, 31, 33, 37, 39, 41, 48, 51], "done": [12, 34, 51], "after": [12, 31, 37, 51], "mode": [12, 13, 35, 36, 43, 50], "onnx": [12, 35, 36], "option": [12, 13, 16, 17, 20, 31, 33, 35, 36, 37, 41, 44, 48, 51], "default": [12, 13, 16, 17, 19, 33, 35, 36], "support": [12, 19, 33, 35, 50, 51], "metric": [12, 20, 31, 37], "further": 12, "multiclass": [12, 33, 44], "while": 12, "cross": [12, 51], "A": [12, 13, 19, 37, 41, 44, 50, 51], "defin": [12, 17, 18, 19, 31, 40, 45, 51], "task": 12, "k": [12, 34], "number": [12, 18, 41, 51], "made": [12, 31], "befor": [12, 51], "recommend": [12, 21, 32], "fold": 12, "parallel": [12, 51], "builder": 12, "pyspark": [12, 13, 16, 17, 19, 33, 36, 37, 44, 51], "tune": [12, 31, 33, 35, 37], "paramgridbuild": 12, "paramgrid": 12, "param_grid": [12, 23, 25, 27, 28, 31, 33, 35, 36, 37], "predcit": [12, 51], "target_col": [12, 23, 25, 27, 28, 31, 33, 36, 37], "dataevalu": [13, 53], "label_col": [13, 17, 44], "sample_ratio": [13, 41, 44], "float": [13, 36, 41, 44, 51], "0": [13, 18, 33, 34, 36, 37, 41, 43, 44, 51], "output_file_nam": 13, "data_integr": 13, "html": [13, 31, 33, 36, 44], "pre_process_spark_funct": [13, 44], "callabl": [13, 44, 46], "evaluat": [13, 44], "multil": [13, 44], "check": [13, 41, 44, 48], "panda": [13, 17, 18, 44, 51], "core": [13, 44], "frame": [13, 44, 51], "sql": [13, 16, 19, 44], "report": [13, 41, 44], "given": [13, 16, 19, 41, 44, 51], "sampl": [13, 36, 40, 43, 44, 51], "size": [13, 44, 51], "convert": [13, 19, 39, 40, 44, 51], "spark_datafram": [13, 44, 51], "If": [13, 33, 36, 44, 51], "abov": [13, 44, 48], "won": [13, 44], "t": [13, 37, 43, 44, 51], "appli": [13, 16, 44, 51], "anymor": [13, 44], "label": [13, 19, 33, 43, 44, 51], "integrity_result": 13, "maxdatafactori": [13, 53], "data_factory_config": 13, "summaris": 13, "than": 13, "get_all_dataset": [13, 53], "get_dataset": [13, 53], "dataset_nam": 13, "prepare_dataset": [13, 53], "store_dataset": [13, 53], "maxdataset": [13, 53], "dataset_config": 13, "both": [13, 47], "reader": 13, "writer": 13, "_description_": [13, 16], "config": [13, 17, 39, 40], "port": [13, 45, 51], "datatyp": [13, 19], "sourcedetail": 13, "s3": [13, 38, 51], "fileformat": 13, "dim_custom": 13, "rename_col": 13, "dob": 13, "date_of_birth": 13, "is_employe": 13, "is_employee_bool": 13, "select_col": 13, "signup_d": 13, "first_store_id": 13, "is_outli": 13, "gender": 13, "languag": 13, "re_partit": 13, "data_analysi": 13, "col_typ": 13, "numerical_col": 13, "bool_col": 13, "categorical_col": 13, "free_text_col": 13, "unique_identifier_col": 13, "cach": 13, "true": [13, 18, 19, 37, 40, 41, 44, 46, 48, 51], "todo": [13, 19, 41], "connect": 13, "meta": 13, "mlflow": [13, 20], "api": [13, 17, 33, 36, 41], "store_data": [13, 53], "get_key_valu": [13, 53], "nested_dict": 13, "nest": [13, 51], "exist": [13, 50], "element": 13, "featuretoolfeatur": [14, 16], "modelbasedselector": [14, 17], "extract_feature_detail": [14, 17], "modelbasedselectormodel": [14, 17], "feature_imp": [14, 17], "overwrit": [14, 17, 51], "write": [14, 17, 33, 36, 38, 51], "featureselector": [14, 17], "select_featur": [14, 17], "univariatefeatureselectorn": [14, 17], "decompos": [14, 18], "loess": [14, 18], "moving_averag": [14, 18], "stationaritytest": [14, 18], "adf": [14, 18], "kpss": [14, 18], "autocorrel": [14, 18], "check_stationar": [14, 18], "time_series_decomposit": [14, 18], "datetimetransform": [14, 19], "convert_to_iso8601": [14, 19], "filter": [14, 19, 40, 51], "numtransform": [14, 19], "exp": [14, 19, 20], "reciproc": [14, 19], "zscore": [14, 19], "strtransform": [14, 19], "alter_cas": [14, 19], "concat_column": [14, 19], "one_hot_encod": [14, 19], "split_column": [14, 19], "string_index": [14, 19], "trim_whitespac": [14, 19], "decode_transform": [14, 19], "unpack_kwarg": [14, 19], "windowoper": [14, 19], "The": [16, 34, 43, 46, 51], "constructor": 16, "sparksess": 16, "getlogg": 16, "flow": 16, "index_colum": 16, "trans_primit": 16, "agg_primit": 16, "engin": 16, "matrix": 16, "feature_col": [17, 33, 36], "output_col": 17, "selectedfeatur": 17, "base_model": [17, 37, 43], "sparkgbtclassifi": [17, 32, 33], "model_param": [17, 37], "score": [17, 19, 41], "shap": 17, "n_featur": 17, "fetaur": 17, "design": 17, "align": 17, "hold": [17, 40], "col": [17, 43], "vector": [17, 19, 33, 36], "calcul": [17, 18, 19, 43], "imp": 17, "sparkrfclassifi": [17, 32, 33], "sparkgbtregressor": [17, 32, 36], "sparkrfregressor": [17, 32, 36], "extract": [17, 19], "keyerror": 17, "metadata": 17, "tupl": 17, "id": [17, 33, 51], "properti": [17, 44, 51], "classmethod": [17, 20, 24, 26, 29, 46, 52], "dummi": 17, "match": 17, "pysaprk": 17, "requir": [17, 31, 44], "slice": 17, "top": 17, "chisqselector": 17, "fitted_model": 17, "chisqselectormodel": 17, "rformula": 17, "univariatefeatureselector": 17, "univariatefeatureselectormodel": 17, "variancethresholdselector": 17, "variancethresholdselectormodel": 17, "vectorslic": 17, "multipl": [17, 37, 50, 51], "methid": 17, "conf": 17, "train": [17, 33, 35, 36, 37, 44, 51], "kwarg": [18, 19, 20, 24, 26, 29, 46, 47, 48, 50, 51], "pandas_df": 18, "value_col": 18, "spark_df": [18, 37, 51], "groupby_col": [18, 37, 40, 51], "datetime_col": 18, "nlag": 18, "partial": 18, "fals": [18, 20, 41, 44, 46, 48, 51], "comput": [18, 19], "pearson": 18, "correl": [18, 41], "between": 18, "its": [18, 34], "shift": 18, "entiti": 18, "datetim": [18, 19, 31, 37], "quantiti": 18, "lag": [18, 31], "bool": [18, 19, 41, 46, 48], "valueerror": [18, 19], "each": [18, 19], "group": 18, "pd": [18, 31], "a1": 18, "b2": 18, "c3": 18, "d4": 18, "e5": 18, "data_list": 18, "date_list": 18, "entity_list": 18, "rang": [18, 39], "100": [18, 51], "sin_val": 18, "np": 18, "sin": 18, "random": [18, 33, 36, 51], "rand": 18, "date_v": 18, "2022": 18, "timedelta": 18, "dai": 18, "append": [18, 41, 51], "machine_id": 18, "date": [18, 19, 37, 39], "sensor_read": 18, "createdatafram": 18, "abdf": 18, "test": [18, 22, 23, 25, 28, 33, 35, 36, 38, 41, 48, 51], "ddf": 18, "z": [19, 36], "box": 19, "cox": 19, "bin": 19, "hot": 19, "encod": 19, "concat": 19, "delimit": 19, "split": [19, 51], "uppercas": 19, "13": 19, "lowercas": 19, "14": [19, 40], "trim": 19, "15": 19, "timestr": 19, "iso8601": 19, "16": [19, 33], "epoch": 19, "17": [19, 33], "datepart": 19, "col_nam": [19, 39], "is_epoch": 19, "iso": 19, "8601": 19, "format": [19, 39, 40, 41], "assumpt": 19, "upto": 19, "second": 19, "level": [19, 34, 47], "e": [19, 31], "digit": 19, "unix": 19, "column_nam": [19, 40], "filter_rul": 19, "rule_express": 19, "rule": 19, "enclos": 19, "numer": [19, 39, 41], "camput": 19, "exponenti": 19, "incorrectdatatypeerror": 19, "when": [19, 31, 45], "logarithm": 19, "natur": 19, "neg": 19, "zero": 19, "encount": 19, "case": 19, "alter": 19, "decid": 19, "col_list": 19, "concaten": 19, "two": [19, 41, 43, 51], "map": 19, "categori": 19, "indic": 19, "binari": [19, 33, 44], "ani": 19, "dtype": 19, "remov": [19, 39, 41], "whitespac": 19, "columnar": 19, "databas": 19, "transform_op": 19, "apt": 19, "unpack": 19, "keyword": [19, 47, 51], "gracefulli": 19, "captur": [19, 31], "_differenc": 19, "_avg": 19, "_median": 19, "_sum": 19, "_max": 19, "_min": 19, "_stddev": 19, "_varianc": 19, "_lead": 19, "_lag": 19, "_cumulative_distribut": 19, "_row_numb": 19, "_rank": 19, "_dense_rank": 19, "_percent_rank": 19, "roll": 19, "detail": [19, 45, 51], "addit": [19, 37, 41], "window_dict": 19, "window_spec": 19, "partition_col": 19, "dept": [19, 37], "order_col": 19, "asc": 19, "window_s": [19, 37], "window_op": 19, "weekly_sal": [19, 37], "weekly_sales_avg": 19, "w_obj": 19, "sales_df": [19, 37], "sales_df_upd": 19, "uri": 20, "mlrun": 20, "usr": 20, "pwd": 20, "ai": 20, "stage": [20, 50], "recurs": [20, 41, 46], "run_id": 20, "experi": [20, 41], "repo_path": 20, "descript": 20, "local_path": 20, "artifact_path": 20, "local_dir": 20, "feature_view": [20, 51], "file_nam": 20, "figur": 20, "artifact_fil": 20, "tag": 20, "h2o_dl": [21, 22], "h2o_drf": [21, 22], "h2o_gam": [21, 22], "h2o_gbm": [21, 22], "h2o_glm": [21, 22], "h2o_rf": [21, 22], "h2o_xgb": [21, 22], "h2o_kmean": [21, 22], "h2o_dl_regressor": [21, 22], "h2o_drf_regressor": [21, 22], "h2o_gam_regressor": [21, 22], "h2o_gbm_regressor": [21, 22], "h2o_glm_regressor": [21, 22], "h2o_rulefit_regressor": [21, 22], "h2o_xgb_regressor": [21, 22], "h2o_isolation_forest": [21, 22], "h2o_pca": [21, 22], "arima": [21, 30, 37], "garch": [21, 30, 37], "neuroprophet": [21, 30], "prophet": [21, 30, 37], "spark_dt": [21, 32], "spark_fmc": [21, 32], "spark_gbt": [21, 32], "spark_lr": [21, 32], "spark_mlp": [21, 32], "spark_nb": [21, 32], "spark_ovr": [21, 32], "spark_rf": [21, 32], "spark_svc": [21, 32], "spark_hvt": [21, 32], "spark_kmean": [21, 32], "spark_al": [21, 32], "spark_aft_survival_regress": [21, 32], "spark_dt_regress": [21, 32], "spark_fm_regress": [21, 32], "spark_gbt_regress": [21, 32], "spark_gl_regress": [21, 32], "spark_isotonic_regress": [21, 32], "spark_linear_regress": [21, 32], "spark_rf_regress": [21, 32], "spark_t": [21, 32], "xgb_t": [21, 32], "test_classif": [22, 23], "h2odlclassifi": [22, 23], "h2odrfclassifi": [22, 23], "h2ogamclassifi": [22, 23], "h2ogbmclassifi": [22, 23], "h2oglmclassifi": [22, 23], "h2oxgbclassifi": [22, 23], "test_clust": [22, 25], "h2okmeansclust": [22, 25], "h2odlregressor": [22, 27], "h2odrfregressor": [22, 27], "h2ogamregressor": [22, 27], "h2ogbmregressor": [22, 27], "h2oglmregressor": [22, 27], "h2oxgbregressor": [22, 27], "test_unsupervis": [22, 28], "h2oisolationforestmax": [22, 28], "testregressionmodel": [23, 24], "pytestmark": [23, 24, 25, 26, 28, 29], "setup_class": [23, 24, 25, 26, 28, 29, 51, 52], "teardown_class": [23, 24, 25, 26, 28, 29, 51, 52], "test_fit_model": [23, 24, 25, 26, 28, 29], "test_load_model": [23, 24, 25, 26, 28, 29], "test_predict_model": [23, 24, 25, 26, 28, 29], "test_save_model": [23, 24, 25, 26, 28, 29], "model_init": [23, 24, 25, 26, 28, 29], "id_col": [23, 25, 27, 28, 33, 36], "mark": [24, 26, 29], "usefixtur": [24, 26, 29], "request": [24, 26, 29], "testclusteringmodel": [25, 26], "testunsupervisedmodel": [28, 29], "nprophet": [30, 31, 37], "get_event_df": [30, 31], "fbprophet": [30, 31], "get_holiday_df": [30, 31], "time_col": [31, 37], "val_period": 31, "mean_squared_error": [31, 37], "exog_col": 31, "act": [31, 33], "basic": 31, "interfac": 31, "attribut": 31, "forecast": 31, "Not": 31, "period": [31, 37, 51], "dure": 31, "phase": 31, "sklearn": 31, "g": [31, 38, 51], "rmse": [31, 35], "add": 31, "exogen": 31, "variabl": [31, 45], "estim": [31, 37, 50], "ha": [31, 37, 44, 51], "been": [31, 37, 44], "freq": [31, 37], "step": 31, "frequenc": [31, 37], "daili": 31, "d": [31, 36], "monthli": 31, "m": [31, 40], "being": 31, "forecast_df": 31, "auto": [31, 33, 34], "event": [31, 51], "future_regressor": 31, "lag_regressor": 31, "custom_season": 31, "neuralprophet": [31, 37], "http": [31, 33, 36], "com": 31, "For": [31, 34, 37], "complet": 31, "extern": 31, "known": 31, "futur": 31, "regressor": [31, 43], "net": 31, "enabl": 31, "custom": 31, "season": 31, "holidai": 31, "holiday_countri": 31, "extra_regressor": 31, "facebook": 31, "github": 31, "io": 31, "doc": [31, 33, 36], "_holiday_effect": 31, "_and_regressor": 31, "countri": 31, "extra": [31, 47], "sparkdecisiontreeclassifi": [32, 33], "sparkfmclassifi": [32, 33], "sparklogisticregress": [32, 33], "sparkmultilayerperceptronclassifi": [32, 33], "sparknaivebay": [32, 33], "sparkonevsrest": [32, 33], "sparklinearsvc": [32, 33], "hvt": [32, 34], "depth_clustering_check": [32, 34], "kmeans_fit": [32, 34], "kmeans_predict": [32, 34], "l_clustering_fit": [32, 34], "l_clustering_predict": [32, 34], "lhier_clustering_fit": [32, 34], "sparkkmeansclust": [32, 34], "optimise_k": [32, 34], "sparkalsrecommend": [32, 35], "optimise_model_without_cross_valid": [32, 35], "sparkaftsurvivalregressor": [32, 36], "sparkdtregressor": [32, 36], "sparkfmregressor": [32, 36], "sparkglregressor": [32, 36], "sparkisotonicregressor": [32, 36], "sparklinearregressor": [32, 36], "sparktsforecast": [32, 37], "dataprep": [32, 37], "increment_datetim": [32, 37], "infer_frequ": [32, 37], "prepare_data": [32, 37], "xgbforecast": [32, 37], "decis": [33, 36], "tree": [33, 36], "classifi": [33, 43, 44], "give": [33, 36], "describ": [33, 36], "here": [33, 36, 43], "apach": [33, 36], "org": [33, 36], "latest": [33, 36], "decisiontreeclassifi": 33, "mention": [33, 36, 51], "over": [33, 36], "dt": [33, 36], "surviv": 33, "impur": 33, "gini": 33, "entropi": 33, "maxdepth": 33, "pred": [33, 36], "show": [33, 36, 41, 47, 51], "rawpredict": 33, "probabl": [33, 43, 44], "39": 33, "26": [33, 36], "21": 33, "28": [33, 36], "197": 33, "31": [33, 36], "24": [33, 36, 37], "86403508771929": 33, "53333333333333": 33, "factor": 33, "machin": 33, "learn": 33, "algorithm": 33, "fmclassifi": 33, "fmc": 33, "33457026278096": 33, "94935179013616": 33, "85640816425286": 33, "85772827992116": 33, "93518095165010": 33, "86974472614122": 33, "84720121826394": 33, "84754268646046": 33, "gbt": [33, 36], "gradient": [33, 36], "boost": [33, 36], "vectoris": [33, 36], "gbtclassifi": 33, "difffer": 33, "kind": 33, "famili": 33, "logist": 33, "logisticregress": 33, "lr": 33, "regparam": 33, "maxit": [33, 36], "train_rf": 33, "lr_pred": 33, "test_rf": 33, "trainer": 33, "multilay": 33, "perceptron": 33, "multilayerperceptronclassifi": 33, "rubric": 33, "mlp": 33, "train_mlp": 33, "mlp_pred": 33, "test_mlp": 33, "multilayerperceptronclassificationmodel": 33, "naiv": 33, "bay": 33, "naivebay": 33, "nb": 33, "spark_nbb": 33, "train_nb": 33, "nb_pred": 33, "test_nb": 33, "20": 33, "9406697808162": 33, "2398604023384": 33, "40831384051017": 33, "4519116562601": 33, "7277582849546": 33, "89703348904081": 33, "86199302011692": 33, "47041569202550": 33, "82259558281300": 33, "53638791424773": 33, "reduct": 33, "against": 33, "strategi": 33, "maxaibas": [33, 53], "onevsrest": 33, "declar": 33, "would": 33, "speci": 33, "ovr": 33, "train_vecovr": 33, "prd_ovr": 33, "test_vecovr": 33, "51": 33, "235730144288": 33, "35": 33, "771347249773": 33, "29": 33, "856819249743": 33, "30": [33, 36, 51], "8709864367496": 33, "27": [33, 36], "387459642795": 33, "forest": [33, 36], "randomforestclassifi": 33, "rf": [33, 36], "rf_pred": 33, "svc": 33, "svc_pred": 33, "df_pca": 34, "customer_column": 34, "hierarchy_columnlist": 34, "overlay_column": 34, "minimum_cluster_s": 34, "segment_nam": 34, "model_path": 34, "depth": 34, "kmean": 34, "error_threshold": 34, "02": [34, 37], "hierarch": 34, "voronoi": 34, "tessel": 34, "construct": 34, "main": [34, 41], "repres": 34, "2d": 34, "coordin": 34, "plot": 34, "centroid": 34, "subsequ": 34, "point": 34, "within": 34, "parent": 34, "tile": 34, "line": 34, "chop": 34, "place": [34, 41], "so": 34, "thei": 34, "do": [34, 51], "protrud": 34, "outsid": 34, "polygon": 34, "c_level": 34, "c_cluster_par": 34, "c_cluster": 34, "df_kmean": 34, "specifi": [34, 51], "detect": [34, 44], "df_cust": 34, "cluster_par": 34, "df_paramet": 34, "user_col": 35, "item_col": 35, "rating_col": 35, "evaluator_metr": 35, "censorcol": 36, "fm": 36, "fmregressionmodel": 36, "highlight": 36, "aftsurvivalreg": 36, "medv": 36, "train_aft": 36, "pred_aftreg": 36, "test_aft": 36, "censor": 36, "04417": 36, "70": 36, "03537": 36, "34": 36, "09266": 36, "09": 36, "05515": 36, "33": 36, "22": 36, "36": 36, "635527461813897": 36, "03455354521534": 36, "708353457826586": 36, "04563344447913": 36, "38": 36, "12525657243664": 36, "decisiontreeregressor": 36, "32": 36, "026086956521745": 36, "25": 36, "149999999999995": 36, "600000000000005": 36, "fmreg": 36, "pred_fmreg": 36, "40499": 36, "54522968596": 36, "8732": 36, "454532015487": 36, "3825": 36, "8655364832666": 36, "5658": 36, "445061672479": 36, "22837": 36, "07767793254": 36, "gbtregressionmodel": 36, "pred_gbt": 36, "846373877566844": 36, "034746106946816": 36, "456822769467188": 36, "40380891308272": 36, "23621896235877": 36, "gbt_reg": 36, "s3a": 36, "dataset": [36, 39, 44, 53], "pai": 36, "onboard": 36, "regression_model_test": 36, "linear": 36, "generalizedlinearregress": 36, "glinreg": 36, "pred_glinreg": 36, "isoton": 36, "isotonicregress": 36, "isoreg": 36, "pred_isoreg": 36, "48963210702341": 36, "linearregress": 36, "linreg": 36, "pred_linreg": 36, "randomforestregressionmodel": 36, "168843024672547": 36, "03174578178511": 36, "23": 36, "73252647489749": 36, "70366392976648": 36, "93450571558931": 36, "rfr": 36, "grp_by_col": 37, "worker": 37, "distribut": [37, 51], "instanc": [37, 41], "see": 37, "definit": 37, "yearly_season": 37, "seasonality_mod": 37, "learning_r": 37, "01": 37, "03": 37, "05": 37, "w": 37, "resultant_df": 37, "interv": 37, "date_col": 37, "pdf": 37, "n_forecast": 37, "num_round": 37, "convert_timeformat": [38, 39], "determine_outlier_thersholds_std": [38, 39], "determine_outlier_thresholds_iqr": [38, 39], "drop_dupl": [38, 39], "impute_nul": [38, 39], "outlier_detect": [38, 39], "read_config": [38, 39], "remove_outli": [38, 39], "column_renam": [38, 40], "create_featur": [38, 40], "parse_argu": [38, 40], "prepare_agg_argu": [38, 40], "todatetyp": [38, 40], "test_dataframe_analysis_spark": [38, 41], "analysisbas": [38, 41], "compare_report": [38, 41], "generate_data_health_report": [38, 41], "get_column_typ": [38, 41], "save_analysis_report": [38, 41], "validate_report": [38, 41], "sparkdataframeanalys": [38, 41], "default_behaviour": [38, 41], "default_threshold": [38, 41], "votingclassifi": [38, 43], "votingregressor": [38, 43], "classifierevalu": [38, 44], "deepcheckmodelwrapp": [38, 44], "feature_importances_": [38, 44], "predict_proba": [38, 44], "modelevalu": [38, 44], "regressorevalu": [38, 44], "general_regression_report_spark": [38, 44], "datasourcenotdefinederror": [38, 45], "featuretransformexcept": [38, 45], "maxaiexcept": [38, 45], "geterrormessag": [38, 45], "missingenvironmentvari": [38, 45], "modelloadexcept": [38, 45], "modelnotimpl": [38, 45], "modelsaveexcept": [38, 45], "modeltrainexcept": [38, 45], "modeltypenotdefinedexcept": [38, 45], "portinformationnotfounderror": [38, 45], "unknownoperationmod": [38, 45], "modelfactori": [38, 46], "import_submodul": [38, 46], "customadapt": [38, 47], "get_file_handl": [38, 47], "get_logg": [38, 47], "get_stream_handl": [38, 47], "modelapprov": [38, 48], "is_above_threshold": [38, 48], "sparktransformerfactori": [38, 50], "get_transform": [38, 50], "register_transform": [38, 50], "sparkpipelin": [38, 50], "build_multipl": [38, 50], "fit_multipl": [38, 50], "test_data_connector": [38, 51], "test_multi_train": [38, 51], "test_spark_distributor": [38, 51], "test_train_test_split": [38, 51], "write_file_to_s3": [38, 51], "adl": [38, 51], "azur": [38, 51], "cassandra": [38, 51], "feast": [38, 51], "iceberg": [38, 51], "get_data_for_a_port": [38, 51], "maxaidatafram": [38, 51], "decrypt": [38, 51], "decrypt_column": [38, 51], "encrypt_column": [38, 51], "get_run_id_timestamp": [38, 51], "overwrite_dict": [38, 51], "multitrain": [38, 51], "train_model": [38, 51], "trained_model": [38, 51], "aggregate_transactional_data": [38, 51], "sparkdistributor": [38, 51], "pandas_to_spark_wrapp": [38, 51], "traintestsplit": [38, 51], "random_split": [38, 51], "stratified_split": [38, 51], "time_series_split": [38, 51], "timeformat": 39, "utc": 39, "approach": 39, "timestamp": [39, 51], "drop": 39, "duplic": 39, "row": 39, "null": [39, 40], "percentag": 39, "skew": 39, "featu": 39, "imput": 39, "symmetr": 39, "asymmetr": 39, "free": 39, "iqr": 39, "outlier": [39, 41], "cap": 39, "standard": 39, "deviat": [39, 41], "dframe": 40, "groupbycol": 40, "pars": 40, "perpar": 40, "signal": 40, "inform": [40, 47, 51], "singnal": 40, "arguments_without_ev": 40, "arguments_with_ev": 40, "agg_col": [40, 51], "mkt_channel_nam": 40, "event_col": 40, "time_period": [40, 51], "transact": [40, 51], "offer_id": 40, "time_column": 40, "time_differ": 40, "event_column": [40, 51], "data_typ": 40, "updated_nam": 40, "i_count_distinct_offer_id_7_dai": 40, "last_7_transact": 40, "i_count_distinct_offer_id_last_7_transact": 40, "i_count_distinct_offer_id_14_dai": 40, "last_14_transact": 40, "i_count_distinct_offer_id_last_14_transact": 40, "i_count_mkt_channel_name_7_dai": 40, "i_count_mkt_channel_name_last_7_transact": 40, "yyyi": 40, "dd": 40, "datetyp": 40, "sample_feast_dataframe_for_analysi": [41, 42], "test_binary_classification_report_spark": [41, 42], "analysi": 41, "text": 41, "categor": [41, 44], "updat": 41, "per": [41, 47], "imag": 41, "nn": 41, "everi": 41, "correct": 41, "form": 41, "comparison": 41, "compar": [41, 44], "old_report": 41, "new_report": 41, "same": [41, 50, 51], "scope": 41, "criteria": 41, "dedic": 41, "keep": 41, "copi": 41, "identifi": 41, "destination_path": 41, "in_scope_column": 41, "summary_onli": 41, "save_report": 41, "column_typ": 41, "threshold": [41, 43, 48], "behaviour": 41, "analys": 41, "singl": 41, "intend": 41, "red": 41, "flag": 41, "": 41, "threshold_chang": 41, "increas": [41, 51], "decreas": 41, "certain": 41, "warn": 41, "chang": 41, "observ": 41, "ad": [41, 50], "intern": [41, 46], "insid": 41, "bi_vari": 41, "uni_vari": 41, "unique_categori": 41, "numerical_summari": 41, "null_percentag": 41, "kurtosis_scor": 41, "skewness_scor": 41, "id_column_check": 41, "categories_distribut": 41, "balanced_bool": 41, "correlation_scor": 41, "column_count": 41, "50": 41, "record_count": 41, "300000": 41, "boolean_bal": 41, "outlier_percentag": 41, "unique_categories_count": 41, "last": 41, "minut": 41, "infer": [41, 51], "field": 41, "hard": 43, "weight": 43, "testdata": 43, "soft": 43, "note": 43, "cummul": 43, "fun": 43, "consist": 43, "three": [43, 51], "vote": 43, "across": 43, "combin": 43, "user": [43, 51], "doesn": 43, "enter": 43, "uniform": 43, "predicted_actual_pdf": [44, 48], "predicted_col": 44, "probability_col": 44, "classification_mod": 44, "separ": 44, "implement": [44, 45], "arr": 44, "ndarrai": 44, "train_data": 44, "test_data": 44, "cat_featur": 44, "current": 44, "model_evaluation_result": 44, "drift": 44, "els": [44, 48], "train_test_valid": 44, "model_v": 44, "train_test_v": 44, "messag": [45, 47], "particular": [45, 51], "export": 45, "tansform": 45, "environ": 45, "miss": 45, "tain": 45, "found": 45, "send_class": 46, "regist": [46, 50], "registri": [46, 50], "executor": 46, "itself": [46, 47], "includ": 46, "actual": [46, 48], "rtype": 46, "moduletyp": 46, "loggeradapt": 47, "__name__": 47, "debug": 47, "f": 47, "msg": [47, 51], "insert": 47, "contextu": 47, "either": 47, "manipul": 47, "modifi": 47, "suit": 47, "normal": 47, "ll": 47, "overrid": 47, "subclass": 47, "specif": 47, "filenam": 47, "run_detail": 47, "handler": 47, "stream": 47, "termin": 47, "evaluator_class": 48, "metric_threshold": 48, "v": 48, "minimum": 48, "pair": 48, "good": 48, "enough": 48, "about": 48, "consit": 50, "order": 50, "testdataconnector": [51, 52], "load_sample_data": [51, 52], "test_read_encrypytion_pandas_csv": [51, 52], "test_read_encrypytion_spark_parquet": [51, 52], "test_read_without_encrypt": [51, 52], "test_write_encrypytion_pandas_csv": [51, 52], "test_write_encrypytion_spark_parquet": [51, 52], "test_write_without_encrypt": [51, 52], "testmultitrain": [51, 52], "test_predict": [51, 52], "test_train_model": [51, 52], "test_trained_model": [51, 52], "testsparkdistributor": [51, 52], "get_funct": [51, 52], "test_function_1_test1": [51, 52], "test_function_1_test2": [51, 52], "testtraintestsplit": [51, 52], "test_random_split": [51, 52], "test_stratify_split": [51, 52], "spark_conn": 51, "input_data": 51, "port_numb": 51, "entir": 51, "configur": 51, "fetch": 51, "connection_typ": 51, "help": 51, "output_data": 51, "written": 51, "out": 51, "boolean": 51, "statu": 51, "entity_path": 51, "cipher": 51, "df_type": 51, "mykei": 51, "prefix": 51, "f_": 51, "uniqu": 51, "d1": 51, "d2": 51, "givem": 51, "section": 51, "pre": 51, "groupbi": 51, "item": 51, "preprocessed_df": 51, "product": 51, "revenu": 51, "60": 51, "appropri": 51, "python_funct": 51, "sample_s": 51, "output_schema": 51, "group_kei": 51, "mainli": 51, "take": 51, "record": 51, "directli": 51, "schema": 51, "final": 51, "abl": 51, "tri": 51, "groubi": 51, "partit": 51, "repartit": 51, "spark_wrapp": 51, "train_siz": 51, "random_st": 51, "stratifi": 51, "seed": 51, "123": 51, "happend": 51, "ratio": 51, "reproduc": 51, "fraction": 51, "frac": 51, "join_on": 51, "mock_gbt": 52, "mock_rf": 52, "function_nam": 52, "maxaidatahandl": 53, "data_evalu": 53, "datafactori": 53, "pdoc_setup": 53, "setup": 53}, "objects": {"": [[6, 0, 0, "-", "maxaibase"], [13, 0, 0, "-", "maxaidatahandling"], [14, 0, 0, "-", "maxaifeaturization"], [20, 0, 0, "-", "maxaimetadata"], [21, 0, 0, "-", "maxaimodel"], [38, 0, 0, "-", "maxairesources"]], "maxaibase": [[7, 0, 0, "-", "ensemble"], [8, 0, 0, "-", "evaluation"], [9, 0, 0, "-", "featurization"], [10, 0, 0, "-", "model"]], "maxaibase.evaluation": [[8, 0, 0, "-", "evaluator_base"]], "maxaibase.evaluation.evaluator_base": [[8, 1, 1, "", "BaseEvaluator"]], "maxaibase.evaluation.evaluator_base.BaseEvaluator": [[8, 2, 1, "", "get_evaluation_report"], [8, 2, 1, "", "save_results"]], "maxaibase.model": [[11, 0, 0, "-", "H2O"], [10, 0, 0, "-", "model_base"], [12, 0, 0, "-", "spark"]], "maxaibase.model.H2O": [[11, 0, 0, "-", "h2o_base"], [11, 0, 0, "-", "h2o_classifier"], [11, 0, 0, "-", "h2o_regressor"], [11, 0, 0, "-", "h2o_unsupervised"]], "maxaibase.model.H2O.h2o_base": [[11, 1, 1, "", "H2OBaseModel"]], "maxaibase.model.H2O.h2o_base.H2OBaseModel": [[11, 2, 1, "", "best_params"], [11, 2, 1, "", "build"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_model_diagnostics"], [11, 2, 1, "", "load"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "save"], [11, 3, 1, "", "training_framework"]], "maxaibase.model.H2O.h2o_classifier": [[11, 1, 1, "", "H2OClassifierBaseModel"]], "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel": [[11, 2, 1, "", "build"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_model"], [11, 2, 1, "", "get_model_diagnostics"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "optimise_model"], [11, 2, 1, "", "predict"]], "maxaibase.model.H2O.h2o_regressor": [[11, 1, 1, "", "H2ORegressorBaseModel"]], "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel": [[11, 2, 1, "", "build"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_model"], [11, 2, 1, "", "get_model_diagnostics"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "optimise_model"], [11, 2, 1, "", "predict"]], "maxaibase.model.H2O.h2o_unsupervised": [[11, 1, 1, "", "H2OUnsupervisedBaseModel"]], "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel": [[11, 2, 1, "", "best_params"], [11, 2, 1, "", "build"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_model"], [11, 2, 1, "", "get_model_diagnostics"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "optimise_model"], [11, 2, 1, "", "predict"]], "maxaibase.model.model_base": [[10, 1, 1, "", "BaseModel"]], "maxaibase.model.model_base.BaseModel": [[10, 2, 1, "", "build"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_model_diagnostics"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "load"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "save"]], "maxaibase.model.spark": [[12, 0, 0, "-", "spark_base"], [12, 0, 0, "-", "spark_classifier"], [12, 0, 0, "-", "spark_clustering"], [12, 0, 0, "-", "spark_recommender"], [12, 0, 0, "-", "spark_regressor"]], "maxaibase.model.spark.spark_base": [[12, 1, 1, "", "SparkBaseModel"]], "maxaibase.model.spark.spark_base.SparkBaseModel": [[12, 2, 1, "", "best_params"], [12, 2, 1, "", "build"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_model_diagnostics"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "load"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "save"], [12, 3, 1, "", "training_framework"]], "maxaibase.model.spark.spark_classifier": [[12, 1, 1, "", "SparkClassifierBaseModel"]], "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel": [[12, 2, 1, "", "build"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_model_diagnostics"], [12, 2, 1, "", "get_param_builder"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "optimise_model"], [12, 2, 1, "", "predict"]], "maxaibase.model.spark.spark_clustering": [[12, 1, 1, "", "SparkClusteringBaseModel"]], "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel": [[12, 2, 1, "", "build"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_model_diagnostics"], [12, 2, 1, "", "load"], [12, 2, 1, "", "predict"]], "maxaibase.model.spark.spark_recommender": [[12, 1, 1, "", "SparkRecommenderBaseModel"]], "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel": [[12, 2, 1, "", "build"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_model_diagnostics"], [12, 2, 1, "", "get_param_builder"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "optimise_model"], [12, 2, 1, "", "predict"]], "maxaibase.model.spark.spark_regressor": [[12, 1, 1, "", "SparkRegressorBaseModel"]], "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel": [[12, 2, 1, "", "build"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_model_diagnostics"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"]], "maxaidatahandling": [[13, 0, 0, "-", "data_evaluator"], [13, 0, 0, "-", "datafactory"], [13, 0, 0, "-", "dataset"]], "maxaidatahandling.data_evaluator": [[13, 1, 1, "", "DataEvaluator"]], "maxaidatahandling.data_evaluator.DataEvaluator": [[13, 2, 1, "", "evaluate"]], "maxaidatahandling.datafactory": [[13, 1, 1, "", "MAXDataFactory"]], "maxaidatahandling.datafactory.MAXDataFactory": [[13, 2, 1, "", "get_all_datasets"], [13, 2, 1, "", "get_dataset"], [13, 2, 1, "", "prepare_datasets"], [13, 2, 1, "", "store_datasets"]], "maxaidatahandling.dataset": [[13, 1, 1, "", "MaxDataset"], [13, 4, 1, "", "get_key_value"]], "maxaidatahandling.dataset.MaxDataset": [[13, 2, 1, "", "prepare_dataset"], [13, 2, 1, "", "store_data"]], "maxaifeaturization": [[15, 0, 0, "-", "aggregation"], [16, 0, 0, "-", "featuretools"], [17, 0, 0, "-", "selection"], [18, 0, 0, "-", "timeseries"], [19, 0, 0, "-", "transformation"]], "maxaifeaturization.aggregation": [[15, 0, 0, "-", "aggregation"]], "maxaifeaturization.aggregation.aggregation": [[15, 1, 1, "", "Aggregation"], [15, 1, 1, "", "Constants"]], "maxaifeaturization.aggregation.aggregation.Aggregation": [[15, 2, 1, "", "execute"]], "maxaifeaturization.aggregation.aggregation.Constants": [[15, 3, 1, "", "operation_dict"]], "maxaifeaturization.featuretools": [[16, 0, 0, "-", "featuretools"]], "maxaifeaturization.featuretools.featuretools": [[16, 1, 1, "", "FeatureToolFeatures"]], "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures": [[16, 2, 1, "", "execute"]], "maxaifeaturization.selection": [[17, 0, 0, "-", "model_based_selector"], [17, 0, 0, "-", "selector"]], "maxaifeaturization.selection.model_based_selector": [[17, 1, 1, "", "ModelBasedSelector"], [17, 1, 1, "", "ModelBasedSelectorModel"]], "maxaifeaturization.selection.model_based_selector.ModelBasedSelector": [[17, 2, 1, "", "extract_feature_details"], [17, 2, 1, "", "fit"], [17, 5, 1, "", "model"]], "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel": [[17, 5, 1, "", "feature_imp"], [17, 2, 1, "", "load"], [17, 2, 1, "", "overwrite"], [17, 2, 1, "", "save"], [17, 2, 1, "", "transform"], [17, 2, 1, "", "write"]], "maxaifeaturization.selection.selector": [[17, 1, 1, "", "Constants"], [17, 1, 1, "", "FeatureSelector"], [17, 4, 1, "", "UnivariateFeatureSelectorN"]], "maxaifeaturization.selection.selector.Constants": [[17, 3, 1, "", "selectors"]], "maxaifeaturization.selection.selector.FeatureSelector": [[17, 2, 1, "", "load"], [17, 2, 1, "", "save"], [17, 2, 1, "", "select_features"], [17, 5, 1, "", "selector"]], "maxaifeaturization.timeseries": [[18, 0, 0, "-", "univariate"]], "maxaifeaturization.timeseries.univariate": [[18, 1, 1, "", "Decompose"], [18, 1, 1, "", "StationarityTest"], [18, 4, 1, "", "autocorrelation"], [18, 4, 1, "", "check_stationarity"], [18, 4, 1, "", "time_series_decomposition"]], "maxaifeaturization.timeseries.univariate.Decompose": [[18, 2, 1, "", "loess"], [18, 2, 1, "", "moving_average"]], "maxaifeaturization.timeseries.univariate.StationarityTest": [[18, 2, 1, "", "adf"], [18, 2, 1, "", "kpss"]], "maxaifeaturization.transformation": [[19, 0, 0, "-", "transform"], [19, 0, 0, "-", "window"]], "maxaifeaturization.transformation.transform": [[19, 1, 1, "", "Constants"], [19, 1, 1, "", "DateTimeTransform"], [19, 1, 1, "", "Filter"], [19, 1, 1, "", "NumTransforms"], [19, 1, 1, "", "StrTransforms"], [19, 1, 1, "", "Transformation"], [19, 4, 1, "", "unpack_kwargs"]], "maxaifeaturization.transformation.transform.Constants": [[19, 3, 1, "", "operation_dict"]], "maxaifeaturization.transformation.transform.DateTimeTransform": [[19, 2, 1, "", "convert_to_iso8601"]], "maxaifeaturization.transformation.transform.Filter": [[19, 2, 1, "", "execute"]], "maxaifeaturization.transformation.transform.NumTransforms": [[19, 2, 1, "", "exp"], [19, 2, 1, "", "log"], [19, 2, 1, "", "reciprocal"], [19, 2, 1, "", "zscore"]], "maxaifeaturization.transformation.transform.StrTransforms": [[19, 2, 1, "", "alter_case"], [19, 2, 1, "", "concat_columns"], [19, 2, 1, "", "one_hot_encoder"], [19, 2, 1, "", "split_column"], [19, 2, 1, "", "string_indexer"], [19, 2, 1, "", "trim_whitespaces"]], "maxaifeaturization.transformation.transform.Transformation": [[19, 2, 1, "", "decode_transformation"], [19, 2, 1, "", "execute"]], "maxaifeaturization.transformation.window": [[19, 1, 1, "", "Constants"], [19, 1, 1, "", "WindowOperations"]], "maxaifeaturization.transformation.window.Constants": [[19, 3, 1, "", "operation_dict"]], "maxaifeaturization.transformation.window.WindowOperations": [[19, 2, 1, "", "execute"]], "maxaimetadata": [[20, 0, 0, "-", "maxflow"], [20, 0, 0, "-", "test_maxflow"]], "maxaimetadata.maxflow": [[20, 1, 1, "", "MaxFlow"], [20, 1, 1, "", "MaxRun"]], "maxaimetadata.maxflow.MaxFlow": [[20, 2, 1, "", "auto_log"], [20, 2, 1, "", "get_active_flow"], [20, 2, 1, "", "get_active_run"], [20, 2, 1, "", "get_registered_model"], [20, 2, 1, "", "register_model"], [20, 2, 1, "", "set_experiment"], [20, 2, 1, "", "start_run"], [20, 2, 1, "", "stop"]], "maxaimetadata.maxflow.MaxRun": [[20, 2, 1, "", "end_run"], [20, 2, 1, "", "log_artifact"], [20, 2, 1, "", "log_artifacts"], [20, 2, 1, "", "log_data"], [20, 2, 1, "", "log_dict"], [20, 2, 1, "", "log_figure"], [20, 2, 1, "", "log_metric"], [20, 2, 1, "", "log_metrics"], [20, 2, 1, "", "log_model"], [20, 2, 1, "", "log_param"], [20, 2, 1, "", "log_params"], [20, 2, 1, "", "set_active"], [20, 2, 1, "", "set_tag"], [20, 2, 1, "", "set_tags"], [20, 2, 1, "", "start_child_run"]], "maxaimetadata.test_maxflow": [[20, 4, 1, "", "test_maxflow"]], "maxaimodel": [[22, 0, 0, "-", "H2O"], [30, 0, 0, "-", "python"], [32, 0, 0, "-", "spark"]], "maxaimodel.H2O": [[23, 0, 0, "-", "classification"], [25, 0, 0, "-", "clustering"], [27, 0, 0, "-", "regression"], [28, 0, 0, "-", "unsupervised"]], "maxaimodel.H2O.classification": [[23, 0, 0, "-", "h2o_dl"], [23, 0, 0, "-", "h2o_drf"], [23, 0, 0, "-", "h2o_gam"], [23, 0, 0, "-", "h2o_gbm"], [23, 0, 0, "-", "h2o_glm"], [23, 0, 0, "-", "h2o_xgb"], [24, 0, 0, "-", "test"]], "maxaimodel.H2O.classification.h2o_dl": [[23, 1, 1, "", "H2ODLClassifier"]], "maxaimodel.H2O.classification.h2o_dl.H2ODLClassifier": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_drf": [[23, 1, 1, "", "H2ODRFClassifier"]], "maxaimodel.H2O.classification.h2o_drf.H2ODRFClassifier": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_gam": [[23, 1, 1, "", "H2OGAMClassifier"]], "maxaimodel.H2O.classification.h2o_gam.H2OGAMClassifier": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_gbm": [[23, 1, 1, "", "H2OGBMClassifier"]], "maxaimodel.H2O.classification.h2o_gbm.H2OGBMClassifier": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_glm": [[23, 1, 1, "", "H2OGLMClassifier"]], "maxaimodel.H2O.classification.h2o_glm.H2OGLMClassifier": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.classification.h2o_xgb": [[23, 1, 1, "", "H2OXGBClassifier"]], "maxaimodel.H2O.classification.h2o_xgb.H2OXGBClassifier": [[23, 2, 1, "", "build"]], "maxaimodel.H2O.classification.test": [[24, 0, 0, "-", "test_classification"]], "maxaimodel.H2O.classification.test.test_classification": [[24, 1, 1, "", "TestRegressionModels"], [24, 4, 1, "", "model_init"]], "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels": [[24, 3, 1, "", "pytestmark"], [24, 2, 1, "", "setup_class"], [24, 2, 1, "", "teardown_class"], [24, 2, 1, "", "test_fit_model"], [24, 2, 1, "", "test_load_model"], [24, 2, 1, "", "test_predict_model"], [24, 2, 1, "", "test_save_model"]], "maxaimodel.H2O.clustering": [[25, 0, 0, "-", "h2o_kmeans"], [26, 0, 0, "-", "test"]], "maxaimodel.H2O.clustering.h2o_kmeans": [[25, 1, 1, "", "H2OKmeansClustering"]], "maxaimodel.H2O.clustering.h2o_kmeans.H2OKmeansClustering": [[25, 2, 1, "", "build"]], "maxaimodel.H2O.clustering.test": [[26, 0, 0, "-", "test_clustering"]], "maxaimodel.H2O.clustering.test.test_clustering": [[26, 1, 1, "", "TestClusteringModels"], [26, 4, 1, "", "model_init"]], "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels": [[26, 3, 1, "", "pytestmark"], [26, 2, 1, "", "setup_class"], [26, 2, 1, "", "teardown_class"], [26, 2, 1, "", "test_fit_model"], [26, 2, 1, "", "test_load_model"], [26, 2, 1, "", "test_predict_model"], [26, 2, 1, "", "test_save_model"]], "maxaimodel.H2O.regression": [[27, 0, 0, "-", "h2o_dl_regressor"], [27, 0, 0, "-", "h2o_drf_regressor"], [27, 0, 0, "-", "h2o_gam_regressor"], [27, 0, 0, "-", "h2o_gbm_regressor"], [27, 0, 0, "-", "h2o_glm_regressor"], [27, 0, 0, "-", "h2o_xgb_regressor"]], "maxaimodel.H2O.regression.h2o_dl_regressor": [[27, 1, 1, "", "H2ODLRegressor"]], "maxaimodel.H2O.regression.h2o_dl_regressor.H2ODLRegressor": [[27, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_drf_regressor": [[27, 1, 1, "", "H2ODRFRegressor"]], "maxaimodel.H2O.regression.h2o_drf_regressor.H2ODRFRegressor": [[27, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_gam_regressor": [[27, 1, 1, "", "H2OGAMRegressor"]], "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor": [[27, 2, 1, "", "build"], [27, 2, 1, "", "optimise_model"]], "maxaimodel.H2O.regression.h2o_gbm_regressor": [[27, 1, 1, "", "H2OGBMRegressor"]], "maxaimodel.H2O.regression.h2o_gbm_regressor.H2OGBMRegressor": [[27, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_glm_regressor": [[27, 1, 1, "", "H2OGLMRegressor"]], "maxaimodel.H2O.regression.h2o_glm_regressor.H2OGLMRegressor": [[27, 2, 1, "", "build"]], "maxaimodel.H2O.regression.h2o_xgb_regressor": [[27, 1, 1, "", "H2OXGBRegressor"]], "maxaimodel.H2O.regression.h2o_xgb_regressor.H2OXGBRegressor": [[27, 2, 1, "", "build"]], "maxaimodel.H2O.unsupervised": [[28, 0, 0, "-", "h2o_isolation_forest"], [29, 0, 0, "-", "test"]], "maxaimodel.H2O.unsupervised.h2o_isolation_forest": [[28, 1, 1, "", "H2OIsolationForestMAX"]], "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX": [[28, 2, 1, "", "build"], [28, 2, 1, "", "optimise_model"]], "maxaimodel.H2O.unsupervised.test": [[29, 0, 0, "-", "test_unsupervised"]], "maxaimodel.H2O.unsupervised.test.test_unsupervised": [[29, 1, 1, "", "TestUnsupervisedModels"], [29, 4, 1, "", "model_init"]], "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels": [[29, 3, 1, "", "pytestmark"], [29, 2, 1, "", "setup_class"], [29, 2, 1, "", "teardown_class"], [29, 2, 1, "", "test_fit_model"], [29, 2, 1, "", "test_load_model"], [29, 2, 1, "", "test_predict_model"], [29, 2, 1, "", "test_save_model"]], "maxaimodel.python": [[31, 0, 0, "-", "timeseries"]], "maxaimodel.python.timeseries": [[31, 0, 0, "-", "arima"], [31, 0, 0, "-", "garch"], [31, 0, 0, "-", "neuroprophet"], [31, 0, 0, "-", "prophet"]], "maxaimodel.python.timeseries.arima": [[31, 1, 1, "", "Arima"]], "maxaimodel.python.timeseries.arima.Arima": [[31, 2, 1, "", "build"], [31, 2, 1, "id0", "fit"], [31, 2, 1, "", "get_model_diagnostics"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "load"], [31, 2, 1, "id1", "predict"], [31, 2, 1, "", "save"], [31, 3, 1, "id2", "training_framework"]], "maxaimodel.python.timeseries.garch": [[31, 1, 1, "", "Garch"]], "maxaimodel.python.timeseries.garch.Garch": [[31, 2, 1, "", "build"], [31, 2, 1, "id3", "fit"], [31, 2, 1, "", "get_model_diagnostics"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "load"], [31, 2, 1, "id4", "predict"], [31, 2, 1, "", "save"], [31, 3, 1, "id5", "training_framework"]], "maxaimodel.python.timeseries.neuroprophet": [[31, 1, 1, "", "NProphet"]], "maxaimodel.python.timeseries.neuroprophet.NProphet": [[31, 2, 1, "", "build"], [31, 2, 1, "id6", "fit"], [31, 2, 1, "id7", "get_event_df"], [31, 2, 1, "", "get_model_diagnostics"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "load"], [31, 2, 1, "id8", "predict"], [31, 2, 1, "", "save"], [31, 3, 1, "id9", "training_framework"]], "maxaimodel.python.timeseries.prophet": [[31, 1, 1, "", "FBProphet"]], "maxaimodel.python.timeseries.prophet.FBProphet": [[31, 2, 1, "", "build"], [31, 2, 1, "id10", "fit"], [31, 2, 1, "", "get_event_df"], [31, 2, 1, "", "get_holiday_df"], [31, 2, 1, "", "get_model_diagnostics"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "load"], [31, 2, 1, "id11", "predict"], [31, 2, 1, "", "save"], [31, 3, 1, "id12", "training_framework"]], "maxaimodel.spark": [[33, 0, 0, "-", "classification"], [34, 0, 0, "-", "clustering"], [35, 0, 0, "-", "recommendation"], [36, 0, 0, "-", "regression"], [37, 0, 0, "-", "timeseries"]], "maxaimodel.spark.classification": [[33, 0, 0, "-", "spark_dt"], [33, 0, 0, "-", "spark_fmc"], [33, 0, 0, "-", "spark_gbt"], [33, 0, 0, "-", "spark_lr"], [33, 0, 0, "-", "spark_mlp"], [33, 0, 0, "-", "spark_nb"], [33, 0, 0, "-", "spark_ovr"], [33, 0, 0, "-", "spark_rf"], [33, 0, 0, "-", "spark_svc"]], "maxaimodel.spark.classification.spark_dt": [[33, 1, 1, "", "SparkDecisionTreeClassifier"]], "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_fmc": [[33, 1, 1, "", "SparkFMClassifier"]], "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_gbt": [[33, 1, 1, "", "SparkGBTClassifier"]], "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_lr": [[33, 1, 1, "", "SparkLogisticRegression"]], "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_mlp": [[33, 1, 1, "", "SparkMultilayerPerceptronClassifier"]], "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_nb": [[33, 1, 1, "", "SparkNaiveBayes"]], "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_ovr": [[33, 1, 1, "", "SparkOneVsRest"]], "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest": [[33, 2, 1, "", "best_params"], [33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_rf": [[33, 1, 1, "", "SparkRFClassifier"]], "maxaimodel.spark.classification.spark_rf.SparkRFClassifier": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.classification.spark_svc": [[33, 1, 1, "", "SparkLinearSVC"]], "maxaimodel.spark.classification.spark_svc.SparkLinearSVC": [[33, 2, 1, "", "build"], [33, 2, 1, "", "load"]], "maxaimodel.spark.clustering": [[34, 0, 0, "-", "spark_hvt"], [34, 0, 0, "-", "spark_kmeans"]], "maxaimodel.spark.clustering.spark_hvt": [[34, 1, 1, "", "HVT"]], "maxaimodel.spark.clustering.spark_hvt.HVT": [[34, 2, 1, "", "depth_clustering_check"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "kmeans_fit"], [34, 2, 1, "", "kmeans_predict"], [34, 2, 1, "", "l_clustering_fit"], [34, 2, 1, "", "l_clustering_predict"], [34, 2, 1, "", "lhier_clustering_fit"], [34, 2, 1, "", "predict"]], "maxaimodel.spark.clustering.spark_kmeans": [[34, 1, 1, "", "SparkKMeansClustering"]], "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering": [[34, 2, 1, "", "build"], [34, 2, 1, "", "load"], [34, 2, 1, "", "optimise_k"]], "maxaimodel.spark.recommendation": [[35, 0, 0, "-", "spark_als"]], "maxaimodel.spark.recommendation.spark_als": [[35, 1, 1, "", "SparkAlsRecommender"]], "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender": [[35, 2, 1, "", "build"], [35, 2, 1, "", "load"], [35, 2, 1, "", "optimise_model_without_cross_validator"], [35, 2, 1, "", "save"]], "maxaimodel.spark.regression": [[36, 0, 0, "-", "spark_aft_survival_regression"], [36, 0, 0, "-", "spark_dt_regression"], [36, 0, 0, "-", "spark_fm_regression"], [36, 0, 0, "-", "spark_gbt_regression"], [36, 0, 0, "-", "spark_gl_regression"], [36, 0, 0, "-", "spark_isotonic_regression"], [36, 0, 0, "-", "spark_linear_regression"], [36, 0, 0, "-", "spark_rf_regression"]], "maxaimodel.spark.regression.spark_aft_survival_regression": [[36, 1, 1, "", "SparkAFTSurvivalRegressor"]], "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_dt_regression": [[36, 1, 1, "", "SparkDTRegressor"]], "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_fm_regression": [[36, 1, 1, "", "SparkFMRegressor"]], "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_gbt_regression": [[36, 1, 1, "", "SparkGBTRegressor"]], "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_gl_regression": [[36, 1, 1, "", "SparkGLRegressor"]], "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_isotonic_regression": [[36, 1, 1, "", "SparkIsotonicRegressor"]], "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_linear_regression": [[36, 1, 1, "", "SparkLinearRegressor"]], "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.regression.spark_rf_regression": [[36, 1, 1, "", "SparkRFRegressor"]], "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor": [[36, 2, 1, "", "build"], [36, 2, 1, "", "load"]], "maxaimodel.spark.timeseries": [[37, 0, 0, "-", "spark_ts"], [37, 0, 0, "-", "xgb_ts"]], "maxaimodel.spark.timeseries.spark_ts": [[37, 1, 1, "", "SparkTSForecaster"]], "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster": [[37, 2, 1, "", "build"], [37, 2, 1, "id0", "fit"], [37, 2, 1, "", "get_model_diagnostics"], [37, 2, 1, "id7", "get_params"], [37, 2, 1, "", "load"], [37, 2, 1, "id8", "predict"], [37, 2, 1, "", "save"]], "maxaimodel.spark.timeseries.xgb_ts": [[37, 1, 1, "", "DataPrep"], [37, 1, 1, "", "XGBForecaster"]], "maxaimodel.spark.timeseries.xgb_ts.DataPrep": [[37, 2, 1, "", "increment_datetime"], [37, 2, 1, "", "infer_frequency"], [37, 2, 1, "", "prepare_data"]], "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster": [[37, 2, 1, "", "build"], [37, 2, 1, "", "fit"], [37, 2, 1, "", "get_model_diagnostics"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "load"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "save"]], "maxairesources": [[39, 0, 0, "-", "cleaning"], [38, 0, 0, "-", "conftest"], [40, 0, 0, "-", "customer360"], [41, 0, 0, "-", "datachecks"], [43, 0, 0, "-", "ensemble"], [44, 0, 0, "-", "eval"], [45, 0, 0, "-", "exception"], [46, 0, 0, "-", "factory"], [47, 0, 0, "-", "logging"], [48, 0, 0, "-", "model_approval"], [49, 0, 0, "-", "optimizer"], [50, 0, 0, "-", "pipeline"], [51, 0, 0, "-", "utilities"]], "maxairesources.cleaning": [[39, 0, 0, "-", "NoiseRemoval"]], "maxairesources.cleaning.NoiseRemoval": [[39, 1, 1, "", "NoiseRemoval"]], "maxairesources.cleaning.NoiseRemoval.NoiseRemoval": [[39, 2, 1, "", "convert_timeformat"], [39, 2, 1, "", "determine_outlier_thersholds_std"], [39, 2, 1, "", "determine_outlier_thresholds_iqr"], [39, 2, 1, "", "drop_duplicates"], [39, 2, 1, "", "impute_null"], [39, 2, 1, "", "outlier_detect"], [39, 2, 1, "", "read_config"], [39, 2, 1, "", "remove_outlier"]], "maxairesources.conftest": [[38, 4, 1, "", "binary_classifier_transformed_result"], [38, 4, 1, "", "multiclass_classifier_transformed_result"], [38, 4, 1, "", "normal_regressor_transformed_result"], [38, 4, 1, "", "spark_session"]], "maxairesources.customer360": [[40, 0, 0, "-", "utility"]], "maxairesources.customer360.utility": [[40, 4, 1, "", "column_rename"], [40, 4, 1, "", "create_features"], [40, 4, 1, "", "parse_arguments"], [40, 4, 1, "", "prepare_agg_arguments"], [40, 4, 1, "", "toDateType"]], "maxairesources.datachecks": [[41, 0, 0, "-", "analysis_base"], [41, 0, 0, "-", "dataframe_analysis_spark"], [42, 0, 0, "-", "test"]], "maxairesources.datachecks.analysis_base": [[41, 1, 1, "", "AnalysisBase"]], "maxairesources.datachecks.analysis_base.AnalysisBase": [[41, 2, 1, "", "compare_reports"], [41, 2, 1, "", "generate_data_health_report"], [41, 2, 1, "", "get_column_types"], [41, 2, 1, "", "save_analysis_report"], [41, 2, 1, "", "validate_report"]], "maxairesources.datachecks.dataframe_analysis_spark": [[41, 1, 1, "", "SparkDataFrameAnalyser"]], "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser": [[41, 2, 1, "", "compare_reports"], [41, 3, 1, "", "default_behaviours"], [41, 3, 1, "", "default_thresholds"], [41, 2, 1, "", "generate_data_health_report"], [41, 2, 1, "", "validate_report"]], "maxairesources.datachecks.test": [[42, 0, 0, "-", "conftest"], [42, 0, 0, "-", "test_dataframe_analysis_spark"]], "maxairesources.datachecks.test.conftest": [[42, 4, 1, "", "sample_feast_dataframe_for_analysis"]], "maxairesources.datachecks.test.test_dataframe_analysis_spark": [[42, 4, 1, "", "test_binary_classification_report_spark"]], "maxairesources.ensemble": [[43, 0, 0, "-", "ensemble"]], "maxairesources.ensemble.ensemble": [[43, 1, 1, "", "Ensemble"]], "maxairesources.ensemble.ensemble.Ensemble": [[43, 2, 1, "", "VotingClassifier"], [43, 2, 1, "", "VotingRegressor"], [43, 2, 1, "", "predict"]], "maxairesources.eval": [[44, 0, 0, "-", "classifier_evaluator_spark"], [44, 0, 0, "-", "model_evaluator"], [44, 0, 0, "-", "regressor_evaluator_spark"]], "maxairesources.eval.classifier_evaluator_spark": [[44, 1, 1, "", "ClassifierEvaluator"]], "maxairesources.eval.classifier_evaluator_spark.ClassifierEvaluator": [[44, 2, 1, "", "get_evaluation_report"]], "maxairesources.eval.model_evaluator": [[44, 1, 1, "", "DeepCheckModelWrapper"], [44, 1, 1, "", "ModelEvaluator"]], "maxairesources.eval.model_evaluator.DeepCheckModelWrapper": [[44, 5, 1, "", "feature_importances_"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_proba"]], "maxairesources.eval.model_evaluator.ModelEvaluator": [[44, 2, 1, "", "evaluate"]], "maxairesources.eval.regressor_evaluator_spark": [[44, 1, 1, "", "RegressorEvaluator"]], "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator": [[44, 2, 1, "", "general_regression_report_spark"], [44, 2, 1, "", "get_evaluation_report"]], "maxairesources.exception": [[45, 0, 0, "-", "exceptions"]], "maxairesources.exception.exceptions": [[45, 6, 1, "", "DataSourceNotDefinedError"], [45, 6, 1, "", "FeatureTransformException"], [45, 6, 1, "", "MaxAIException"], [45, 6, 1, "", "MissingEnvironmentVariable"], [45, 6, 1, "", "ModelLoadException"], [45, 6, 1, "", "ModelNotImplemented"], [45, 6, 1, "", "ModelSaveException"], [45, 6, 1, "", "ModelTrainException"], [45, 6, 1, "", "ModelTypeNotDefinedException"], [45, 6, 1, "", "PortInformationNotFoundError"], [45, 6, 1, "", "UnknownOperationMode"]], "maxairesources.exception.exceptions.MaxAIException": [[45, 2, 1, "", "getErrorMessage"]], "maxairesources.factory": [[46, 4, 1, "", "import_submodules"], [46, 0, 0, "-", "model_factory"]], "maxairesources.factory.model_factory": [[46, 1, 1, "", "ModelFactory"]], "maxairesources.factory.model_factory.ModelFactory": [[46, 2, 1, "", "get_model"], [46, 2, 1, "", "register_model"]], "maxairesources.logging": [[47, 0, 0, "-", "logger"]], "maxairesources.logging.logger": [[47, 1, 1, "", "CustomAdapter"], [47, 4, 1, "", "get_file_handler"], [47, 4, 1, "", "get_logger"], [47, 4, 1, "", "get_stream_handler"]], "maxairesources.logging.logger.CustomAdapter": [[47, 2, 1, "", "process"]], "maxairesources.model_approval": [[48, 0, 0, "-", "model_approver_spark"]], "maxairesources.model_approval.model_approver_spark": [[48, 1, 1, "", "ModelApprover"]], "maxairesources.model_approval.model_approver_spark.ModelApprover": [[48, 2, 1, "", "is_above_threshold"]], "maxairesources.pipeline": [[50, 0, 0, "-", "pipeline_factory"], [50, 0, 0, "-", "spark_pipeline"]], "maxairesources.pipeline.pipeline_factory": [[50, 1, 1, "", "SparkTransformerFactory"]], "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory": [[50, 2, 1, "", "get_transformer"], [50, 2, 1, "", "register_transformer"]], "maxairesources.pipeline.spark_pipeline": [[50, 1, 1, "", "SparkPipeline"]], "maxairesources.pipeline.spark_pipeline.SparkPipeline": [[50, 2, 1, "", "build"], [50, 2, 1, "", "build_multiple"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "fit_multiple"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "load"], [50, 2, 1, "", "save"], [50, 3, 1, "", "training_framework"], [50, 2, 1, "", "transform"]], "maxairesources.utilities": [[51, 0, 0, "-", "common_utils"], [51, 0, 0, "-", "data_connectors"], [51, 0, 0, "-", "encryption"], [51, 0, 0, "-", "misc"], [51, 0, 0, "-", "multi_train"], [51, 0, 0, "-", "preprocessing"], [51, 0, 0, "-", "spark_distributor"], [52, 0, 0, "-", "tests"], [51, 0, 0, "-", "train_test_split"]], "maxairesources.utilities.common_utils": [[51, 4, 1, "", "write_file_to_s3"]], "maxairesources.utilities.data_connectors": [[51, 1, 1, "", "DataFrame"], [51, 1, 1, "", "MaxAIDataFrame"]], "maxairesources.utilities.data_connectors.DataFrame": [[51, 3, 1, "", "ADLS"], [51, 3, 1, "", "AZURE"], [51, 3, 1, "", "CASSANDRA"], [51, 3, 1, "", "FEAST"], [51, 3, 1, "", "GS"], [51, 3, 1, "", "ICEBERG"], [51, 3, 1, "", "S3"], [51, 2, 1, "", "get"], [51, 2, 1, "", "get_data_for_a_port"], [51, 2, 1, "", "write"]], "maxairesources.utilities.encryption": [[51, 1, 1, "", "Encryption"]], "maxairesources.utilities.encryption.Encryption": [[51, 2, 1, "", "decrypt"], [51, 2, 1, "", "decrypt_columns"], [51, 2, 1, "", "encrypt"], [51, 2, 1, "", "encrypt_columns"]], "maxairesources.utilities.misc": [[51, 4, 1, "", "get_run_id_timestamp"], [51, 4, 1, "", "overwrite_dict"]], "maxairesources.utilities.multi_train": [[51, 1, 1, "", "MultiTrain"]], "maxairesources.utilities.multi_train.MultiTrain": [[51, 2, 1, "", "predict"], [51, 2, 1, "", "train_models"], [51, 5, 1, "", "trained_models"]], "maxairesources.utilities.preprocessing": [[51, 1, 1, "", "Preprocessing"]], "maxairesources.utilities.preprocessing.Preprocessing": [[51, 2, 1, "", "aggregate_transactional_data"]], "maxairesources.utilities.spark_distributor": [[51, 1, 1, "", "SparkDistributor"]], "maxairesources.utilities.spark_distributor.SparkDistributor": [[51, 2, 1, "", "pandas_to_spark_wrapper"]], "maxairesources.utilities.tests": [[52, 0, 0, "-", "test_data_connector"], [52, 0, 0, "-", "test_multi_train"], [52, 0, 0, "-", "test_spark_distributor"], [52, 0, 0, "-", "test_train_test_split"]], "maxairesources.utilities.tests.test_data_connector": [[52, 1, 1, "", "TestDataConnector"]], "maxairesources.utilities.tests.test_data_connector.TestDataConnector": [[52, 2, 1, "", "load_sample_data"], [52, 2, 1, "", "setup_class"], [52, 2, 1, "", "teardown_class"], [52, 2, 1, "", "test_read_encrypytion_pandas_csv"], [52, 2, 1, "", "test_read_encrypytion_spark_parquet"], [52, 2, 1, "", "test_read_without_encryption"], [52, 2, 1, "", "test_write_encrypytion_pandas_csv"], [52, 2, 1, "", "test_write_encrypytion_spark_parquet"], [52, 2, 1, "", "test_write_without_encryption"]], "maxairesources.utilities.tests.test_multi_train": [[52, 1, 1, "", "TestMultiTrain"]], "maxairesources.utilities.tests.test_multi_train.TestMultiTrain": [[52, 2, 1, "", "setup_class"], [52, 2, 1, "", "teardown_class"], [52, 2, 1, "", "test_predict"], [52, 2, 1, "", "test_train_models"], [52, 2, 1, "", "test_trained_models"]], "maxairesources.utilities.tests.test_spark_distributor": [[52, 1, 1, "", "TestSparkDistributor"]], "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor": [[52, 2, 1, "", "get_function"], [52, 2, 1, "", "load_sample_data"], [52, 2, 1, "", "setup_class"], [52, 2, 1, "", "teardown_class"], [52, 2, 1, "", "test_function_1_test1"], [52, 2, 1, "", "test_function_1_test2"]], "maxairesources.utilities.tests.test_train_test_split": [[52, 1, 1, "", "TestTrainTestSplit"]], "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit": [[52, 2, 1, "", "load_sample_data"], [52, 2, 1, "", "setup_class"], [52, 2, 1, "", "teardown_class"], [52, 2, 1, "", "test_random_split"], [52, 2, 1, "", "test_stratify_split"]], "maxairesources.utilities.train_test_split": [[51, 1, 1, "", "TrainTestSplit"]], "maxairesources.utilities.train_test_split.TrainTestSplit": [[51, 2, 1, "", "random_split"], [51, 2, 1, "", "stratified_split"], [51, 2, 1, "", "time_series_split"], [51, 2, 1, "", "train_test_split"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"welcom": [0, 5], "max": [0, 3, 5, 53], "ai": [0, 3, 5, 53], "": [0, 5], "document": [0, 5], "indic": [0, 5], "tabl": [0, 5], "maxaibas": [1, 6, 7, 8, 9, 10, 11, 12], "packag": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "subpackag": [1, 6, 10, 14, 21, 22, 23, 25, 28, 30, 32, 38, 41, 51], "modul": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55], "content": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "maxaifeatur": [2, 14, 15, 16, 17, 18, 19], "aggreg": [2, 15], "submodul": [2, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "d": [3, 53], "core": [3, 53], "api": 4, "ensembl": [7, 43], "evalu": 8, "evaluator_bas": 8, "featur": 9, "model": [10, 11, 12], "model_bas": 10, "h2o": [11, 22, 23, 24, 25, 26, 27, 28, 29], "h2o_bas": 11, "h2o_classifi": 11, "h2o_regressor": 11, "h2o_unsupervis": 11, "spark": [12, 32, 33, 34, 35, 36, 37], "spark_bas": 12, "spark_classifi": 12, "spark_clust": 12, "spark_recommend": 12, "spark_regressor": 12, "maxaidatahandl": 13, "data_evalu": 13, "datafactori": 13, "dataset": 13, "featuretool": 16, "select": 17, "model_based_selector": 17, "selector": 17, "timeseri": [18, 31, 37], "univari": 18, "transform": 19, "window": 19, "maxaimetadata": 20, "maxflow": 20, "test_maxflow": 20, "maxaimodel": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "classif": [23, 24, 33], "h2o_dl": 23, "h2o_drf": 23, "h2o_gam": 23, "h2o_gbm": 23, "h2o_glm": 23, "h2o_rf": 23, "h2o_xgb": 23, "test": [24, 26, 29, 42, 52], "test_classif": 24, "cluster": [25, 26, 34], "h2o_kmean": 25, "test_clust": 26, "regress": [27, 36], "h2o_dl_regressor": 27, "h2o_drf_regressor": 27, "h2o_gam_regressor": 27, "h2o_gbm_regressor": 27, "h2o_glm_regressor": 27, "h2o_rulefit_regressor": 27, "h2o_xgb_regressor": 27, "unsupervis": [28, 29], "h2o_isolation_forest": 28, "h2o_pca": 28, "test_unsupervis": 29, "python": [30, 31], "arima": 31, "garch": 31, "neuroprophet": 31, "prophet": 31, "spark_dt": 33, "spark_fmc": 33, "spark_gbt": 33, "spark_lr": 33, "spark_mlp": 33, "spark_nb": 33, "spark_ovr": 33, "spark_rf": 33, "spark_svc": 33, "spark_hvt": 34, "spark_kmean": 34, "recommend": 35, "spark_al": 35, "spark_aft_survival_regress": 36, "spark_dt_regress": 36, "spark_fm_regress": 36, "spark_gbt_regress": 36, "spark_gl_regress": 36, "spark_isotonic_regress": 36, "spark_linear_regress": 36, "spark_rf_regress": 36, "spark_t": 37, "xgb_t": 37, "maxairesourc": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "conftest": [38, 42], "clean": 39, "noiseremov": 39, "customer360": 40, "util": [40, 51, 52], "datacheck": [41, 42], "analysis_bas": 41, "dataframe_analysis_spark": 41, "test_dataframe_analysis_spark": 42, "eval": 44, "classifier_evaluator_spark": 44, "model_evalu": 44, "argument": 44, "return": 44, "exampl": 44, "regressor_evaluator_spark": 44, "except": 45, "factori": 46, "model_factori": 46, "log": 47, "logger": 47, "model_approv": 48, "model_approver_spark": 48, "optim": 49, "param_optim": 49, "pipelin": 50, "pipeline_factori": 50, "spark_pipelin": 50, "common_util": 51, "data_connector": 51, "encrypt": 51, "misc": 51, "multi_train": 51, "preprocess": 51, "spark_distributor": 51, "train_test_split": 51, "test_data_connector": 52, "test_multi_train": 52, "test_spark_distributor": 52, "test_train_test_split": 52, "pdoc_setup": 54, "setup": 55}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Welcome to Max.AI\u2019s documentation!": [[0, "welcome-to-max-ai-s-documentation"], [5, "welcome-to-max-ai-s-documentation"]], "Indices and tables": [[0, "indices-and-tables"], [5, "indices-and-tables"]], "maxaibase package": [[1, "maxaibase-package"], [6, "maxaibase-package"]], "Subpackages": [[1, "subpackages"], [6, "subpackages"], [10, "subpackages"], [14, "subpackages"], [21, "subpackages"], [22, "subpackages"], [23, "subpackages"], [25, "subpackages"], [28, "subpackages"], [30, "subpackages"], [32, "subpackages"], [38, "subpackages"], [41, "subpackages"], [51, "subpackages"]], "Module contents": [[1, "module-maxaibase"], [2, "module-maxaifeaturization.aggregation"], [6, "module-maxaibase"], [7, "module-maxaibase.ensemble"], [8, "module-maxaibase.evaluation"], [9, "module-maxaibase.featurization"], [10, "module-maxaibase.model"], [11, "module-maxaibase.model.H2O"], [12, "module-maxaibase.model.spark"], [13, "module-maxaidatahandling"], [14, "module-maxaifeaturization"], [15, "module-maxaifeaturization.aggregation"], [16, "module-maxaifeaturization.featuretools"], [17, "module-maxaifeaturization.selection"], [18, "module-maxaifeaturization.timeseries"], [19, "module-maxaifeaturization.transformation"], [20, "module-maxaimetadata"], [21, "module-maxaimodel"], [22, "module-maxaimodel.H2O"], [23, "module-maxaimodel.H2O.classification"], [24, "module-maxaimodel.H2O.classification.test"], [25, "module-maxaimodel.H2O.clustering"], [26, "module-maxaimodel.H2O.clustering.test"], [27, "module-maxaimodel.H2O.regression"], [28, "module-maxaimodel.H2O.unsupervised"], [29, "module-maxaimodel.H2O.unsupervised.test"], [30, "module-maxaimodel.python"], [31, "module-maxaimodel.python.timeseries"], [32, "module-maxaimodel.spark"], [33, "module-maxaimodel.spark.classification"], [34, "module-maxaimodel.spark.clustering"], [35, "module-maxaimodel.spark.recommendation"], [36, "module-maxaimodel.spark.regression"], [37, "module-maxaimodel.spark.timeseries"], [38, "module-maxairesources"], [39, "module-maxairesources.cleaning"], [40, "module-maxairesources.customer360"], [41, "module-maxairesources.datachecks"], [42, "module-maxairesources.datachecks.test"], [43, "module-maxairesources.ensemble"], [44, "module-maxairesources.eval"], [45, "module-maxairesources.exception"], [46, "module-maxairesources.factory"], [47, "module-maxairesources.logging"], [48, "module-maxairesources.model_approval"], [49, "module-maxairesources.optimizer"], [50, "module-maxairesources.pipeline"], [51, "module-maxairesources.utilities"], [52, "module-maxairesources.utilities.tests"]], "maxaifeaturization.aggregation package": [[2, "maxaifeaturization-aggregation-package"], [15, "maxaifeaturization-aggregation-package"]], "Submodules": [[2, "submodules"], [8, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [31, "submodules"], [33, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"], [38, "submodules"], [39, "submodules"], [40, "submodules"], [41, "submodules"], [42, "submodules"], [43, "submodules"], [44, "submodules"], [45, "submodules"], [46, "submodules"], [47, "submodules"], [48, "submodules"], [49, "submodules"], [50, "submodules"], [51, "submodules"], [52, "submodules"]], "maxaifeaturization.aggregation.aggregation module": [[2, "module-maxaifeaturization.aggregation.aggregation"], [15, "module-maxaifeaturization.aggregation.aggregation"]], "max.ai.ds.core": [[3, "max-ai-ds-core"], [53, "max-ai-ds-core"]], "API": [[4, "api"]], "maxaibase.ensemble package": [[7, "maxaibase-ensemble-package"]], "maxaibase.evaluation package": [[8, "maxaibase-evaluation-package"]], "maxaibase.evaluation.evaluator_base module": [[8, "module-maxaibase.evaluation.evaluator_base"]], "maxaibase.featurization package": [[9, "maxaibase-featurization-package"]], "maxaibase.model package": [[10, "maxaibase-model-package"]], "maxaibase.model.model_base module": [[10, "module-maxaibase.model.model_base"]], "maxaibase.model.H2O package": [[11, "maxaibase-model-h2o-package"]], "maxaibase.model.H2O.h2o_base module": [[11, "module-maxaibase.model.H2O.h2o_base"]], "maxaibase.model.H2O.h2o_classifier module": [[11, "module-maxaibase.model.H2O.h2o_classifier"]], "maxaibase.model.H2O.h2o_regressor module": [[11, "module-maxaibase.model.H2O.h2o_regressor"]], "maxaibase.model.H2O.h2o_unsupervised module": [[11, "module-maxaibase.model.H2O.h2o_unsupervised"]], "maxaibase.model.spark package": [[12, "maxaibase-model-spark-package"]], "maxaibase.model.spark.spark_base module": [[12, "module-maxaibase.model.spark.spark_base"]], "maxaibase.model.spark.spark_classifier module": [[12, "module-maxaibase.model.spark.spark_classifier"]], "maxaibase.model.spark.spark_clustering module": [[12, "module-maxaibase.model.spark.spark_clustering"]], "maxaibase.model.spark.spark_recommender module": [[12, "module-maxaibase.model.spark.spark_recommender"]], "maxaibase.model.spark.spark_regressor module": [[12, "module-maxaibase.model.spark.spark_regressor"]], "maxaidatahandling package": [[13, "maxaidatahandling-package"]], "maxaidatahandling.data_evaluator module": [[13, "module-maxaidatahandling.data_evaluator"]], "maxaidatahandling.datafactory module": [[13, "module-maxaidatahandling.datafactory"]], "maxaidatahandling.dataset module": [[13, "module-maxaidatahandling.dataset"]], "}": [[13, "id7"]], "maxaifeaturization package": [[14, "maxaifeaturization-package"]], "maxaifeaturization.featuretools package": [[16, "maxaifeaturization-featuretools-package"]], "maxaifeaturization.featuretools.featuretools module": [[16, "module-maxaifeaturization.featuretools.featuretools"]], "maxaifeaturization.selection package": [[17, "maxaifeaturization-selection-package"]], "maxaifeaturization.selection.model_based_selector module": [[17, "module-maxaifeaturization.selection.model_based_selector"]], "maxaifeaturization.selection.selector module": [[17, "module-maxaifeaturization.selection.selector"]], "maxaifeaturization.timeseries package": [[18, "maxaifeaturization-timeseries-package"]], "maxaifeaturization.timeseries.univariate module": [[18, "module-maxaifeaturization.timeseries.univariate"]], "maxaifeaturization.transformation package": [[19, "maxaifeaturization-transformation-package"]], "maxaifeaturization.transformation.transform module": [[19, "module-maxaifeaturization.transformation.transform"]], "maxaifeaturization.transformation.window module": [[19, "module-maxaifeaturization.transformation.window"]], "maxaimetadata package": [[20, "maxaimetadata-package"]], "maxaimetadata.maxflow module": [[20, "module-maxaimetadata.maxflow"]], "maxaimetadata.test_maxflow module": [[20, "module-maxaimetadata.test_maxflow"]], "maxaimodel package": [[21, "maxaimodel-package"]], "maxaimodel.H2O package": [[22, "maxaimodel-h2o-package"]], "maxaimodel.H2O.classification package": [[23, "maxaimodel-h2o-classification-package"]], "maxaimodel.H2O.classification.h2o_dl module": [[23, "module-maxaimodel.H2O.classification.h2o_dl"]], "maxaimodel.H2O.classification.h2o_drf module": [[23, "module-maxaimodel.H2O.classification.h2o_drf"]], "maxaimodel.H2O.classification.h2o_gam module": [[23, "module-maxaimodel.H2O.classification.h2o_gam"]], "maxaimodel.H2O.classification.h2o_gbm module": [[23, "module-maxaimodel.H2O.classification.h2o_gbm"]], "maxaimodel.H2O.classification.h2o_glm module": [[23, "module-maxaimodel.H2O.classification.h2o_glm"]], "maxaimodel.H2O.classification.h2o_rf module": [[23, "maxaimodel-h2o-classification-h2o-rf-module"]], "maxaimodel.H2O.classification.h2o_xgb module": [[23, "module-maxaimodel.H2O.classification.h2o_xgb"]], "maxaimodel.H2O.classification.test package": [[24, "maxaimodel-h2o-classification-test-package"]], "maxaimodel.H2O.classification.test.test_classification module": [[24, "module-maxaimodel.H2O.classification.test.test_classification"]], "maxaimodel.H2O.clustering package": [[25, "maxaimodel-h2o-clustering-package"]], "maxaimodel.H2O.clustering.h2o_kmeans module": [[25, "module-maxaimodel.H2O.clustering.h2o_kmeans"]], "maxaimodel.H2O.clustering.test package": [[26, "maxaimodel-h2o-clustering-test-package"]], "maxaimodel.H2O.clustering.test.test_clustering module": [[26, "module-maxaimodel.H2O.clustering.test.test_clustering"]], "maxaimodel.H2O.regression package": [[27, "maxaimodel-h2o-regression-package"]], "maxaimodel.H2O.regression.h2o_dl_regressor module": [[27, "module-maxaimodel.H2O.regression.h2o_dl_regressor"]], "maxaimodel.H2O.regression.h2o_drf_regressor module": [[27, "module-maxaimodel.H2O.regression.h2o_drf_regressor"]], "maxaimodel.H2O.regression.h2o_gam_regressor module": [[27, "module-maxaimodel.H2O.regression.h2o_gam_regressor"]], "maxaimodel.H2O.regression.h2o_gbm_regressor module": [[27, "module-maxaimodel.H2O.regression.h2o_gbm_regressor"]], "maxaimodel.H2O.regression.h2o_glm_regressor module": [[27, "module-maxaimodel.H2O.regression.h2o_glm_regressor"]], "maxaimodel.H2O.regression.h2o_rulefit_regressor module": [[27, "maxaimodel-h2o-regression-h2o-rulefit-regressor-module"]], "maxaimodel.H2O.regression.h2o_xgb_regressor module": [[27, "module-maxaimodel.H2O.regression.h2o_xgb_regressor"]], "maxaimodel.H2O.unsupervised package": [[28, "maxaimodel-h2o-unsupervised-package"]], "maxaimodel.H2O.unsupervised.h2o_isolation_forest module": [[28, "module-maxaimodel.H2O.unsupervised.h2o_isolation_forest"]], "maxaimodel.H2O.unsupervised.h2o_pca module": [[28, "maxaimodel-h2o-unsupervised-h2o-pca-module"]], "maxaimodel.H2O.unsupervised.test package": [[29, "maxaimodel-h2o-unsupervised-test-package"]], "maxaimodel.H2O.unsupervised.test.test_unsupervised module": [[29, "module-maxaimodel.H2O.unsupervised.test.test_unsupervised"]], "maxaimodel.python package": [[30, "maxaimodel-python-package"]], "maxaimodel.python.timeseries package": [[31, "maxaimodel-python-timeseries-package"]], "maxaimodel.python.timeseries.arima module": [[31, "module-maxaimodel.python.timeseries.arima"]], "maxaimodel.python.timeseries.garch module": [[31, "module-maxaimodel.python.timeseries.garch"]], "maxaimodel.python.timeseries.neuroprophet module": [[31, "module-maxaimodel.python.timeseries.neuroprophet"]], "maxaimodel.python.timeseries.prophet module": [[31, "module-maxaimodel.python.timeseries.prophet"]], "maxaimodel.spark package": [[32, "maxaimodel-spark-package"]], "maxaimodel.spark.classification package": [[33, "maxaimodel-spark-classification-package"]], "maxaimodel.spark.classification.spark_dt module": [[33, "module-maxaimodel.spark.classification.spark_dt"]], "maxaimodel.spark.classification.spark_fmc module": [[33, "module-maxaimodel.spark.classification.spark_fmc"]], "maxaimodel.spark.classification.spark_gbt module": [[33, "module-maxaimodel.spark.classification.spark_gbt"]], "maxaimodel.spark.classification.spark_lr module": [[33, "module-maxaimodel.spark.classification.spark_lr"]], "maxaimodel.spark.classification.spark_mlp module": [[33, "module-maxaimodel.spark.classification.spark_mlp"]], "maxaimodel.spark.classification.spark_nb module": [[33, "module-maxaimodel.spark.classification.spark_nb"]], "maxaimodel.spark.classification.spark_ovr module": [[33, "module-maxaimodel.spark.classification.spark_ovr"]], "maxaimodel.spark.classification.spark_rf module": [[33, "module-maxaimodel.spark.classification.spark_rf"]], "maxaimodel.spark.classification.spark_svc module": [[33, "module-maxaimodel.spark.classification.spark_svc"]], "maxaimodel.spark.clustering package": [[34, "maxaimodel-spark-clustering-package"]], "maxaimodel.spark.clustering.spark_hvt module": [[34, "module-maxaimodel.spark.clustering.spark_hvt"]], "maxaimodel.spark.clustering.spark_kmeans module": [[34, "module-maxaimodel.spark.clustering.spark_kmeans"]], "maxaimodel.spark.recommendation package": [[35, "maxaimodel-spark-recommendation-package"]], "maxaimodel.spark.recommendation.spark_als module": [[35, "module-maxaimodel.spark.recommendation.spark_als"]], "maxaimodel.spark.regression package": [[36, "maxaimodel-spark-regression-package"]], "maxaimodel.spark.regression.spark_aft_survival_regression module": [[36, "module-maxaimodel.spark.regression.spark_aft_survival_regression"]], "maxaimodel.spark.regression.spark_dt_regression module": [[36, "module-maxaimodel.spark.regression.spark_dt_regression"]], "maxaimodel.spark.regression.spark_fm_regression module": [[36, "module-maxaimodel.spark.regression.spark_fm_regression"]], "maxaimodel.spark.regression.spark_gbt_regression module": [[36, "module-maxaimodel.spark.regression.spark_gbt_regression"]], "maxaimodel.spark.regression.spark_gl_regression module": [[36, "module-maxaimodel.spark.regression.spark_gl_regression"]], "maxaimodel.spark.regression.spark_isotonic_regression module": [[36, "module-maxaimodel.spark.regression.spark_isotonic_regression"]], "maxaimodel.spark.regression.spark_linear_regression module": [[36, "module-maxaimodel.spark.regression.spark_linear_regression"]], "maxaimodel.spark.regression.spark_rf_regression module": [[36, "module-maxaimodel.spark.regression.spark_rf_regression"]], "maxaimodel.spark.timeseries package": [[37, "maxaimodel-spark-timeseries-package"]], "maxaimodel.spark.timeseries.spark_ts module": [[37, "module-maxaimodel.spark.timeseries.spark_ts"]], "maxaimodel.spark.timeseries.xgb_ts module": [[37, "module-maxaimodel.spark.timeseries.xgb_ts"]], "maxairesources package": [[38, "maxairesources-package"]], "maxairesources.conftest module": [[38, "module-maxairesources.conftest"]], "maxairesources.cleaning package": [[39, "maxairesources-cleaning-package"]], "maxairesources.cleaning.NoiseRemoval module": [[39, "module-maxairesources.cleaning.NoiseRemoval"]], "maxairesources.customer360 package": [[40, "maxairesources-customer360-package"]], "maxairesources.customer360.utility module": [[40, "module-maxairesources.customer360.utility"]], "maxairesources.datachecks package": [[41, "maxairesources-datachecks-package"]], "maxairesources.datachecks.analysis_base module": [[41, "module-maxairesources.datachecks.analysis_base"]], "maxairesources.datachecks.dataframe_analysis_spark module": [[41, "module-maxairesources.datachecks.dataframe_analysis_spark"]], "maxairesources.datachecks.test package": [[42, "maxairesources-datachecks-test-package"]], "maxairesources.datachecks.test.conftest module": [[42, "module-maxairesources.datachecks.test.conftest"]], "maxairesources.datachecks.test.test_dataframe_analysis_spark module": [[42, "module-maxairesources.datachecks.test.test_dataframe_analysis_spark"]], "maxairesources.ensemble package": [[43, "maxairesources-ensemble-package"]], "maxairesources.ensemble.ensemble module": [[43, "module-maxairesources.ensemble.ensemble"]], "maxairesources.eval package": [[44, "maxairesources-eval-package"]], "maxairesources.eval.classifier_evaluator_spark module": [[44, "module-maxairesources.eval.classifier_evaluator_spark"]], "maxairesources.eval.model_evaluator module": [[44, "module-maxairesources.eval.model_evaluator"]], "Arguments:": [[44, "arguments"]], "Returns:": [[44, "returns"]], "Example:": [[44, "example"]], "maxairesources.eval.regressor_evaluator_spark module": [[44, "module-maxairesources.eval.regressor_evaluator_spark"]], "maxairesources.exception package": [[45, "maxairesources-exception-package"]], "maxairesources.exception.exceptions module": [[45, "module-maxairesources.exception.exceptions"]], "maxairesources.factory package": [[46, "maxairesources-factory-package"]], "maxairesources.factory.model_factory module": [[46, "module-maxairesources.factory.model_factory"]], "maxairesources.logging package": [[47, "maxairesources-logging-package"]], "maxairesources.logging.logger module": [[47, "module-maxairesources.logging.logger"]], "maxairesources.model_approval package": [[48, "maxairesources-model-approval-package"]], "maxairesources.model_approval.model_approver_spark module": [[48, "module-maxairesources.model_approval.model_approver_spark"]], "maxairesources.optimizer package": [[49, "maxairesources-optimizer-package"]], "maxairesources.optimizer.param_optimizer module": [[49, "maxairesources-optimizer-param-optimizer-module"]], "maxairesources.pipeline package": [[50, "maxairesources-pipeline-package"]], "maxairesources.pipeline.pipeline_factory module": [[50, "module-maxairesources.pipeline.pipeline_factory"]], "maxairesources.pipeline.spark_pipeline module": [[50, "module-maxairesources.pipeline.spark_pipeline"]], "maxairesources.utilities package": [[51, "maxairesources-utilities-package"]], "maxairesources.utilities.common_utils module": [[51, "module-maxairesources.utilities.common_utils"]], "maxairesources.utilities.data_connectors module": [[51, "module-maxairesources.utilities.data_connectors"]], "maxairesources.utilities.encryption module": [[51, "module-maxairesources.utilities.encryption"]], "maxairesources.utilities.misc module": [[51, "module-maxairesources.utilities.misc"]], "maxairesources.utilities.multi_train module": [[51, "module-maxairesources.utilities.multi_train"]], "maxairesources.utilities.preprocessing module": [[51, "module-maxairesources.utilities.preprocessing"]], "maxairesources.utilities.spark_distributor module": [[51, "module-maxairesources.utilities.spark_distributor"]], "maxairesources.utilities.train_test_split module": [[51, "module-maxairesources.utilities.train_test_split"]], "maxairesources.utilities.tests package": [[52, "maxairesources-utilities-tests-package"]], "maxairesources.utilities.tests.test_data_connector module": [[52, "module-maxairesources.utilities.tests.test_data_connector"]], "maxairesources.utilities.tests.test_multi_train module": [[52, "module-maxairesources.utilities.tests.test_multi_train"]], "maxairesources.utilities.tests.test_spark_distributor module": [[52, "module-maxairesources.utilities.tests.test_spark_distributor"]], "maxairesources.utilities.tests.test_train_test_split module": [[52, "module-maxairesources.utilities.tests.test_train_test_split"]], "pdoc_setup module": [[54, "pdoc-setup-module"]], "setup module": [[55, "setup-module"]]}, "indexentries": {"maxaibase": [[1, "module-maxaibase"], [6, "module-maxaibase"]], "module": [[1, "module-maxaibase"], [2, "module-maxaifeaturization.aggregation"], [2, "module-maxaifeaturization.aggregation.aggregation"], [6, "module-maxaibase"], [7, "module-maxaibase.ensemble"], [8, "module-maxaibase.evaluation"], [8, "module-maxaibase.evaluation.evaluator_base"], [9, "module-maxaibase.featurization"], [10, "module-maxaibase.model"], [10, "module-maxaibase.model.model_base"], [11, "module-maxaibase.model.H2O"], [11, "module-maxaibase.model.H2O.h2o_base"], [11, "module-maxaibase.model.H2O.h2o_classifier"], [11, "module-maxaibase.model.H2O.h2o_regressor"], [11, "module-maxaibase.model.H2O.h2o_unsupervised"], [12, "module-maxaibase.model.spark"], [12, "module-maxaibase.model.spark.spark_base"], [12, "module-maxaibase.model.spark.spark_classifier"], [12, "module-maxaibase.model.spark.spark_clustering"], [12, "module-maxaibase.model.spark.spark_recommender"], [12, "module-maxaibase.model.spark.spark_regressor"], [13, "module-maxaidatahandling"], [13, "module-maxaidatahandling.data_evaluator"], [13, "module-maxaidatahandling.datafactory"], [13, "module-maxaidatahandling.dataset"], [14, "module-maxaifeaturization"], [15, "module-maxaifeaturization.aggregation"], [15, "module-maxaifeaturization.aggregation.aggregation"], [16, "module-maxaifeaturization.featuretools"], [16, "module-maxaifeaturization.featuretools.featuretools"], [17, "module-maxaifeaturization.selection"], [17, "module-maxaifeaturization.selection.model_based_selector"], [17, "module-maxaifeaturization.selection.selector"], [18, "module-maxaifeaturization.timeseries"], [18, "module-maxaifeaturization.timeseries.univariate"], [19, "module-maxaifeaturization.transformation"], [19, "module-maxaifeaturization.transformation.transform"], [19, "module-maxaifeaturization.transformation.window"], [20, "module-maxaimetadata"], [20, "module-maxaimetadata.maxflow"], [20, "module-maxaimetadata.test_maxflow"], [21, "module-maxaimodel"], [22, "module-maxaimodel.H2O"], [23, "module-maxaimodel.H2O.classification"], [23, "module-maxaimodel.H2O.classification.h2o_dl"], [23, "module-maxaimodel.H2O.classification.h2o_drf"], [23, "module-maxaimodel.H2O.classification.h2o_gam"], [23, "module-maxaimodel.H2O.classification.h2o_gbm"], [23, "module-maxaimodel.H2O.classification.h2o_glm"], [23, "module-maxaimodel.H2O.classification.h2o_xgb"], [24, "module-maxaimodel.H2O.classification.test"], [24, "module-maxaimodel.H2O.classification.test.test_classification"], [25, "module-maxaimodel.H2O.clustering"], [25, "module-maxaimodel.H2O.clustering.h2o_kmeans"], [26, "module-maxaimodel.H2O.clustering.test"], [26, "module-maxaimodel.H2O.clustering.test.test_clustering"], [27, "module-maxaimodel.H2O.regression"], [27, "module-maxaimodel.H2O.regression.h2o_dl_regressor"], [27, "module-maxaimodel.H2O.regression.h2o_drf_regressor"], [27, "module-maxaimodel.H2O.regression.h2o_gam_regressor"], [27, "module-maxaimodel.H2O.regression.h2o_gbm_regressor"], [27, "module-maxaimodel.H2O.regression.h2o_glm_regressor"], [27, "module-maxaimodel.H2O.regression.h2o_xgb_regressor"], [28, "module-maxaimodel.H2O.unsupervised"], [28, "module-maxaimodel.H2O.unsupervised.h2o_isolation_forest"], [29, "module-maxaimodel.H2O.unsupervised.test"], [29, "module-maxaimodel.H2O.unsupervised.test.test_unsupervised"], [30, "module-maxaimodel.python"], [31, "module-maxaimodel.python.timeseries"], [31, "module-maxaimodel.python.timeseries.arima"], [31, "module-maxaimodel.python.timeseries.garch"], [31, "module-maxaimodel.python.timeseries.neuroprophet"], [31, "module-maxaimodel.python.timeseries.prophet"], [32, "module-maxaimodel.spark"], [33, "module-maxaimodel.spark.classification"], [33, "module-maxaimodel.spark.classification.spark_dt"], [33, "module-maxaimodel.spark.classification.spark_fmc"], [33, "module-maxaimodel.spark.classification.spark_gbt"], [33, "module-maxaimodel.spark.classification.spark_lr"], [33, "module-maxaimodel.spark.classification.spark_mlp"], [33, "module-maxaimodel.spark.classification.spark_nb"], [33, "module-maxaimodel.spark.classification.spark_ovr"], [33, "module-maxaimodel.spark.classification.spark_rf"], [33, "module-maxaimodel.spark.classification.spark_svc"], [34, "module-maxaimodel.spark.clustering"], [34, "module-maxaimodel.spark.clustering.spark_hvt"], [34, "module-maxaimodel.spark.clustering.spark_kmeans"], [35, "module-maxaimodel.spark.recommendation"], [35, "module-maxaimodel.spark.recommendation.spark_als"], [36, "module-maxaimodel.spark.regression"], [36, "module-maxaimodel.spark.regression.spark_aft_survival_regression"], [36, "module-maxaimodel.spark.regression.spark_dt_regression"], [36, "module-maxaimodel.spark.regression.spark_fm_regression"], [36, "module-maxaimodel.spark.regression.spark_gbt_regression"], [36, "module-maxaimodel.spark.regression.spark_gl_regression"], [36, "module-maxaimodel.spark.regression.spark_isotonic_regression"], [36, "module-maxaimodel.spark.regression.spark_linear_regression"], [36, "module-maxaimodel.spark.regression.spark_rf_regression"], [37, "module-maxaimodel.spark.timeseries"], [37, "module-maxaimodel.spark.timeseries.spark_ts"], [37, "module-maxaimodel.spark.timeseries.xgb_ts"], [38, "module-maxairesources"], [38, "module-maxairesources.conftest"], [39, "module-maxairesources.cleaning"], [39, "module-maxairesources.cleaning.NoiseRemoval"], [40, "module-maxairesources.customer360"], [40, "module-maxairesources.customer360.utility"], [41, "module-maxairesources.datachecks"], [41, "module-maxairesources.datachecks.analysis_base"], [41, "module-maxairesources.datachecks.dataframe_analysis_spark"], [42, "module-maxairesources.datachecks.test"], [42, "module-maxairesources.datachecks.test.conftest"], [42, "module-maxairesources.datachecks.test.test_dataframe_analysis_spark"], [43, "module-maxairesources.ensemble"], [43, "module-maxairesources.ensemble.ensemble"], [44, "module-maxairesources.eval"], [44, "module-maxairesources.eval.classifier_evaluator_spark"], [44, "module-maxairesources.eval.model_evaluator"], [44, "module-maxairesources.eval.regressor_evaluator_spark"], [45, "module-maxairesources.exception"], [45, "module-maxairesources.exception.exceptions"], [46, "module-maxairesources.factory"], [46, "module-maxairesources.factory.model_factory"], [47, "module-maxairesources.logging"], [47, "module-maxairesources.logging.logger"], [48, "module-maxairesources.model_approval"], [48, "module-maxairesources.model_approval.model_approver_spark"], [49, "module-maxairesources.optimizer"], [50, "module-maxairesources.pipeline"], [50, "module-maxairesources.pipeline.pipeline_factory"], [50, "module-maxairesources.pipeline.spark_pipeline"], [51, "module-maxairesources.utilities"], [51, "module-maxairesources.utilities.common_utils"], [51, "module-maxairesources.utilities.data_connectors"], [51, "module-maxairesources.utilities.encryption"], [51, "module-maxairesources.utilities.misc"], [51, "module-maxairesources.utilities.multi_train"], [51, "module-maxairesources.utilities.preprocessing"], [51, "module-maxairesources.utilities.spark_distributor"], [51, "module-maxairesources.utilities.train_test_split"], [52, "module-maxairesources.utilities.tests"], [52, "module-maxairesources.utilities.tests.test_data_connector"], [52, "module-maxairesources.utilities.tests.test_multi_train"], [52, "module-maxairesources.utilities.tests.test_spark_distributor"], [52, "module-maxairesources.utilities.tests.test_train_test_split"]], "aggregation (class in maxaifeaturization.aggregation.aggregation)": [[2, "maxaifeaturization.aggregation.aggregation.Aggregation"], [15, "maxaifeaturization.aggregation.aggregation.Aggregation"]], "constants (class in maxaifeaturization.aggregation.aggregation)": [[2, "maxaifeaturization.aggregation.aggregation.Constants"], [15, "maxaifeaturization.aggregation.aggregation.Constants"]], "execute() (maxaifeaturization.aggregation.aggregation.aggregation method)": [[2, "maxaifeaturization.aggregation.aggregation.Aggregation.execute"], [15, "maxaifeaturization.aggregation.aggregation.Aggregation.execute"]], "maxaifeaturization.aggregation": [[2, "module-maxaifeaturization.aggregation"], [15, "module-maxaifeaturization.aggregation"]], "maxaifeaturization.aggregation.aggregation": [[2, "module-maxaifeaturization.aggregation.aggregation"], [15, "module-maxaifeaturization.aggregation.aggregation"]], "operation_dict (maxaifeaturization.aggregation.aggregation.constants attribute)": [[2, "maxaifeaturization.aggregation.aggregation.Constants.operation_dict"], [15, "maxaifeaturization.aggregation.aggregation.Constants.operation_dict"]], "maxaibase.ensemble": [[7, "module-maxaibase.ensemble"]], "baseevaluator (class in maxaibase.evaluation.evaluator_base)": [[8, "maxaibase.evaluation.evaluator_base.BaseEvaluator"]], "get_evaluation_report() (maxaibase.evaluation.evaluator_base.baseevaluator method)": [[8, "maxaibase.evaluation.evaluator_base.BaseEvaluator.get_evaluation_report"]], "maxaibase.evaluation": [[8, "module-maxaibase.evaluation"]], "maxaibase.evaluation.evaluator_base": [[8, "module-maxaibase.evaluation.evaluator_base"]], "save_results() (maxaibase.evaluation.evaluator_base.baseevaluator static method)": [[8, "maxaibase.evaluation.evaluator_base.BaseEvaluator.save_results"]], "maxaibase.featurization": [[9, "module-maxaibase.featurization"]], "basemodel (class in maxaibase.model.model_base)": [[10, "maxaibase.model.model_base.BaseModel"]], "build() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.build"]], "fit() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.fit"]], "get_model_diagnostics() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.get_model_diagnostics"]], "get_params() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.get_params"]], "load() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.load"]], "maxaibase.model": [[10, "module-maxaibase.model"]], "maxaibase.model.model_base": [[10, "module-maxaibase.model.model_base"]], "predict() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.predict"]], "save() (maxaibase.model.model_base.basemodel method)": [[10, "maxaibase.model.model_base.BaseModel.save"]], "h2obasemodel (class in maxaibase.model.h2o.h2o_base)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel"]], "h2oclassifierbasemodel (class in maxaibase.model.h2o.h2o_classifier)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel"]], "h2oregressorbasemodel (class in maxaibase.model.h2o.h2o_regressor)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel"]], "h2ounsupervisedbasemodel (class in maxaibase.model.h2o.h2o_unsupervised)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel"]], "best_params() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.best_params"]], "best_params() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.best_params"]], "build() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.build"]], "build() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.build"]], "build() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.build"]], "build() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.build"]], "fit() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.fit"]], "fit() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.fit"]], "fit() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.fit"]], "fit() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.fit"]], "get_model() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.get_model"]], "get_model() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.get_model"]], "get_model() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.get_model"]], "get_model_diagnostics() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.get_model_diagnostics"]], "get_params() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.get_params"]], "get_params() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.get_params"]], "get_params() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.get_params"]], "load() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.load"]], "maxaibase.model.h2o": [[11, "module-maxaibase.model.H2O"]], "maxaibase.model.h2o.h2o_base": [[11, "module-maxaibase.model.H2O.h2o_base"]], "maxaibase.model.h2o.h2o_classifier": [[11, "module-maxaibase.model.H2O.h2o_classifier"]], "maxaibase.model.h2o.h2o_regressor": [[11, "module-maxaibase.model.H2O.h2o_regressor"]], "maxaibase.model.h2o.h2o_unsupervised": [[11, "module-maxaibase.model.H2O.h2o_unsupervised"]], "optimise_model() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.optimise_model"]], "optimise_model() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.optimise_model"]], "optimise_model() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.optimise_model"]], "predict() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.predict"]], "predict() (maxaibase.model.h2o.h2o_classifier.h2oclassifierbasemodel method)": [[11, "maxaibase.model.H2O.h2o_classifier.H2OClassifierBaseModel.predict"]], "predict() (maxaibase.model.h2o.h2o_regressor.h2oregressorbasemodel method)": [[11, "maxaibase.model.H2O.h2o_regressor.H2ORegressorBaseModel.predict"]], "predict() (maxaibase.model.h2o.h2o_unsupervised.h2ounsupervisedbasemodel method)": [[11, "maxaibase.model.H2O.h2o_unsupervised.H2OUnsupervisedBaseModel.predict"]], "save() (maxaibase.model.h2o.h2o_base.h2obasemodel method)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.save"]], "training_framework (maxaibase.model.h2o.h2o_base.h2obasemodel attribute)": [[11, "maxaibase.model.H2O.h2o_base.H2OBaseModel.training_framework"]], "sparkbasemodel (class in maxaibase.model.spark.spark_base)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel"]], "sparkclassifierbasemodel (class in maxaibase.model.spark.spark_classifier)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel"]], "sparkclusteringbasemodel (class in maxaibase.model.spark.spark_clustering)": [[12, "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel"]], "sparkrecommenderbasemodel (class in maxaibase.model.spark.spark_recommender)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel"]], "sparkregressorbasemodel (class in maxaibase.model.spark.spark_regressor)": [[12, "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel"]], "best_params() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.best_params"]], "build() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.build"]], "build() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.build"]], "build() (maxaibase.model.spark.spark_clustering.sparkclusteringbasemodel method)": [[12, "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel.build"]], "build() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.build"]], "build() (maxaibase.model.spark.spark_regressor.sparkregressorbasemodel method)": [[12, "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel.build"]], "fit() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.fit"]], "fit() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.fit"]], "fit() (maxaibase.model.spark.spark_clustering.sparkclusteringbasemodel method)": [[12, "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel.fit"]], "fit() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.fit"]], "fit() (maxaibase.model.spark.spark_regressor.sparkregressorbasemodel method)": [[12, "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel.fit"]], "get_model_diagnostics() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.spark.spark_clustering.sparkclusteringbasemodel method)": [[12, "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.get_model_diagnostics"]], "get_model_diagnostics() (maxaibase.model.spark.spark_regressor.sparkregressorbasemodel method)": [[12, "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel.get_model_diagnostics"]], "get_param_builder() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.get_param_builder"]], "get_param_builder() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.get_param_builder"]], "get_params() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.get_params"]], "get_params() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.get_params"]], "get_params() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.get_params"]], "get_params() (maxaibase.model.spark.spark_regressor.sparkregressorbasemodel method)": [[12, "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel.get_params"]], "load() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.load"]], "load() (maxaibase.model.spark.spark_clustering.sparkclusteringbasemodel method)": [[12, "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel.load"]], "maxaibase.model.spark": [[12, "module-maxaibase.model.spark"]], "maxaibase.model.spark.spark_base": [[12, "module-maxaibase.model.spark.spark_base"]], "maxaibase.model.spark.spark_classifier": [[12, "module-maxaibase.model.spark.spark_classifier"]], "maxaibase.model.spark.spark_clustering": [[12, "module-maxaibase.model.spark.spark_clustering"]], "maxaibase.model.spark.spark_recommender": [[12, "module-maxaibase.model.spark.spark_recommender"]], "maxaibase.model.spark.spark_regressor": [[12, "module-maxaibase.model.spark.spark_regressor"]], "optimise_model() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.optimise_model"]], "optimise_model() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.optimise_model"]], "predict() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.predict"]], "predict() (maxaibase.model.spark.spark_classifier.sparkclassifierbasemodel method)": [[12, "maxaibase.model.spark.spark_classifier.SparkClassifierBaseModel.predict"]], "predict() (maxaibase.model.spark.spark_clustering.sparkclusteringbasemodel method)": [[12, "maxaibase.model.spark.spark_clustering.SparkClusteringBaseModel.predict"]], "predict() (maxaibase.model.spark.spark_recommender.sparkrecommenderbasemodel method)": [[12, "maxaibase.model.spark.spark_recommender.SparkRecommenderBaseModel.predict"]], "predict() (maxaibase.model.spark.spark_regressor.sparkregressorbasemodel method)": [[12, "maxaibase.model.spark.spark_regressor.SparkRegressorBaseModel.predict"]], "save() (maxaibase.model.spark.spark_base.sparkbasemodel method)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.save"]], "training_framework (maxaibase.model.spark.spark_base.sparkbasemodel attribute)": [[12, "maxaibase.model.spark.spark_base.SparkBaseModel.training_framework"]], "dataevaluator (class in maxaidatahandling.data_evaluator)": [[13, "maxaidatahandling.data_evaluator.DataEvaluator"]], "maxdatafactory (class in maxaidatahandling.datafactory)": [[13, "maxaidatahandling.datafactory.MAXDataFactory"]], "maxdataset (class in maxaidatahandling.dataset)": [[13, "maxaidatahandling.dataset.MaxDataset"]], "evaluate() (maxaidatahandling.data_evaluator.dataevaluator method)": [[13, "maxaidatahandling.data_evaluator.DataEvaluator.evaluate"]], "get_all_datasets() (maxaidatahandling.datafactory.maxdatafactory method)": [[13, "maxaidatahandling.datafactory.MAXDataFactory.get_all_datasets"]], "get_dataset() (maxaidatahandling.datafactory.maxdatafactory method)": [[13, "maxaidatahandling.datafactory.MAXDataFactory.get_dataset"]], "get_key_value() (in module maxaidatahandling.dataset)": [[13, "maxaidatahandling.dataset.get_key_value"]], "maxaidatahandling": [[13, "module-maxaidatahandling"]], "maxaidatahandling.data_evaluator": [[13, "module-maxaidatahandling.data_evaluator"]], "maxaidatahandling.datafactory": [[13, "module-maxaidatahandling.datafactory"]], "maxaidatahandling.dataset": [[13, "module-maxaidatahandling.dataset"]], "prepare_dataset() (maxaidatahandling.dataset.maxdataset method)": [[13, "maxaidatahandling.dataset.MaxDataset.prepare_dataset"]], "prepare_datasets() (maxaidatahandling.datafactory.maxdatafactory method)": [[13, "maxaidatahandling.datafactory.MAXDataFactory.prepare_datasets"]], "store_data() (maxaidatahandling.dataset.maxdataset method)": [[13, "maxaidatahandling.dataset.MaxDataset.store_data"]], "store_datasets() (maxaidatahandling.datafactory.maxdatafactory method)": [[13, "maxaidatahandling.datafactory.MAXDataFactory.store_datasets"]], "maxaifeaturization": [[14, "module-maxaifeaturization"]], "featuretoolfeatures (class in maxaifeaturization.featuretools.featuretools)": [[16, "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures"]], "execute() (maxaifeaturization.featuretools.featuretools.featuretoolfeatures method)": [[16, "maxaifeaturization.featuretools.featuretools.FeatureToolFeatures.execute"]], "maxaifeaturization.featuretools": [[16, "module-maxaifeaturization.featuretools"]], "maxaifeaturization.featuretools.featuretools": [[16, "module-maxaifeaturization.featuretools.featuretools"]], "constants (class in maxaifeaturization.selection.selector)": [[17, "maxaifeaturization.selection.selector.Constants"]], "featureselector (class in maxaifeaturization.selection.selector)": [[17, "maxaifeaturization.selection.selector.FeatureSelector"]], "modelbasedselector (class in maxaifeaturization.selection.model_based_selector)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector"]], "modelbasedselectormodel (class in maxaifeaturization.selection.model_based_selector)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel"]], "univariatefeatureselectorn() (in module maxaifeaturization.selection.selector)": [[17, "maxaifeaturization.selection.selector.UnivariateFeatureSelectorN"]], "extract_feature_details() (maxaifeaturization.selection.model_based_selector.modelbasedselector static method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector.extract_feature_details"]], "feature_imp (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel property)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.feature_imp"]], "fit() (maxaifeaturization.selection.model_based_selector.modelbasedselector method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector.fit"]], "load() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel class method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.load"]], "load() (maxaifeaturization.selection.selector.featureselector method)": [[17, "maxaifeaturization.selection.selector.FeatureSelector.load"]], "maxaifeaturization.selection": [[17, "module-maxaifeaturization.selection"]], "maxaifeaturization.selection.model_based_selector": [[17, "module-maxaifeaturization.selection.model_based_selector"]], "maxaifeaturization.selection.selector": [[17, "module-maxaifeaturization.selection.selector"]], "model (maxaifeaturization.selection.model_based_selector.modelbasedselector property)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelector.model"]], "overwrite() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.overwrite"]], "save() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.save"]], "save() (maxaifeaturization.selection.selector.featureselector method)": [[17, "maxaifeaturization.selection.selector.FeatureSelector.save"]], "select_features() (maxaifeaturization.selection.selector.featureselector method)": [[17, "maxaifeaturization.selection.selector.FeatureSelector.select_features"]], "selector (maxaifeaturization.selection.selector.featureselector property)": [[17, "maxaifeaturization.selection.selector.FeatureSelector.selector"]], "selectors (maxaifeaturization.selection.selector.constants attribute)": [[17, "maxaifeaturization.selection.selector.Constants.selectors"]], "transform() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.transform"]], "write() (maxaifeaturization.selection.model_based_selector.modelbasedselectormodel method)": [[17, "maxaifeaturization.selection.model_based_selector.ModelBasedSelectorModel.write"]], "decompose (class in maxaifeaturization.timeseries.univariate)": [[18, "maxaifeaturization.timeseries.univariate.Decompose"]], "stationaritytest (class in maxaifeaturization.timeseries.univariate)": [[18, "maxaifeaturization.timeseries.univariate.StationarityTest"]], "adf() (maxaifeaturization.timeseries.univariate.stationaritytest static method)": [[18, "maxaifeaturization.timeseries.univariate.StationarityTest.adf"]], "autocorrelation() (in module maxaifeaturization.timeseries.univariate)": [[18, "maxaifeaturization.timeseries.univariate.autocorrelation"]], "check_stationarity() (in module maxaifeaturization.timeseries.univariate)": [[18, "maxaifeaturization.timeseries.univariate.check_stationarity"]], "kpss() (maxaifeaturization.timeseries.univariate.stationaritytest static method)": [[18, "maxaifeaturization.timeseries.univariate.StationarityTest.kpss"]], "loess() (maxaifeaturization.timeseries.univariate.decompose static method)": [[18, "maxaifeaturization.timeseries.univariate.Decompose.loess"]], "maxaifeaturization.timeseries": [[18, "module-maxaifeaturization.timeseries"]], "maxaifeaturization.timeseries.univariate": [[18, "module-maxaifeaturization.timeseries.univariate"]], "moving_average() (maxaifeaturization.timeseries.univariate.decompose static method)": [[18, "maxaifeaturization.timeseries.univariate.Decompose.moving_average"]], "time_series_decomposition() (in module maxaifeaturization.timeseries.univariate)": [[18, "maxaifeaturization.timeseries.univariate.time_series_decomposition"]], "constants (class in maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.Constants"]], "constants (class in maxaifeaturization.transformation.window)": [[19, "maxaifeaturization.transformation.window.Constants"]], "datetimetransform (class in maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.DateTimeTransform"]], "filter (class in maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.Filter"]], "numtransforms (class in maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.NumTransforms"]], "strtransforms (class in maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.StrTransforms"]], "transformation (class in maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.Transformation"]], "windowoperations (class in maxaifeaturization.transformation.window)": [[19, "maxaifeaturization.transformation.window.WindowOperations"]], "alter_case() (maxaifeaturization.transformation.transform.strtransforms static method)": [[19, "maxaifeaturization.transformation.transform.StrTransforms.alter_case"]], "concat_columns() (maxaifeaturization.transformation.transform.strtransforms static method)": [[19, "maxaifeaturization.transformation.transform.StrTransforms.concat_columns"]], "convert_to_iso8601() (maxaifeaturization.transformation.transform.datetimetransform static method)": [[19, "maxaifeaturization.transformation.transform.DateTimeTransform.convert_to_iso8601"]], "decode_transformation() (maxaifeaturization.transformation.transform.transformation method)": [[19, "maxaifeaturization.transformation.transform.Transformation.decode_transformation"]], "execute() (maxaifeaturization.transformation.transform.filter method)": [[19, "maxaifeaturization.transformation.transform.Filter.execute"]], "execute() (maxaifeaturization.transformation.transform.transformation method)": [[19, "maxaifeaturization.transformation.transform.Transformation.execute"]], "execute() (maxaifeaturization.transformation.window.windowoperations method)": [[19, "maxaifeaturization.transformation.window.WindowOperations.execute"]], "exp() (maxaifeaturization.transformation.transform.numtransforms static method)": [[19, "maxaifeaturization.transformation.transform.NumTransforms.exp"]], "log() (maxaifeaturization.transformation.transform.numtransforms static method)": [[19, "maxaifeaturization.transformation.transform.NumTransforms.log"]], "maxaifeaturization.transformation": [[19, "module-maxaifeaturization.transformation"]], "maxaifeaturization.transformation.transform": [[19, "module-maxaifeaturization.transformation.transform"]], "maxaifeaturization.transformation.window": [[19, "module-maxaifeaturization.transformation.window"]], "one_hot_encoder() (maxaifeaturization.transformation.transform.strtransforms static method)": [[19, "maxaifeaturization.transformation.transform.StrTransforms.one_hot_encoder"]], "operation_dict (maxaifeaturization.transformation.transform.constants attribute)": [[19, "maxaifeaturization.transformation.transform.Constants.operation_dict"]], "operation_dict (maxaifeaturization.transformation.window.constants attribute)": [[19, "maxaifeaturization.transformation.window.Constants.operation_dict"]], "reciprocal() (maxaifeaturization.transformation.transform.numtransforms static method)": [[19, "maxaifeaturization.transformation.transform.NumTransforms.reciprocal"]], "split_column() (maxaifeaturization.transformation.transform.strtransforms static method)": [[19, "maxaifeaturization.transformation.transform.StrTransforms.split_column"]], "string_indexer() (maxaifeaturization.transformation.transform.strtransforms static method)": [[19, "maxaifeaturization.transformation.transform.StrTransforms.string_indexer"]], "trim_whitespaces() (maxaifeaturization.transformation.transform.strtransforms static method)": [[19, "maxaifeaturization.transformation.transform.StrTransforms.trim_whitespaces"]], "unpack_kwargs() (in module maxaifeaturization.transformation.transform)": [[19, "maxaifeaturization.transformation.transform.unpack_kwargs"]], "zscore() (maxaifeaturization.transformation.transform.numtransforms static method)": [[19, "maxaifeaturization.transformation.transform.NumTransforms.zscore"]], "maxflow (class in maxaimetadata.maxflow)": [[20, "maxaimetadata.maxflow.MaxFlow"]], "maxrun (class in maxaimetadata.maxflow)": [[20, "maxaimetadata.maxflow.MaxRun"]], "auto_log() (maxaimetadata.maxflow.maxflow method)": [[20, "maxaimetadata.maxflow.MaxFlow.auto_log"]], "end_run() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.end_run"]], "get_active_flow() (maxaimetadata.maxflow.maxflow class method)": [[20, "maxaimetadata.maxflow.MaxFlow.get_active_flow"]], "get_active_run() (maxaimetadata.maxflow.maxflow class method)": [[20, "maxaimetadata.maxflow.MaxFlow.get_active_run"]], "get_registered_model() (maxaimetadata.maxflow.maxflow method)": [[20, "maxaimetadata.maxflow.MaxFlow.get_registered_model"]], "log_artifact() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_artifact"]], "log_artifacts() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_artifacts"]], "log_data() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_data"]], "log_dict() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_dict"]], "log_figure() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_figure"]], "log_metric() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_metric"]], "log_metrics() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_metrics"]], "log_model() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_model"]], "log_param() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_param"]], "log_params() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.log_params"]], "maxaimetadata": [[20, "module-maxaimetadata"]], "maxaimetadata.maxflow": [[20, "module-maxaimetadata.maxflow"]], "maxaimetadata.test_maxflow": [[20, "module-maxaimetadata.test_maxflow"]], "register_model() (maxaimetadata.maxflow.maxflow method)": [[20, "maxaimetadata.maxflow.MaxFlow.register_model"]], "set_active() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.set_active"]], "set_experiment() (maxaimetadata.maxflow.maxflow method)": [[20, "maxaimetadata.maxflow.MaxFlow.set_experiment"]], "set_tag() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.set_tag"]], "set_tags() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.set_tags"]], "start_child_run() (maxaimetadata.maxflow.maxrun method)": [[20, "maxaimetadata.maxflow.MaxRun.start_child_run"]], "start_run() (maxaimetadata.maxflow.maxflow method)": [[20, "maxaimetadata.maxflow.MaxFlow.start_run"]], "stop() (maxaimetadata.maxflow.maxflow method)": [[20, "maxaimetadata.maxflow.MaxFlow.stop"]], "test_maxflow() (in module maxaimetadata.test_maxflow)": [[20, "maxaimetadata.test_maxflow.test_maxflow"]], "maxaimodel": [[21, "module-maxaimodel"]], "maxaimodel.h2o": [[22, "module-maxaimodel.H2O"]], "h2odlclassifier (class in maxaimodel.h2o.classification.h2o_dl)": [[23, "maxaimodel.H2O.classification.h2o_dl.H2ODLClassifier"]], "h2odrfclassifier (class in maxaimodel.h2o.classification.h2o_drf)": [[23, "maxaimodel.H2O.classification.h2o_drf.H2ODRFClassifier"]], "h2ogamclassifier (class in maxaimodel.h2o.classification.h2o_gam)": [[23, "maxaimodel.H2O.classification.h2o_gam.H2OGAMClassifier"]], "h2ogbmclassifier (class in maxaimodel.h2o.classification.h2o_gbm)": [[23, "maxaimodel.H2O.classification.h2o_gbm.H2OGBMClassifier"]], "h2oglmclassifier (class in maxaimodel.h2o.classification.h2o_glm)": [[23, "maxaimodel.H2O.classification.h2o_glm.H2OGLMClassifier"]], "h2oxgbclassifier (class in maxaimodel.h2o.classification.h2o_xgb)": [[23, "maxaimodel.H2O.classification.h2o_xgb.H2OXGBClassifier"]], "build() (maxaimodel.h2o.classification.h2o_dl.h2odlclassifier method)": [[23, "maxaimodel.H2O.classification.h2o_dl.H2ODLClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_drf.h2odrfclassifier method)": [[23, "maxaimodel.H2O.classification.h2o_drf.H2ODRFClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_gam.h2ogamclassifier method)": [[23, "maxaimodel.H2O.classification.h2o_gam.H2OGAMClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_gbm.h2ogbmclassifier method)": [[23, "maxaimodel.H2O.classification.h2o_gbm.H2OGBMClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_glm.h2oglmclassifier method)": [[23, "maxaimodel.H2O.classification.h2o_glm.H2OGLMClassifier.build"]], "build() (maxaimodel.h2o.classification.h2o_xgb.h2oxgbclassifier method)": [[23, "maxaimodel.H2O.classification.h2o_xgb.H2OXGBClassifier.build"]], "maxaimodel.h2o.classification": [[23, "module-maxaimodel.H2O.classification"]], "maxaimodel.h2o.classification.h2o_dl": [[23, "module-maxaimodel.H2O.classification.h2o_dl"]], "maxaimodel.h2o.classification.h2o_drf": [[23, "module-maxaimodel.H2O.classification.h2o_drf"]], "maxaimodel.h2o.classification.h2o_gam": [[23, "module-maxaimodel.H2O.classification.h2o_gam"]], "maxaimodel.h2o.classification.h2o_gbm": [[23, "module-maxaimodel.H2O.classification.h2o_gbm"]], "maxaimodel.h2o.classification.h2o_glm": [[23, "module-maxaimodel.H2O.classification.h2o_glm"]], "maxaimodel.h2o.classification.h2o_xgb": [[23, "module-maxaimodel.H2O.classification.h2o_xgb"]], "testregressionmodels (class in maxaimodel.h2o.classification.test.test_classification)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels"]], "maxaimodel.h2o.classification.test": [[24, "module-maxaimodel.H2O.classification.test"]], "maxaimodel.h2o.classification.test.test_classification": [[24, "module-maxaimodel.H2O.classification.test.test_classification"]], "model_init() (in module maxaimodel.h2o.classification.test.test_classification)": [[24, "maxaimodel.H2O.classification.test.test_classification.model_init"]], "pytestmark (maxaimodel.h2o.classification.test.test_classification.testregressionmodels attribute)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.pytestmark"]], "setup_class() (maxaimodel.h2o.classification.test.test_classification.testregressionmodels class method)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.setup_class"]], "teardown_class() (maxaimodel.h2o.classification.test.test_classification.testregressionmodels class method)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.teardown_class"]], "test_fit_model() (maxaimodel.h2o.classification.test.test_classification.testregressionmodels method)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.test_fit_model"]], "test_load_model() (maxaimodel.h2o.classification.test.test_classification.testregressionmodels method)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.test_load_model"]], "test_predict_model() (maxaimodel.h2o.classification.test.test_classification.testregressionmodels method)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.test_predict_model"]], "test_save_model() (maxaimodel.h2o.classification.test.test_classification.testregressionmodels method)": [[24, "maxaimodel.H2O.classification.test.test_classification.TestRegressionModels.test_save_model"]], "h2okmeansclustering (class in maxaimodel.h2o.clustering.h2o_kmeans)": [[25, "maxaimodel.H2O.clustering.h2o_kmeans.H2OKmeansClustering"]], "build() (maxaimodel.h2o.clustering.h2o_kmeans.h2okmeansclustering method)": [[25, "maxaimodel.H2O.clustering.h2o_kmeans.H2OKmeansClustering.build"]], "maxaimodel.h2o.clustering": [[25, "module-maxaimodel.H2O.clustering"]], "maxaimodel.h2o.clustering.h2o_kmeans": [[25, "module-maxaimodel.H2O.clustering.h2o_kmeans"]], "testclusteringmodels (class in maxaimodel.h2o.clustering.test.test_clustering)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels"]], "maxaimodel.h2o.clustering.test": [[26, "module-maxaimodel.H2O.clustering.test"]], "maxaimodel.h2o.clustering.test.test_clustering": [[26, "module-maxaimodel.H2O.clustering.test.test_clustering"]], "model_init() (in module maxaimodel.h2o.clustering.test.test_clustering)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.model_init"]], "pytestmark (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels attribute)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.pytestmark"]], "setup_class() (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels class method)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.setup_class"]], "teardown_class() (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels class method)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.teardown_class"]], "test_fit_model() (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels method)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.test_fit_model"]], "test_load_model() (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels method)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.test_load_model"]], "test_predict_model() (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels method)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.test_predict_model"]], "test_save_model() (maxaimodel.h2o.clustering.test.test_clustering.testclusteringmodels method)": [[26, "maxaimodel.H2O.clustering.test.test_clustering.TestClusteringModels.test_save_model"]], "h2odlregressor (class in maxaimodel.h2o.regression.h2o_dl_regressor)": [[27, "maxaimodel.H2O.regression.h2o_dl_regressor.H2ODLRegressor"]], "h2odrfregressor (class in maxaimodel.h2o.regression.h2o_drf_regressor)": [[27, "maxaimodel.H2O.regression.h2o_drf_regressor.H2ODRFRegressor"]], "h2ogamregressor (class in maxaimodel.h2o.regression.h2o_gam_regressor)": [[27, "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor"]], "h2ogbmregressor (class in maxaimodel.h2o.regression.h2o_gbm_regressor)": [[27, "maxaimodel.H2O.regression.h2o_gbm_regressor.H2OGBMRegressor"]], "h2oglmregressor (class in maxaimodel.h2o.regression.h2o_glm_regressor)": [[27, "maxaimodel.H2O.regression.h2o_glm_regressor.H2OGLMRegressor"]], "h2oxgbregressor (class in maxaimodel.h2o.regression.h2o_xgb_regressor)": [[27, "maxaimodel.H2O.regression.h2o_xgb_regressor.H2OXGBRegressor"]], "build() (maxaimodel.h2o.regression.h2o_dl_regressor.h2odlregressor method)": [[27, "maxaimodel.H2O.regression.h2o_dl_regressor.H2ODLRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_drf_regressor.h2odrfregressor method)": [[27, "maxaimodel.H2O.regression.h2o_drf_regressor.H2ODRFRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_gam_regressor.h2ogamregressor method)": [[27, "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_gbm_regressor.h2ogbmregressor method)": [[27, "maxaimodel.H2O.regression.h2o_gbm_regressor.H2OGBMRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_glm_regressor.h2oglmregressor method)": [[27, "maxaimodel.H2O.regression.h2o_glm_regressor.H2OGLMRegressor.build"]], "build() (maxaimodel.h2o.regression.h2o_xgb_regressor.h2oxgbregressor method)": [[27, "maxaimodel.H2O.regression.h2o_xgb_regressor.H2OXGBRegressor.build"]], "maxaimodel.h2o.regression": [[27, "module-maxaimodel.H2O.regression"]], "maxaimodel.h2o.regression.h2o_dl_regressor": [[27, "module-maxaimodel.H2O.regression.h2o_dl_regressor"]], "maxaimodel.h2o.regression.h2o_drf_regressor": [[27, "module-maxaimodel.H2O.regression.h2o_drf_regressor"]], "maxaimodel.h2o.regression.h2o_gam_regressor": [[27, "module-maxaimodel.H2O.regression.h2o_gam_regressor"]], "maxaimodel.h2o.regression.h2o_gbm_regressor": [[27, "module-maxaimodel.H2O.regression.h2o_gbm_regressor"]], "maxaimodel.h2o.regression.h2o_glm_regressor": [[27, "module-maxaimodel.H2O.regression.h2o_glm_regressor"]], "maxaimodel.h2o.regression.h2o_xgb_regressor": [[27, "module-maxaimodel.H2O.regression.h2o_xgb_regressor"]], "optimise_model() (maxaimodel.h2o.regression.h2o_gam_regressor.h2ogamregressor method)": [[27, "maxaimodel.H2O.regression.h2o_gam_regressor.H2OGAMRegressor.optimise_model"]], "h2oisolationforestmax (class in maxaimodel.h2o.unsupervised.h2o_isolation_forest)": [[28, "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX"]], "build() (maxaimodel.h2o.unsupervised.h2o_isolation_forest.h2oisolationforestmax method)": [[28, "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX.build"]], "maxaimodel.h2o.unsupervised": [[28, "module-maxaimodel.H2O.unsupervised"]], "maxaimodel.h2o.unsupervised.h2o_isolation_forest": [[28, "module-maxaimodel.H2O.unsupervised.h2o_isolation_forest"]], "optimise_model() (maxaimodel.h2o.unsupervised.h2o_isolation_forest.h2oisolationforestmax method)": [[28, "maxaimodel.H2O.unsupervised.h2o_isolation_forest.H2OIsolationForestMAX.optimise_model"]], "testunsupervisedmodels (class in maxaimodel.h2o.unsupervised.test.test_unsupervised)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels"]], "maxaimodel.h2o.unsupervised.test": [[29, "module-maxaimodel.H2O.unsupervised.test"]], "maxaimodel.h2o.unsupervised.test.test_unsupervised": [[29, "module-maxaimodel.H2O.unsupervised.test.test_unsupervised"]], "model_init() (in module maxaimodel.h2o.unsupervised.test.test_unsupervised)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.model_init"]], "pytestmark (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels attribute)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.pytestmark"]], "setup_class() (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels class method)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.setup_class"]], "teardown_class() (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels class method)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.teardown_class"]], "test_fit_model() (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels method)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.test_fit_model"]], "test_load_model() (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels method)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.test_load_model"]], "test_predict_model() (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels method)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.test_predict_model"]], "test_save_model() (maxaimodel.h2o.unsupervised.test.test_unsupervised.testunsupervisedmodels method)": [[29, "maxaimodel.H2O.unsupervised.test.test_unsupervised.TestUnsupervisedModels.test_save_model"]], "maxaimodel.python": [[30, "module-maxaimodel.python"]], "arima (class in maxaimodel.python.timeseries.arima)": [[31, "maxaimodel.python.timeseries.arima.Arima"]], "fbprophet (class in maxaimodel.python.timeseries.prophet)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet"]], "garch (class in maxaimodel.python.timeseries.garch)": [[31, "maxaimodel.python.timeseries.garch.Garch"]], "nprophet (class in maxaimodel.python.timeseries.neuroprophet)": [[31, "maxaimodel.python.timeseries.neuroprophet.NProphet"]], "build() (maxaimodel.python.timeseries.arima.arima method)": [[31, "maxaimodel.python.timeseries.arima.Arima.build"]], "build() (maxaimodel.python.timeseries.garch.garch method)": [[31, "maxaimodel.python.timeseries.garch.Garch.build"]], "build() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "maxaimodel.python.timeseries.neuroprophet.NProphet.build"]], "build() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.build"]], "fit() (maxaimodel.python.timeseries.arima.arima method)": [[31, "id0"], [31, "maxaimodel.python.timeseries.arima.Arima.fit"]], "fit() (maxaimodel.python.timeseries.garch.garch method)": [[31, "id3"], [31, "maxaimodel.python.timeseries.garch.Garch.fit"]], "fit() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "id6"], [31, "maxaimodel.python.timeseries.neuroprophet.NProphet.fit"]], "fit() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "id10"], [31, "maxaimodel.python.timeseries.prophet.FBProphet.fit"]], "get_event_df() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "id7"], [31, "maxaimodel.python.timeseries.neuroprophet.NProphet.get_event_df"]], "get_event_df() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.get_event_df"]], "get_holiday_df() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.get_holiday_df"]], "get_model_diagnostics() (maxaimodel.python.timeseries.arima.arima method)": [[31, "maxaimodel.python.timeseries.arima.Arima.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.python.timeseries.garch.garch method)": [[31, "maxaimodel.python.timeseries.garch.Garch.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "maxaimodel.python.timeseries.neuroprophet.NProphet.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.get_model_diagnostics"]], "get_params() (maxaimodel.python.timeseries.arima.arima method)": [[31, "maxaimodel.python.timeseries.arima.Arima.get_params"]], "get_params() (maxaimodel.python.timeseries.garch.garch method)": [[31, "maxaimodel.python.timeseries.garch.Garch.get_params"]], "get_params() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "maxaimodel.python.timeseries.neuroprophet.NProphet.get_params"]], "get_params() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.get_params"]], "load() (maxaimodel.python.timeseries.arima.arima method)": [[31, "maxaimodel.python.timeseries.arima.Arima.load"]], "load() (maxaimodel.python.timeseries.garch.garch method)": [[31, "maxaimodel.python.timeseries.garch.Garch.load"]], "load() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "maxaimodel.python.timeseries.neuroprophet.NProphet.load"]], "load() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.load"]], "maxaimodel.python.timeseries": [[31, "module-maxaimodel.python.timeseries"]], "maxaimodel.python.timeseries.arima": [[31, "module-maxaimodel.python.timeseries.arima"]], "maxaimodel.python.timeseries.garch": [[31, "module-maxaimodel.python.timeseries.garch"]], "maxaimodel.python.timeseries.neuroprophet": [[31, "module-maxaimodel.python.timeseries.neuroprophet"]], "maxaimodel.python.timeseries.prophet": [[31, "module-maxaimodel.python.timeseries.prophet"]], "predict() (maxaimodel.python.timeseries.arima.arima method)": [[31, "id1"], [31, "maxaimodel.python.timeseries.arima.Arima.predict"]], "predict() (maxaimodel.python.timeseries.garch.garch method)": [[31, "id4"], [31, "maxaimodel.python.timeseries.garch.Garch.predict"]], "predict() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "id8"], [31, "maxaimodel.python.timeseries.neuroprophet.NProphet.predict"]], "predict() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "id11"], [31, "maxaimodel.python.timeseries.prophet.FBProphet.predict"]], "save() (maxaimodel.python.timeseries.arima.arima method)": [[31, "maxaimodel.python.timeseries.arima.Arima.save"]], "save() (maxaimodel.python.timeseries.garch.garch method)": [[31, "maxaimodel.python.timeseries.garch.Garch.save"]], "save() (maxaimodel.python.timeseries.neuroprophet.nprophet method)": [[31, "maxaimodel.python.timeseries.neuroprophet.NProphet.save"]], "save() (maxaimodel.python.timeseries.prophet.fbprophet method)": [[31, "maxaimodel.python.timeseries.prophet.FBProphet.save"]], "training_framework (maxaimodel.python.timeseries.arima.arima attribute)": [[31, "id2"], [31, "maxaimodel.python.timeseries.arima.Arima.training_framework"]], "training_framework (maxaimodel.python.timeseries.garch.garch attribute)": [[31, "id5"], [31, "maxaimodel.python.timeseries.garch.Garch.training_framework"]], "training_framework (maxaimodel.python.timeseries.neuroprophet.nprophet attribute)": [[31, "id9"], [31, "maxaimodel.python.timeseries.neuroprophet.NProphet.training_framework"]], "training_framework (maxaimodel.python.timeseries.prophet.fbprophet attribute)": [[31, "id12"], [31, "maxaimodel.python.timeseries.prophet.FBProphet.training_framework"]], "maxaimodel.spark": [[32, "module-maxaimodel.spark"]], "sparkdecisiontreeclassifier (class in maxaimodel.spark.classification.spark_dt)": [[33, "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier"]], "sparkfmclassifier (class in maxaimodel.spark.classification.spark_fmc)": [[33, "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier"]], "sparkgbtclassifier (class in maxaimodel.spark.classification.spark_gbt)": [[33, "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier"]], "sparklinearsvc (class in maxaimodel.spark.classification.spark_svc)": [[33, "maxaimodel.spark.classification.spark_svc.SparkLinearSVC"]], "sparklogisticregression (class in maxaimodel.spark.classification.spark_lr)": [[33, "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression"]], "sparkmultilayerperceptronclassifier (class in maxaimodel.spark.classification.spark_mlp)": [[33, "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier"]], "sparknaivebayes (class in maxaimodel.spark.classification.spark_nb)": [[33, "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes"]], "sparkonevsrest (class in maxaimodel.spark.classification.spark_ovr)": [[33, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest"]], "sparkrfclassifier (class in maxaimodel.spark.classification.spark_rf)": [[33, "maxaimodel.spark.classification.spark_rf.SparkRFClassifier"]], "best_params() (maxaimodel.spark.classification.spark_ovr.sparkonevsrest method)": [[33, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest.best_params"]], "build() (maxaimodel.spark.classification.spark_dt.sparkdecisiontreeclassifier method)": [[33, "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier.build"]], "build() (maxaimodel.spark.classification.spark_fmc.sparkfmclassifier method)": [[33, "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier.build"]], "build() (maxaimodel.spark.classification.spark_gbt.sparkgbtclassifier method)": [[33, "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier.build"]], "build() (maxaimodel.spark.classification.spark_lr.sparklogisticregression method)": [[33, "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression.build"]], "build() (maxaimodel.spark.classification.spark_mlp.sparkmultilayerperceptronclassifier method)": [[33, "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier.build"]], "build() (maxaimodel.spark.classification.spark_nb.sparknaivebayes method)": [[33, "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes.build"]], "build() (maxaimodel.spark.classification.spark_ovr.sparkonevsrest method)": [[33, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest.build"]], "build() (maxaimodel.spark.classification.spark_rf.sparkrfclassifier method)": [[33, "maxaimodel.spark.classification.spark_rf.SparkRFClassifier.build"]], "build() (maxaimodel.spark.classification.spark_svc.sparklinearsvc method)": [[33, "maxaimodel.spark.classification.spark_svc.SparkLinearSVC.build"]], "load() (maxaimodel.spark.classification.spark_dt.sparkdecisiontreeclassifier static method)": [[33, "maxaimodel.spark.classification.spark_dt.SparkDecisionTreeClassifier.load"]], "load() (maxaimodel.spark.classification.spark_fmc.sparkfmclassifier static method)": [[33, "maxaimodel.spark.classification.spark_fmc.SparkFMClassifier.load"]], "load() (maxaimodel.spark.classification.spark_gbt.sparkgbtclassifier static method)": [[33, "maxaimodel.spark.classification.spark_gbt.SparkGBTClassifier.load"]], "load() (maxaimodel.spark.classification.spark_lr.sparklogisticregression static method)": [[33, "maxaimodel.spark.classification.spark_lr.SparkLogisticRegression.load"]], "load() (maxaimodel.spark.classification.spark_mlp.sparkmultilayerperceptronclassifier static method)": [[33, "maxaimodel.spark.classification.spark_mlp.SparkMultilayerPerceptronClassifier.load"]], "load() (maxaimodel.spark.classification.spark_nb.sparknaivebayes static method)": [[33, "maxaimodel.spark.classification.spark_nb.SparkNaiveBayes.load"]], "load() (maxaimodel.spark.classification.spark_ovr.sparkonevsrest method)": [[33, "maxaimodel.spark.classification.spark_ovr.SparkOneVsRest.load"]], "load() (maxaimodel.spark.classification.spark_rf.sparkrfclassifier static method)": [[33, "maxaimodel.spark.classification.spark_rf.SparkRFClassifier.load"]], "load() (maxaimodel.spark.classification.spark_svc.sparklinearsvc static method)": [[33, "maxaimodel.spark.classification.spark_svc.SparkLinearSVC.load"]], "maxaimodel.spark.classification": [[33, "module-maxaimodel.spark.classification"]], "maxaimodel.spark.classification.spark_dt": [[33, "module-maxaimodel.spark.classification.spark_dt"]], "maxaimodel.spark.classification.spark_fmc": [[33, "module-maxaimodel.spark.classification.spark_fmc"]], "maxaimodel.spark.classification.spark_gbt": [[33, "module-maxaimodel.spark.classification.spark_gbt"]], "maxaimodel.spark.classification.spark_lr": [[33, "module-maxaimodel.spark.classification.spark_lr"]], "maxaimodel.spark.classification.spark_mlp": [[33, "module-maxaimodel.spark.classification.spark_mlp"]], "maxaimodel.spark.classification.spark_nb": [[33, "module-maxaimodel.spark.classification.spark_nb"]], "maxaimodel.spark.classification.spark_ovr": [[33, "module-maxaimodel.spark.classification.spark_ovr"]], "maxaimodel.spark.classification.spark_rf": [[33, "module-maxaimodel.spark.classification.spark_rf"]], "maxaimodel.spark.classification.spark_svc": [[33, "module-maxaimodel.spark.classification.spark_svc"]], "hvt (class in maxaimodel.spark.clustering.spark_hvt)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT"]], "sparkkmeansclustering (class in maxaimodel.spark.clustering.spark_kmeans)": [[34, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering"]], "build() (maxaimodel.spark.clustering.spark_kmeans.sparkkmeansclustering method)": [[34, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering.build"]], "depth_clustering_check() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.depth_clustering_check"]], "fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.fit"]], "kmeans_fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.kmeans_fit"]], "kmeans_predict() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.kmeans_predict"]], "l_clustering_fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.l_clustering_fit"]], "l_clustering_predict() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.l_clustering_predict"]], "lhier_clustering_fit() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.lhier_clustering_fit"]], "load() (maxaimodel.spark.clustering.spark_kmeans.sparkkmeansclustering method)": [[34, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering.load"]], "maxaimodel.spark.clustering": [[34, "module-maxaimodel.spark.clustering"]], "maxaimodel.spark.clustering.spark_hvt": [[34, "module-maxaimodel.spark.clustering.spark_hvt"]], "maxaimodel.spark.clustering.spark_kmeans": [[34, "module-maxaimodel.spark.clustering.spark_kmeans"]], "optimise_k() (maxaimodel.spark.clustering.spark_kmeans.sparkkmeansclustering method)": [[34, "maxaimodel.spark.clustering.spark_kmeans.SparkKMeansClustering.optimise_k"]], "predict() (maxaimodel.spark.clustering.spark_hvt.hvt method)": [[34, "maxaimodel.spark.clustering.spark_hvt.HVT.predict"]], "sparkalsrecommender (class in maxaimodel.spark.recommendation.spark_als)": [[35, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender"]], "build() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[35, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.build"]], "load() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[35, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.load"]], "maxaimodel.spark.recommendation": [[35, "module-maxaimodel.spark.recommendation"]], "maxaimodel.spark.recommendation.spark_als": [[35, "module-maxaimodel.spark.recommendation.spark_als"]], "optimise_model_without_cross_validator() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[35, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.optimise_model_without_cross_validator"]], "save() (maxaimodel.spark.recommendation.spark_als.sparkalsrecommender method)": [[35, "maxaimodel.spark.recommendation.spark_als.SparkAlsRecommender.save"]], "sparkaftsurvivalregressor (class in maxaimodel.spark.regression.spark_aft_survival_regression)": [[36, "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor"]], "sparkdtregressor (class in maxaimodel.spark.regression.spark_dt_regression)": [[36, "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor"]], "sparkfmregressor (class in maxaimodel.spark.regression.spark_fm_regression)": [[36, "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor"]], "sparkgbtregressor (class in maxaimodel.spark.regression.spark_gbt_regression)": [[36, "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor"]], "sparkglregressor (class in maxaimodel.spark.regression.spark_gl_regression)": [[36, "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor"]], "sparkisotonicregressor (class in maxaimodel.spark.regression.spark_isotonic_regression)": [[36, "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor"]], "sparklinearregressor (class in maxaimodel.spark.regression.spark_linear_regression)": [[36, "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor"]], "sparkrfregressor (class in maxaimodel.spark.regression.spark_rf_regression)": [[36, "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor"]], "build() (maxaimodel.spark.regression.spark_aft_survival_regression.sparkaftsurvivalregressor method)": [[36, "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor.build"]], "build() (maxaimodel.spark.regression.spark_dt_regression.sparkdtregressor method)": [[36, "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor.build"]], "build() (maxaimodel.spark.regression.spark_fm_regression.sparkfmregressor method)": [[36, "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor.build"]], "build() (maxaimodel.spark.regression.spark_gbt_regression.sparkgbtregressor method)": [[36, "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor.build"]], "build() (maxaimodel.spark.regression.spark_gl_regression.sparkglregressor method)": [[36, "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor.build"]], "build() (maxaimodel.spark.regression.spark_isotonic_regression.sparkisotonicregressor method)": [[36, "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor.build"]], "build() (maxaimodel.spark.regression.spark_linear_regression.sparklinearregressor method)": [[36, "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor.build"]], "build() (maxaimodel.spark.regression.spark_rf_regression.sparkrfregressor method)": [[36, "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor.build"]], "load() (maxaimodel.spark.regression.spark_aft_survival_regression.sparkaftsurvivalregressor method)": [[36, "maxaimodel.spark.regression.spark_aft_survival_regression.SparkAFTSurvivalRegressor.load"]], "load() (maxaimodel.spark.regression.spark_dt_regression.sparkdtregressor method)": [[36, "maxaimodel.spark.regression.spark_dt_regression.SparkDTRegressor.load"]], "load() (maxaimodel.spark.regression.spark_fm_regression.sparkfmregressor method)": [[36, "maxaimodel.spark.regression.spark_fm_regression.SparkFMRegressor.load"]], "load() (maxaimodel.spark.regression.spark_gbt_regression.sparkgbtregressor method)": [[36, "maxaimodel.spark.regression.spark_gbt_regression.SparkGBTRegressor.load"]], "load() (maxaimodel.spark.regression.spark_gl_regression.sparkglregressor method)": [[36, "maxaimodel.spark.regression.spark_gl_regression.SparkGLRegressor.load"]], "load() (maxaimodel.spark.regression.spark_isotonic_regression.sparkisotonicregressor method)": [[36, "maxaimodel.spark.regression.spark_isotonic_regression.SparkIsotonicRegressor.load"]], "load() (maxaimodel.spark.regression.spark_linear_regression.sparklinearregressor method)": [[36, "maxaimodel.spark.regression.spark_linear_regression.SparkLinearRegressor.load"]], "load() (maxaimodel.spark.regression.spark_rf_regression.sparkrfregressor method)": [[36, "maxaimodel.spark.regression.spark_rf_regression.SparkRFRegressor.load"]], "maxaimodel.spark.regression": [[36, "module-maxaimodel.spark.regression"]], "maxaimodel.spark.regression.spark_aft_survival_regression": [[36, "module-maxaimodel.spark.regression.spark_aft_survival_regression"]], "maxaimodel.spark.regression.spark_dt_regression": [[36, "module-maxaimodel.spark.regression.spark_dt_regression"]], "maxaimodel.spark.regression.spark_fm_regression": [[36, "module-maxaimodel.spark.regression.spark_fm_regression"]], "maxaimodel.spark.regression.spark_gbt_regression": [[36, "module-maxaimodel.spark.regression.spark_gbt_regression"]], "maxaimodel.spark.regression.spark_gl_regression": [[36, "module-maxaimodel.spark.regression.spark_gl_regression"]], "maxaimodel.spark.regression.spark_isotonic_regression": [[36, "module-maxaimodel.spark.regression.spark_isotonic_regression"]], "maxaimodel.spark.regression.spark_linear_regression": [[36, "module-maxaimodel.spark.regression.spark_linear_regression"]], "maxaimodel.spark.regression.spark_rf_regression": [[36, "module-maxaimodel.spark.regression.spark_rf_regression"]], "dataprep (class in maxaimodel.spark.timeseries.xgb_ts)": [[37, "maxaimodel.spark.timeseries.xgb_ts.DataPrep"]], "sparktsforecaster (class in maxaimodel.spark.timeseries.spark_ts)": [[37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster"]], "xgbforecaster (class in maxaimodel.spark.timeseries.xgb_ts)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster"]], "build() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.build"]], "build() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.build"]], "fit() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "id0"], [37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.fit"]], "fit() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.fit"]], "get_model_diagnostics() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.get_model_diagnostics"]], "get_model_diagnostics() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.get_model_diagnostics"]], "get_params() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "id7"], [37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.get_params"]], "get_params() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.get_params"]], "increment_datetime() (maxaimodel.spark.timeseries.xgb_ts.dataprep static method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.DataPrep.increment_datetime"]], "infer_frequency() (maxaimodel.spark.timeseries.xgb_ts.dataprep static method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.DataPrep.infer_frequency"]], "load() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.load"]], "load() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.load"]], "maxaimodel.spark.timeseries": [[37, "module-maxaimodel.spark.timeseries"]], "maxaimodel.spark.timeseries.spark_ts": [[37, "module-maxaimodel.spark.timeseries.spark_ts"]], "maxaimodel.spark.timeseries.xgb_ts": [[37, "module-maxaimodel.spark.timeseries.xgb_ts"]], "predict() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "id8"], [37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.predict"]], "predict() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.predict"]], "prepare_data() (maxaimodel.spark.timeseries.xgb_ts.dataprep static method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.DataPrep.prepare_data"]], "save() (maxaimodel.spark.timeseries.spark_ts.sparktsforecaster method)": [[37, "maxaimodel.spark.timeseries.spark_ts.SparkTSForecaster.save"]], "save() (maxaimodel.spark.timeseries.xgb_ts.xgbforecaster method)": [[37, "maxaimodel.spark.timeseries.xgb_ts.XGBForecaster.save"]], "binary_classifier_transformed_result() (in module maxairesources.conftest)": [[38, "maxairesources.conftest.binary_classifier_transformed_result"]], "maxairesources": [[38, "module-maxairesources"]], "maxairesources.conftest": [[38, "module-maxairesources.conftest"]], "multiclass_classifier_transformed_result() (in module maxairesources.conftest)": [[38, "maxairesources.conftest.multiclass_classifier_transformed_result"]], "normal_regressor_transformed_result() (in module maxairesources.conftest)": [[38, "maxairesources.conftest.normal_regressor_transformed_result"]], "spark_session() (in module maxairesources.conftest)": [[38, "maxairesources.conftest.spark_session"]], "noiseremoval (class in maxairesources.cleaning.noiseremoval)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval"]], "convert_timeformat() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.convert_timeformat"]], "determine_outlier_thersholds_std() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.determine_outlier_thersholds_std"]], "determine_outlier_thresholds_iqr() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.determine_outlier_thresholds_iqr"]], "drop_duplicates() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.drop_duplicates"]], "impute_null() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.impute_null"]], "maxairesources.cleaning": [[39, "module-maxairesources.cleaning"]], "maxairesources.cleaning.noiseremoval": [[39, "module-maxairesources.cleaning.NoiseRemoval"]], "outlier_detect() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.outlier_detect"]], "read_config() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.read_config"]], "remove_outlier() (maxairesources.cleaning.noiseremoval.noiseremoval method)": [[39, "maxairesources.cleaning.NoiseRemoval.NoiseRemoval.remove_outlier"]], "column_rename() (in module maxairesources.customer360.utility)": [[40, "maxairesources.customer360.utility.column_rename"]], "create_features() (in module maxairesources.customer360.utility)": [[40, "maxairesources.customer360.utility.create_features"]], "maxairesources.customer360": [[40, "module-maxairesources.customer360"]], "maxairesources.customer360.utility": [[40, "module-maxairesources.customer360.utility"]], "parse_arguments() (in module maxairesources.customer360.utility)": [[40, "maxairesources.customer360.utility.parse_arguments"]], "prepare_agg_arguments() (in module maxairesources.customer360.utility)": [[40, "maxairesources.customer360.utility.prepare_agg_arguments"]], "todatetype() (in module maxairesources.customer360.utility)": [[40, "maxairesources.customer360.utility.toDateType"]], "analysisbase (class in maxairesources.datachecks.analysis_base)": [[41, "maxairesources.datachecks.analysis_base.AnalysisBase"]], "sparkdataframeanalyser (class in maxairesources.datachecks.dataframe_analysis_spark)": [[41, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser"]], "compare_reports() (maxairesources.datachecks.analysis_base.analysisbase method)": [[41, "maxairesources.datachecks.analysis_base.AnalysisBase.compare_reports"]], "compare_reports() (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser method)": [[41, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.compare_reports"]], "default_behaviours (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser attribute)": [[41, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.default_behaviours"]], "default_thresholds (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser attribute)": [[41, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.default_thresholds"]], "generate_data_health_report() (maxairesources.datachecks.analysis_base.analysisbase method)": [[41, "maxairesources.datachecks.analysis_base.AnalysisBase.generate_data_health_report"]], "generate_data_health_report() (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser method)": [[41, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.generate_data_health_report"]], "get_column_types() (maxairesources.datachecks.analysis_base.analysisbase method)": [[41, "maxairesources.datachecks.analysis_base.AnalysisBase.get_column_types"]], "maxairesources.datachecks": [[41, "module-maxairesources.datachecks"]], "maxairesources.datachecks.analysis_base": [[41, "module-maxairesources.datachecks.analysis_base"]], "maxairesources.datachecks.dataframe_analysis_spark": [[41, "module-maxairesources.datachecks.dataframe_analysis_spark"]], "save_analysis_report() (maxairesources.datachecks.analysis_base.analysisbase method)": [[41, "maxairesources.datachecks.analysis_base.AnalysisBase.save_analysis_report"]], "validate_report() (maxairesources.datachecks.analysis_base.analysisbase method)": [[41, "maxairesources.datachecks.analysis_base.AnalysisBase.validate_report"]], "validate_report() (maxairesources.datachecks.dataframe_analysis_spark.sparkdataframeanalyser method)": [[41, "maxairesources.datachecks.dataframe_analysis_spark.SparkDataFrameAnalyser.validate_report"]], "maxairesources.datachecks.test": [[42, "module-maxairesources.datachecks.test"]], "maxairesources.datachecks.test.conftest": [[42, "module-maxairesources.datachecks.test.conftest"]], "maxairesources.datachecks.test.test_dataframe_analysis_spark": [[42, "module-maxairesources.datachecks.test.test_dataframe_analysis_spark"]], "sample_feast_dataframe_for_analysis() (in module maxairesources.datachecks.test.conftest)": [[42, "maxairesources.datachecks.test.conftest.sample_feast_dataframe_for_analysis"]], "test_binary_classification_report_spark() (in module maxairesources.datachecks.test.test_dataframe_analysis_spark)": [[42, "maxairesources.datachecks.test.test_dataframe_analysis_spark.test_binary_classification_report_spark"]], "ensemble (class in maxairesources.ensemble.ensemble)": [[43, "maxairesources.ensemble.ensemble.Ensemble"]], "votingclassifier() (maxairesources.ensemble.ensemble.ensemble method)": [[43, "maxairesources.ensemble.ensemble.Ensemble.VotingClassifier"]], "votingregressor() (maxairesources.ensemble.ensemble.ensemble method)": [[43, "maxairesources.ensemble.ensemble.Ensemble.VotingRegressor"]], "maxairesources.ensemble": [[43, "module-maxairesources.ensemble"]], "maxairesources.ensemble.ensemble": [[43, "module-maxairesources.ensemble.ensemble"]], "predict() (maxairesources.ensemble.ensemble.ensemble method)": [[43, "maxairesources.ensemble.ensemble.Ensemble.predict"]], "classifierevaluator (class in maxairesources.eval.classifier_evaluator_spark)": [[44, "maxairesources.eval.classifier_evaluator_spark.ClassifierEvaluator"]], "deepcheckmodelwrapper (class in maxairesources.eval.model_evaluator)": [[44, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper"]], "modelevaluator (class in maxairesources.eval.model_evaluator)": [[44, "maxairesources.eval.model_evaluator.ModelEvaluator"]], "regressorevaluator (class in maxairesources.eval.regressor_evaluator_spark)": [[44, "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator"]], "evaluate() (maxairesources.eval.model_evaluator.modelevaluator method)": [[44, "maxairesources.eval.model_evaluator.ModelEvaluator.evaluate"]], "feature_importances_ (maxairesources.eval.model_evaluator.deepcheckmodelwrapper property)": [[44, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper.feature_importances_"]], "general_regression_report_spark() (maxairesources.eval.regressor_evaluator_spark.regressorevaluator method)": [[44, "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator.general_regression_report_spark"]], "get_evaluation_report() (maxairesources.eval.classifier_evaluator_spark.classifierevaluator method)": [[44, "maxairesources.eval.classifier_evaluator_spark.ClassifierEvaluator.get_evaluation_report"]], "get_evaluation_report() (maxairesources.eval.regressor_evaluator_spark.regressorevaluator method)": [[44, "maxairesources.eval.regressor_evaluator_spark.RegressorEvaluator.get_evaluation_report"]], "maxairesources.eval": [[44, "module-maxairesources.eval"]], "maxairesources.eval.classifier_evaluator_spark": [[44, "module-maxairesources.eval.classifier_evaluator_spark"]], "maxairesources.eval.model_evaluator": [[44, "module-maxairesources.eval.model_evaluator"]], "maxairesources.eval.regressor_evaluator_spark": [[44, "module-maxairesources.eval.regressor_evaluator_spark"]], "predict() (maxairesources.eval.model_evaluator.deepcheckmodelwrapper method)": [[44, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper.predict"]], "predict_proba() (maxairesources.eval.model_evaluator.deepcheckmodelwrapper method)": [[44, "maxairesources.eval.model_evaluator.DeepCheckModelWrapper.predict_proba"]], "datasourcenotdefinederror": [[45, "maxairesources.exception.exceptions.DataSourceNotDefinedError"]], "featuretransformexception": [[45, "maxairesources.exception.exceptions.FeatureTransformException"]], "maxaiexception": [[45, "maxairesources.exception.exceptions.MaxAIException"]], "missingenvironmentvariable": [[45, "maxairesources.exception.exceptions.MissingEnvironmentVariable"]], "modelloadexception": [[45, "maxairesources.exception.exceptions.ModelLoadException"]], "modelnotimplemented": [[45, "maxairesources.exception.exceptions.ModelNotImplemented"]], "modelsaveexception": [[45, "maxairesources.exception.exceptions.ModelSaveException"]], "modeltrainexception": [[45, "maxairesources.exception.exceptions.ModelTrainException"]], "modeltypenotdefinedexception": [[45, "maxairesources.exception.exceptions.ModelTypeNotDefinedException"]], "portinformationnotfounderror": [[45, "maxairesources.exception.exceptions.PortInformationNotFoundError"]], "unknownoperationmode": [[45, "maxairesources.exception.exceptions.UnknownOperationMode"]], "geterrormessage() (maxairesources.exception.exceptions.maxaiexception method)": [[45, "maxairesources.exception.exceptions.MaxAIException.getErrorMessage"]], "maxairesources.exception": [[45, "module-maxairesources.exception"]], "maxairesources.exception.exceptions": [[45, "module-maxairesources.exception.exceptions"]], "modelfactory (class in maxairesources.factory.model_factory)": [[46, "maxairesources.factory.model_factory.ModelFactory"]], "get_model() (maxairesources.factory.model_factory.modelfactory class method)": [[46, "maxairesources.factory.model_factory.ModelFactory.get_model"]], "import_submodules() (in module maxairesources.factory)": [[46, "maxairesources.factory.import_submodules"]], "maxairesources.factory": [[46, "module-maxairesources.factory"]], "maxairesources.factory.model_factory": [[46, "module-maxairesources.factory.model_factory"]], "register_model() (maxairesources.factory.model_factory.modelfactory class method)": [[46, "maxairesources.factory.model_factory.ModelFactory.register_model"]], "customadapter (class in maxairesources.logging.logger)": [[47, "maxairesources.logging.logger.CustomAdapter"]], "get_file_handler() (in module maxairesources.logging.logger)": [[47, "maxairesources.logging.logger.get_file_handler"]], "get_logger() (in module maxairesources.logging.logger)": [[47, "maxairesources.logging.logger.get_logger"]], "get_stream_handler() (in module maxairesources.logging.logger)": [[47, "maxairesources.logging.logger.get_stream_handler"]], "maxairesources.logging": [[47, "module-maxairesources.logging"]], "maxairesources.logging.logger": [[47, "module-maxairesources.logging.logger"]], "process() (maxairesources.logging.logger.customadapter method)": [[47, "maxairesources.logging.logger.CustomAdapter.process"]], "modelapprover (class in maxairesources.model_approval.model_approver_spark)": [[48, "maxairesources.model_approval.model_approver_spark.ModelApprover"]], "is_above_threshold() (maxairesources.model_approval.model_approver_spark.modelapprover method)": [[48, "maxairesources.model_approval.model_approver_spark.ModelApprover.is_above_threshold"]], "maxairesources.model_approval": [[48, "module-maxairesources.model_approval"]], "maxairesources.model_approval.model_approver_spark": [[48, "module-maxairesources.model_approval.model_approver_spark"]], "maxairesources.optimizer": [[49, "module-maxairesources.optimizer"]], "sparkpipeline (class in maxairesources.pipeline.spark_pipeline)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline"]], "sparktransformerfactory (class in maxairesources.pipeline.pipeline_factory)": [[50, "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory"]], "build() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.build"]], "build_multiple() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.build_multiple"]], "fit() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.fit"]], "fit_multiple() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.fit_multiple"]], "get_params() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.get_params"]], "get_transformer() (maxairesources.pipeline.pipeline_factory.sparktransformerfactory method)": [[50, "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory.get_transformer"]], "load() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.load"]], "maxairesources.pipeline": [[50, "module-maxairesources.pipeline"]], "maxairesources.pipeline.pipeline_factory": [[50, "module-maxairesources.pipeline.pipeline_factory"]], "maxairesources.pipeline.spark_pipeline": [[50, "module-maxairesources.pipeline.spark_pipeline"]], "register_transformer() (maxairesources.pipeline.pipeline_factory.sparktransformerfactory method)": [[50, "maxairesources.pipeline.pipeline_factory.SparkTransformerFactory.register_transformer"]], "save() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.save"]], "training_framework (maxairesources.pipeline.spark_pipeline.sparkpipeline attribute)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.training_framework"]], "transform() (maxairesources.pipeline.spark_pipeline.sparkpipeline method)": [[50, "maxairesources.pipeline.spark_pipeline.SparkPipeline.transform"]], "adls (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.ADLS"]], "azure (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.AZURE"]], "cassandra (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.CASSANDRA"]], "dataframe (class in maxairesources.utilities.data_connectors)": [[51, "maxairesources.utilities.data_connectors.DataFrame"]], "encryption (class in maxairesources.utilities.encryption)": [[51, "maxairesources.utilities.encryption.Encryption"]], "feast (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.FEAST"]], "gs (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.GS"]], "iceberg (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.ICEBERG"]], "maxaidataframe (class in maxairesources.utilities.data_connectors)": [[51, "maxairesources.utilities.data_connectors.MaxAIDataFrame"]], "multitrain (class in maxairesources.utilities.multi_train)": [[51, "maxairesources.utilities.multi_train.MultiTrain"]], "preprocessing (class in maxairesources.utilities.preprocessing)": [[51, "maxairesources.utilities.preprocessing.Preprocessing"]], "s3 (maxairesources.utilities.data_connectors.dataframe attribute)": [[51, "maxairesources.utilities.data_connectors.DataFrame.S3"]], "sparkdistributor (class in maxairesources.utilities.spark_distributor)": [[51, "maxairesources.utilities.spark_distributor.SparkDistributor"]], "traintestsplit (class in maxairesources.utilities.train_test_split)": [[51, "maxairesources.utilities.train_test_split.TrainTestSplit"]], "aggregate_transactional_data() (maxairesources.utilities.preprocessing.preprocessing method)": [[51, "maxairesources.utilities.preprocessing.Preprocessing.aggregate_transactional_data"]], "decrypt() (maxairesources.utilities.encryption.encryption static method)": [[51, "maxairesources.utilities.encryption.Encryption.decrypt"]], "decrypt_columns() (maxairesources.utilities.encryption.encryption static method)": [[51, "maxairesources.utilities.encryption.Encryption.decrypt_columns"]], "encrypt() (maxairesources.utilities.encryption.encryption static method)": [[51, "maxairesources.utilities.encryption.Encryption.encrypt"]], "encrypt_columns() (maxairesources.utilities.encryption.encryption static method)": [[51, "maxairesources.utilities.encryption.Encryption.encrypt_columns"]], "get() (maxairesources.utilities.data_connectors.dataframe method)": [[51, "maxairesources.utilities.data_connectors.DataFrame.get"]], "get_data_for_a_port() (maxairesources.utilities.data_connectors.dataframe static method)": [[51, "maxairesources.utilities.data_connectors.DataFrame.get_data_for_a_port"]], "get_run_id_timestamp() (in module maxairesources.utilities.misc)": [[51, "maxairesources.utilities.misc.get_run_id_timestamp"]], "maxairesources.utilities": [[51, "module-maxairesources.utilities"]], "maxairesources.utilities.common_utils": [[51, "module-maxairesources.utilities.common_utils"]], "maxairesources.utilities.data_connectors": [[51, "module-maxairesources.utilities.data_connectors"]], "maxairesources.utilities.encryption": [[51, "module-maxairesources.utilities.encryption"]], "maxairesources.utilities.misc": [[51, "module-maxairesources.utilities.misc"]], "maxairesources.utilities.multi_train": [[51, "module-maxairesources.utilities.multi_train"]], "maxairesources.utilities.preprocessing": [[51, "module-maxairesources.utilities.preprocessing"]], "maxairesources.utilities.spark_distributor": [[51, "module-maxairesources.utilities.spark_distributor"]], "maxairesources.utilities.train_test_split": [[51, "module-maxairesources.utilities.train_test_split"]], "overwrite_dict() (in module maxairesources.utilities.misc)": [[51, "maxairesources.utilities.misc.overwrite_dict"]], "pandas_to_spark_wrapper() (maxairesources.utilities.spark_distributor.sparkdistributor method)": [[51, "maxairesources.utilities.spark_distributor.SparkDistributor.pandas_to_spark_wrapper"]], "predict() (maxairesources.utilities.multi_train.multitrain method)": [[51, "maxairesources.utilities.multi_train.MultiTrain.predict"]], "random_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[51, "maxairesources.utilities.train_test_split.TrainTestSplit.random_split"]], "stratified_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[51, "maxairesources.utilities.train_test_split.TrainTestSplit.stratified_split"]], "time_series_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[51, "maxairesources.utilities.train_test_split.TrainTestSplit.time_series_split"]], "train_models() (maxairesources.utilities.multi_train.multitrain method)": [[51, "maxairesources.utilities.multi_train.MultiTrain.train_models"]], "train_test_split() (maxairesources.utilities.train_test_split.traintestsplit method)": [[51, "maxairesources.utilities.train_test_split.TrainTestSplit.train_test_split"]], "trained_models (maxairesources.utilities.multi_train.multitrain property)": [[51, "maxairesources.utilities.multi_train.MultiTrain.trained_models"]], "write() (maxairesources.utilities.data_connectors.dataframe method)": [[51, "maxairesources.utilities.data_connectors.DataFrame.write"]], "write_file_to_s3() (in module maxairesources.utilities.common_utils)": [[51, "maxairesources.utilities.common_utils.write_file_to_s3"]], "testdataconnector (class in maxairesources.utilities.tests.test_data_connector)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector"]], "testmultitrain (class in maxairesources.utilities.tests.test_multi_train)": [[52, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain"]], "testsparkdistributor (class in maxairesources.utilities.tests.test_spark_distributor)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor"]], "testtraintestsplit (class in maxairesources.utilities.tests.test_train_test_split)": [[52, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit"]], "get_function() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.get_function"]], "load_sample_data() (maxairesources.utilities.tests.test_data_connector.testdataconnector class method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.load_sample_data"]], "load_sample_data() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.load_sample_data"]], "load_sample_data() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit class method)": [[52, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.load_sample_data"]], "maxairesources.utilities.tests": [[52, "module-maxairesources.utilities.tests"]], "maxairesources.utilities.tests.test_data_connector": [[52, "module-maxairesources.utilities.tests.test_data_connector"]], "maxairesources.utilities.tests.test_multi_train": [[52, "module-maxairesources.utilities.tests.test_multi_train"]], "maxairesources.utilities.tests.test_spark_distributor": [[52, "module-maxairesources.utilities.tests.test_spark_distributor"]], "maxairesources.utilities.tests.test_train_test_split": [[52, "module-maxairesources.utilities.tests.test_train_test_split"]], "setup_class() (maxairesources.utilities.tests.test_data_connector.testdataconnector class method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.setup_class"]], "setup_class() (maxairesources.utilities.tests.test_multi_train.testmultitrain class method)": [[52, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.setup_class"]], "setup_class() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.setup_class"]], "setup_class() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit class method)": [[52, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.setup_class"]], "teardown_class() (maxairesources.utilities.tests.test_data_connector.testdataconnector class method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.teardown_class"]], "teardown_class() (maxairesources.utilities.tests.test_multi_train.testmultitrain class method)": [[52, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.teardown_class"]], "teardown_class() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor class method)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.teardown_class"]], "teardown_class() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit class method)": [[52, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.teardown_class"]], "test_function_1_test1() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor method)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.test_function_1_test1"]], "test_function_1_test2() (maxairesources.utilities.tests.test_spark_distributor.testsparkdistributor method)": [[52, "maxairesources.utilities.tests.test_spark_distributor.TestSparkDistributor.test_function_1_test2"]], "test_predict() (maxairesources.utilities.tests.test_multi_train.testmultitrain method)": [[52, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.test_predict"]], "test_random_split() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit method)": [[52, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.test_random_split"]], "test_read_encrypytion_pandas_csv() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_read_encrypytion_pandas_csv"]], "test_read_encrypytion_spark_parquet() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_read_encrypytion_spark_parquet"]], "test_read_without_encryption() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_read_without_encryption"]], "test_stratify_split() (maxairesources.utilities.tests.test_train_test_split.testtraintestsplit method)": [[52, "maxairesources.utilities.tests.test_train_test_split.TestTrainTestSplit.test_stratify_split"]], "test_train_models() (maxairesources.utilities.tests.test_multi_train.testmultitrain method)": [[52, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.test_train_models"]], "test_trained_models() (maxairesources.utilities.tests.test_multi_train.testmultitrain method)": [[52, "maxairesources.utilities.tests.test_multi_train.TestMultiTrain.test_trained_models"]], "test_write_encrypytion_pandas_csv() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_write_encrypytion_pandas_csv"]], "test_write_encrypytion_spark_parquet() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_write_encrypytion_spark_parquet"]], "test_write_without_encryption() (maxairesources.utilities.tests.test_data_connector.testdataconnector method)": [[52, "maxairesources.utilities.tests.test_data_connector.TestDataConnector.test_write_without_encryption"]]}})